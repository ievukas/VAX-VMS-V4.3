	$BEGIN	RMS0PARSE,000,RM$RMS,<PARSE FILE SPECIFICATION>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		This is the highest level routine to perform the $parse function
;
; Environment:
;		VAX/VMS
;
; Author:
;		Tim Halvorsen	AUG-1979
;
; Modified By:
;
;	V03-019	RAS0287		Ron Schaefer		 3-Apr-1984
;		Minor changes to searchlist and wildcard processing:
;		1.  Prevent searchlist continuation if the error
;		    is not a continuable one;
;		2.  Don't force context to be saved for ANY wildcard,
;		    only for searchlists, network or wildcard directories.
;
;	V03-018	RAS0251		Ron Schaefer		 9-Feb-1984
;		Add support for special parsing flag NAM$V_SLPARSE
;		for BACKUP.   This flag causes multiple $PARSEs of
;		a searchlist filespec to return successive searchlist
;		elements.  Reorganize the cleanup of old saved context.
;
;	V03-017	RAS0241,RAS0242	Ron Schaefer		23-Jan-1984
;		Fix bugcheck in saved-context searches caused by
;		a bogus null directory spec.
;		Fix bugchecks caused by lack of a fwa (valid R10)
;		on calls to RM$PARSE_FILE.
;		Return DNF error if no directory is found by RM$NEXTDIR.
;
;	V03-016	RAS0231		Ron Schaefer		 9-Jan-1984
;		Support NAM$V_SYNCHK by not doing the $ASSIGN nor
;		the directory lookup.  Use FWA$V_SYNTAX_CHK flag.
;		Don't save context in this case either so subsequent
;		$SEARCHs will not work.
;
;	V03-015	RAS0219		Ron Schaefer		 8-Dec-1983
;		Process errors from RM$INIT_SWB.
;
;	V03-014	RAS0218		Ron Schaefer		 5-Dec-1983
;		Make node names work as search list elements.
;	
;	V03-013	RAS0209		Ron Schaefer		 4-Nov-1983
;		Clean-up returned device characteristics by calling
;		a central routine  RM$RET_DEV_CHAR.
;
;	V03-012	RAS0201		Ron Schaefer		17-Oct-1983
;		Correct calls to RM$PARSE_FILE to account for the fact
;		that it does NOT necessarily preserve R7.
;
;	V03-011	KBT0565		Keith B. Thompson	26-Jul-1983
;		Save context if any wild field present
;
;	V03-010	KBT0530		Keith B. Thompson	31-May-1983
;		Add search list support
;
;	V03-009	KBT0519		Keith B. Thompson	23-May-1983
;		RM$XPFN moved so change ref to JSB
;
;	V03-008	LJA0062		Laurie J. Anderson	23-Feb-1983
;		Move RM$WRITE_DVI to RM0NAMSTR.MAR which is where it belongs.
;
;	V03-007	KBT0430		Keith B. Thompson	3-Dec-1982
;		Change the way the device name is returned by write_dvi
;
;	V03-006	KBT0427		Keith B. Thompson	2-Dec-1982
;		Fix rm$write_dvi to use new type of name in shrfilbuf
;
;	V03-005	KBT0405		Keith B. Thompson	30-Nov-1982
;		Change fwa$t_shrfildev to fwa$t_shrfilbuf
;
;	V03-004	RAS0103		Ron Schaefer		19-Nov-1982
;		Correct saving of the caller's access mode so that
;		exits via RM$EX_NOSTR have the caller's mode in R7.
;
;	V03-003	DMW4003		DMWalp			 2-Sep-1982
;		Added code so that RM$FABCHK was not called twice;
;		it was called once directly and a second time via RM$FSETI
;
;	V03-002	KBT0188		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and rename entry point to single '$'
;
;	V03-001	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PSLDEF.
;
;--

	.SBTTL	DEFINITIONS

;
;	symbol definitions
;

	$DEVDEF				; device characteristics
	$FABDEF				; fab definitions
	$FIBDEF				; fib definitions
	$FIDDEF				; fid definitions
	$FWADEF				; fwa definitions
	$IFBDEF				; ifab definitions
	$IMPDEF				; impure area definitions
	$NAMDEF				; nam definitions
	$PIODEF				; i/o control page definitions
	$PSLDEF				; program status longword definitions
	$RMSDEF				; RMS error codes
	$SSDEF				; system error codes

;
; Symbols
;

;
; Stack offsets for saved context (RM$PARSE_FILE)
;

	ESL	= 0	;	NAM$B_ESL
	RSL	= 1	;	NAM$B_RSL
	FNB	= 2	;	NAM$L_FNB
	STV	= 6	;	FAB$L_STV
	ERR	= 10	;	R0

	STACK_SIZE = 14	;	Size of stack to allocate


	.SBTTL	RMS$PARSE, Initiate Wildcard Sequence

;--
;
; PARSE
;	RMS$PARSE
;	
;	This routine initiates wildcarding within rms.
;	it allocates swb and fwa buffers to handle context
;	while traversing the directory tree.  They remain
;	allocated until the wildcard sequence is terminated
;	via either another parse or nmf error condition.
;
; inputs:
;
;	file spec from fab
;
; outputs:
;
;	r0 = status
;	expanded name string set
;	did set in nam block if non-wild directory
;
;--

	$ENTRY	RMS$PARSE
	$TSTPT	PARSE

;
; If another wildcard sequence was in progress using this
; ifab, then cleanup the previous one.
;

	BSBW	RM$FABCHK		; check fab validity returns only if ok
					; r11 = impure area
					; r8 = fab address
					; r7 = caller's access mode
        BNEQ	10$			; error if IFI non-zero
	PUSHL	R7			; save caller's mode
	MOVL	FAB$L_NAM(R8),R7	; get nam address
	BSBW	RM$CHKNAM		; check nam validity
	MOVL	R7,R6			; copy NAM block address
	MOVL	(SP)+,R7		; restore caller's mode
	BLBC	R0,40$			; branch if invalid (no error)

	MOVL	NAM$L_WCC(R6),R9	; get ifi of previous ifab
	BEQL	40$			; branch if none

	BITW	NAM$L_WCC+2(R6),-	; check that there are no spurious
		#^C<<NAM$M_SVCTX!-	; bits set in NAM$L_WCC other than
		     NAM$M_SRCHNMF!-	; the save context bit, the IFI bit,
		     NAM$M_IFI>@-16>	; or the search NMF bit
	BNEQ	20$			; if so, error in wcc param

	BBCC	#NAM$V_IFI,R9,40$	; branch if not 'search' ifi

	MOVL	#IMP$L_IFABTBL/4,R0	; ifab table longword offset
	BSBW	RM$GTIADR		; get ifab address
	BEQL	40$			; branch if illegal ifi
	BBC	#IFB$V_SEARCH,(R9),40$	; branch if not ours

;
; See if the user wants to go on to the next searchlist element.
;

	MOVW	NAM$L_WCC(R6),FAB$W_IFI(R8); set FAB as busy
	BSBW	RM$FSET_ALT		; set up remaining state
	MOVL	IFB$L_FWA_PTR(R9),R10	; get fwa ptr
	BEQL	30$			; start anew if none
	BBC	#NAM$V_SLPARSE,-	; see if special parse request
		NAM$B_NOP(R6),30$	; start anew if not
	RMSERR	NMF			; assume at end of list
	BBC	#FWA$V_SLPRESENT,(R10),EXIT	; no more files if not a list
	SSB	#FWA$V_SL_PASS,(R10)	; doing searchlist processing
	BRB	50$			; and do it

;
; error returns
;

10$:	RMSERR  IFI			; invalid ifi (must be zero)
	BRW	RM$EX_NOSTR		; exit without ifab

20$:	RMSERR	WCC			; error in wcc value
	BRW	RM$EX_NOSTR		; exit without ifab

;
; Cleaning up the previous context (IFAB, FWA, etc...) save the current
; Note that during the cleanup, stalling may take place.
;

30$:	PUSHL	AP			; save ap over cleanup call
	BSBW	RM$CLEANUP		; terminate previous sequence
	POPL	AP			; restore ap

;
; Allocate an ifab for internal context
;

40$:	BSBW	RM$FSETI_ALT		; allocate ifab/ifi

;
; Parse the name, assign channel, and fill in nam fields
;

	CLRL	R10			; signal initial call
50$:	BSBB	RM$PARSE_FILE		; do the heavy work
	BLBC	R0,EXIT			; branch if error
	BBS	#FWA$V_SYNTAX_CHK,-	; exit cleaning up if syntax check only
		(R10),EXIT

;
; Fill in (in the FAB) the primary and secondary device characteristics.
;

	BSBW	RM$RET_DEV_CHAR		; return characteristics

;
; If wcc was -1 on entry, then set a "save context" flag
; as the top bit of the ifi and save the ifi of the ifab/fwa
; for the current context in the nam block so we can pick
; it up later when the user calls search.  the save context flag
; enables keeping context around over parse/search calls
; and causes directory files to be read when possible.
;

	MOVL	FAB$L_NAM(R8),R7	; get NAM block
	BSBW	RM$CHKNAM		; check if nam valid
	BLBS	R0,SVCTX		; branch if ok
	BBS	#FWA$V_WILD_DIR,(R10),-	; if wild dir, must have nam block
		EXIT
	BBS	#FWA$V_SLPRESENT,(R10),EXIT	; or if search list
	RMSSUC				; else, set success
EXIT:	BRW	RM$CLSCU		; cleanup ifab,etc and exit with status
					; and without saving context

SVCTX:	BBS	#FWA$V_NODE,(R10),70$	; always keep context for networks
	BBS	#FWA$V_SLPRESENT,(R10),70$	; or if search list
	BBC	#DEV$V_RND,-		; never keep context for devices with
		IFB$L_PRIM_DEV(R9),EXIT	; nonrandom primary characteristics
	BBS	#DEV$V_SPL,-		; never keep context for devices 
		IFB$L_AS_DEV(R9),EXIT	; that are spooled
	BBS	#FWA$V_WILD_DIR,(R10),70$; if wild directories, keep context
	BBC	#IFB$V_SEARCH,(R9),EXIT	; cleanup if svctx not requested

70$:	MOVZWL	FAB$W_IFI(R8),-
		NAM$L_WCC(R7)		; save ifi of current context
	SSB	#IFB$V_SEARCH,(R9)	; mark as search-type ifab
	SSB	#NAM$V_IFI,NAM$L_WCC(R7); bit 16 set to indicate ifi, not wcc
	CLRW	FAB$W_IFI(R8)		; mbz for subsequent operations on fab
	CLRL	FWA$L_DIRBDB(R10)	; init directory bdb address
	BRW	RM$EXSUC		; exit with success -- leave ifab alone

	.SBTTL	RM$PARSE_FILE, Parse a File Specification

;--
;
; RM$PARSE_FILE
;
;	This routine parses the file specification and sets up
;	the channel and did for the file.  If this routine is called
;	for a search list operation and there are no more search list
;	elements to parse R0, FAB$L_STV, NAM$L_FNB, NAM$B_ESL and NAM$B_RSL
;	(if any) are NOT affected.
;
;	RMS$RENAME calls this routine twice for each file specification
;	If the channel is already assigned, then the did must not be set.
;
;	RMS$SEARCH calls this routine when ever it gets a FNF or NMF error.
;	It sets FWA$V_SL_PASS in order to look for a new file spec from
;	a search list.
;
; Inputs:
;
;	R8	= fab address
;	R9	= ifab address
;	R10	= fwa addr (if search list) or 0 (if not)
;	R11	= impure area
;	R0	= input error status (if FWA$V_SL_PASS set)
;	FAB$L_STV = 				"
;	NAM$L_FNB =				"
;	NAM$B_ESL =				"
;	NAM$B_RSL =
;
; Outputs:
;
;	R0	= status (see explination above)
;	R10	= fwa address
;
;	IFB$V_SEARCH is set if the user requested context to be saved
;
;	Registers r1-r7,ap are destroyed, device characteristics if PPF
;
;--

RM$PARSE_FILE::

;
; Make room on stack to save error codes and name block string lengths
;
;	ERR(SP)	=>	R0		error code
;	STV(SP)	=>	FAB$L_STV(R8)
;	FNB(SP)	=>	NAM$L_FNB
;	RSL(SP)	=>	NAM$B_RSL
;	ESL(SP)	=>	NAM$B_ESL
;

	SUBL2	#STACK_SIZE,SP			; adjust stack
	TSTL	R10				; any fwa?
	BEQL	PRS				; nope so parse as is

;
; If this is a search list operation see if a channel was assigned, if so
; deassign it
;

LOOP:	BBC	#FWA$V_SL_PASS,(R10),PRS	; is this a search list pass

;
; See if the input error is one that allows for continuation
;

	MOVL	S^#<RM$SLIST_ERR_CNT/2>,R1	; get number of errs to check
10$:	CMPW	R0,W^RM$SLIST_ERRS-2[R1]	; continue from this err?
	BEQL	20$				; yes
	SOBGTR	R1,10$				; try another
	BRW	PREXIT				; return previous input status

20$:	MOVL	R0,ERR(SP)			; save error status
	MOVL	FAB$L_STV(R8),STV(SP)		; save stv secondary code
	CLRL	FAB$L_STV(R8)			; zero to avoid confusion
	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	30$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,30$				; branch if illegal (no error)
	MOVL	NAM$L_FNB(R7),FNB(SP)		; save file name status
	MOVB	NAM$B_RSL(R7),RSL(SP)		; save result string
	MOVB	NAM$B_ESL(R7),ESL(SP)		;  and expanded string lens
30$:	TSTW	IFB$W_CHNL(R9)			; yes, was a channel assigned?
	BEQL	PRS				; no, continue
	BBCC	#IFB$V_ACCESSED,(R9),40$ 	; deaccess any open file or
	BSBW	RM$DEACCESS			; network links
40$:	$DASSGN_S	CHAN=IFB$W_CHNL(R9)	; deassign the channel
	CLRW	IFB$W_CHNL(R9)			; clear it

;
; Zero the fid and did in nam block for rm$setdid to work
;

PRS:	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	10$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,10$				; branch if illegal (no error)
	CLRB	NAM$T_DVI(R7)			; clear device name

	ASSUME	NAM$W_DID	EQ	NAM$W_FID+6

	CLRQ	NAM$W_FID(R7)			; zero fid and did fields
	CLRL	NAM$W_DID+2(R7)

;
; Zero expanded string length and resultant string length fields to avoid
; leaving these strings lying around from previous parses and consequently
; using the wrong filespec in an error message.
;
; Zero resultant string length and file name status fields to support network
; (simulated) open by nam block (see expand_name and setnam in rm0xpfn).
;
; Zero the wildcard context field to avoid the situation whereby the WCC 
; context of the current PARSE is OR'd in with the WCC context of the previous
; PARSE, but save the fact that the user requested context to be saved
; (if the user requested context to be saved), by setting IFB$V_SEARCH.
;

	CLRB	NAM$B_ESL(R7)			; preset expanded string null
	CLRB	NAM$B_RSL(R7)			; and result string too
	CLRL	NAM$L_FNB(R7)			; zero file name status bits
	BBC	#NAM$V_SVCTX,NAM$L_WCC(R7),5$	; if the user requested context to be
	SSB	#IFB$V_SEARCH,(R9)		;  saved, then set IFB$V_SEARCH 
5$:	CLRL	NAM$L_WCC(R7)			; clear NAM wildcard bits

;
; Parse the input file name and store the pattern in SWB and
; initialize the FWA which will contain the result directory specification
;

10$:	JSB	RM$XPFN				; expand the file spec.
	BLBS	R0,15$				; branch if ok
	TSTL	R0				; did we exaust search list?
	BNEQ	20$				; no, so other error
	BRW	RESTORE_ERROR			; restore old error and exit

;
; If the file is a PPF, retrieve its IFAB and move the device characteristics
; into the IFAB that has been allocated for this parse.
;

15$:	TSTB	FWA$B_ESCFLG(R10)		; if this file is not a PPF then
	BEQL	60$				;  go assign a channel otherwise
	BBS	#15,FWA$W_ESCIFI(R10),30$	; make sure the escape sequence
						;  is for a PPF IFI and if it
	RMSERR	LNE				;  is not, go return am error
20$:	BRW	PREXIT				;  invalid equivalence string

30$:	PUSHR	#^M<R9,R11>			; save IFAB and impure area addr
	MOVZBL	#PSL$C_EXEC,R7			; this a executive mode request - NOP
 	MOVZWL	FWA$W_ESCIFI(R10),R9		; move ifi into R9
	MOVL	#IMP$L_IFABTBL/4,R0		; ifab table offset/4

	BSBW	RM$GTIADR			; get ifab address
	BEQL	40$				; no IFAB returned?
	CMPB	#IFB$C_BID,IFB$B_BID(R9)	; is this a valid ifab
	BEQL	50$				; go move device characteristics

40$:	POPR	#^M<R9,R11>			; restore IFAB and impure addrs
	RMSERR	IFI				; return an error of 
	BRB	20$				; invalid equivalence string IFI

50$:	MOVL	R9,R0				; save PPF IFAB address in R0
	POPR	#^M<R9,R11>			; restore IFAB and impure area addrs
	MOVL	IFB$L_PRIM_DEV(R0),-		; move primary device characteristics
		IFB$L_PRIM_DEV(R9)		; into IFAB from PPF IFAB
	MOVL	IFB$L_AS_DEV(R0),-		; move secondary device characteristics
		IFB$L_AS_DEV(R9)		; into IFAB from PPF IFAB
	BRW	SUC				; go return device information

;
; If channel is already assigned (must have been called by $rename),
; then exit immediately without assigning channel or setdid
;

60$:	TSTW	IFB$W_CHNL(R9)			; any channel assigned?
	BNEQ	20$				; exit successfully if so
	BBS	#FWA$V_SYNTAX_CHK,-		; exit cleaning up if 
		(R10),20$			; syntax check only


;
; Assign a channel to the device
;

	BSBW	RM$ASSIGN			; assign channel to device
	BLBS	R0,65$				; continure if ok
	BRW	CHKLST				; branch if error

;
; For nondisk, foreign mounted, and spooled devices, set FWA$B_DIRLEN to 0, 
; clear all directory related bits in the NAM$L_FNB and the wild card summary 
; bit NAM$V_WILDCARD, if no wildcards remain. Leave the expanded-name 
; string alone. for SDI 
; devices initialize the FIB's DID to the MFD. if the file specification 
; contained node names, skip all of this and go immediately fill in the NAM.
;

65$:	BBS	#DEV$V_NET,-			; if a network operation, 
		IFB$L_PRIM_DEV(R9),95$		;  skip the directory stuff
	BBS	#DEV$V_RND,-			; go initialize SWB if device
		IFB$L_PRIM_DEV(R9),85$		; is a random (disk) device
70$:	CLRB	FWA$B_DIRLEN(R10)		; init the number of dirs to 0
	CSB	#FWA$V_DIR,(R10)		; clear directory specification 
	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	80$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,80$				; branch if illegal (no error)
	BICL2	#NAM$M_GRP_MBR!-		; clear group-member dir bit
		NAM$M_WILD_DIR!-		;  wild dir summary bit
		NAM$M_DIR_LVLS!-		;  set directory sublevels to 0
		^XFF000000,-			;  and clear all wild directory
		NAM$L_FNB(R7)			;  bits
	BITL	#NAM$M_WILD_NAME!-		; if either the file name
		NAM$M_WILD_TYPE!-		;  or the file type
		NAM$M_WILD_VER,-		;  or the file version number
		NAM$L_FNB(R7)			;  is wild
	BNEQ	80$				;  keep the wildcard summary bit
	CSB	#NAM$V_WILDCARD,-		; otherwise, clear it
		NAM$L_FNB(R7)			;  whether it was set or not
80$:	BBS	#DEV$V_FOR,-			; if device is foreign mounted
		IFB$L_PRIM_DEV(R9),95$		;  then go fill in the NAM block
	BBC	#DEV$V_SDI,-			; if not on a mag tape then
		IFB$L_PRIM_DEV(R9),95$		;  fill in the NAM block, otherwise,
	MOVL	#<FID$C_MFD@16>+FID$C_MFD,-	; initialize the FIB's DID to
		FIB$W_DID_NUM+FWA$T_FIBBUF(R10)	;  the mag tape's MFD
	CLRW	FIB$W_DID_RVN+FWA$T_FIBBUF(R10)
	BRB	90$				; and go clear the FIB's FID


;
; Initialize the swb to process the directory pattern.
;

85$:	BBS	#DEV$V_FOR,-			; if device is foreign then
		IFB$L_PRIM_DEV(R9),SUC		;  don't do directory lookup
	BBS	#DEV$V_SPL,IFB$L_AS_DEV(R9),70$	; spooled devices not treated
						;  the same as disk devices
	BBC	#FWA$V_DIR,(R10),SUC		; skip if no dir in spec
	JSB	RM$INIT_SWB			; initialize swb context
	BLBC	R0,PREXIT			; give up on errors

;
; Note: RM$NEXTDIR clobbers R8
;

	JSB	RM$NEXTDIR			; get DID of first directory
	MOVL	IFB$L_LAST_FAB(R9),R8		; restore fab address
	BLBC	R0,100$				; go handle any errors otherwise
90$:	CLRL	FWA$T_FIBBUF+FIB$L_WCC(R10)	; start at first file in directory
						;  by clear FIB's FID
95$:	BRB	SUC				; go fill in the NAM block

;
; There was some sort of directory error
;

100$:	CMPW	R0,#RMS$_NMF&^XFFFF		; any directory found at all?
	BNEQ	CHKLST				; branch if some other error
	RMSERR	DNF				; set directory not found
	MOVZWL	#SS$_NOSUCHFILE,FAB$L_STV(R8)	; set stv secondary code

;
; There was some error other then a file specification error, so check to
; see if there is a search list, if so try the parse again
;

CHKLST:	BBC	#FWA$V_SLPRESENT,(R10),PREXIT	; no search list, exit
	SSB	#FWA$V_SL_PASS,(R10)		; flag this as search list pass
	BRW	LOOP				; go try again	

;
; We have successfully parsed a name, assigned a channel and/or found
; a directory
;

SUC:	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	10$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,10$				; branch if illegal (no error)
	BBS	#FWA$V_NODE,(R10),10$		; skip dvi, did if node found
	BSBW	RM$WRITE_DVI			; write DVI into NAM block

	ASSUME	NAM$L_WCC	EQ	NAM$W_DID+6

	MOVQ	FWA$T_FIBBUF+FIB$W_DID(R10),-	; copy did and top word of wcc
		NAM$W_DID(R7)			;  for fun 

10$:	RMSSUC
PREXIT:	ADDL2	#STACK_SIZE,SP			; readjust stack
	RSB

;
; XPFN exited with RMS$_NOMLIST, no more search list to parse, so restore
; the original error code and name block string lengths
;

RESTORE_ERROR:
	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	20$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,20$				; branch if illegal (no error)

	ASSUME	ESL	EQ	0
	ASSUME	RSL	EQ	ESL+1
	ASSUME	FNB	EQ	RSL+1
	ASSUME	STV	EQ	FNB+4
	ASSUME	ERR	EQ	STV+4

10$:	MOVB	ESL(SP),NAM$B_ESL(R7)		; restore expanded string
	MOVB	RSL(SP),NAM$B_RSL(R7)		;  and result string
	MOVL	FNB(SP),NAM$L_FNB(R7)		; restore file name flags
20$:	ADDL2	#STV,SP				; restore stack past NAM fields
	MOVL	(SP)+,FAB$L_STV(R8)		; set stv secondary code
	MOVL	(SP)+,R0			; restore error status
	RSB					; exit	

	.END
