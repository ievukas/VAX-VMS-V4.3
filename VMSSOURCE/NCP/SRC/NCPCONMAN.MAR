	.TITLE	NCPCONMAN - Console Carrier Requester Network Management
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: REMOTE CONSOLE CARRIER (NI)
;
; ABSTRACT:
;
;	THIS PROGRAM RUNS ON A LOCAL NODE TO ALLOW A TERMINAL TO APPEAR TO
;	BE LOCALLY CONNECTED TO A REMOTE CONSOLE.
;
;
; ENVIRONMENT: VMS - USER MODE
;		
;
; AUTHOR: Scott G. Davis, 25-Mar-1983
;
; MODIFIED BY:
;
;
;**
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; DEFAULT ADDRESSING MODE
;
	.DEFAULT DISPLACEMENT WORD
;
; INCLUDE FILES:
;
	$NFBDEF		; Network function block definitions
	$NMADEF		; Network management definitions
;
; MACROS:
;
	.MACRO	ONERROR ACTION,?L
	BLBS	R0,L
	ACTION
	L:
	.ENDM	ONERROR
;
; EQUATED SYMBOLS:
;
LF	=	10
CR	=	13

; ***NOTE  References to PDBs assume they are of the form:
;
;	.BYTE	presence-flag
;	.BLKB	n	 - data
;

;
; OWN STORAGE:
;
	.PSECT	CONCAR$PURE,NOWRT,NOEXE
	.SBTTL	READ ONLY DATA

NOT_NI_MSG:	.LONG	20$-10$		; Error message
		.LONG	10$
10$:	.ASCII	<LF>/Operation valid only on Ethernet/<CR><LF>
20$:

NET_DESC:	.ASCID	/_NET0:/

	.PAGE
	.SBTTL	READ/WRITE DATA
	.PSECT	CONCAR$IMPURE,NOEXE,WRT,LONG

IOSB:	.BLKQ	1			; I/O status block

CIRC_DESC:	.BLKQ	1		; Descriptor to pass to $ASSIGN
NICE_MSG_END:	.BLKL	1		; Pointer to end of message

NETCHAN:	.BLKW	1		; Network I/O channel
	.PAGE
	.PSECT	CONCAR$CODE,NOWRT
;++
;
; CON$PARSE_NICE
;
; This routine takes a parameter ID, locates it in a NICE message, and
; parses the data associated with the parameter.
;
; CALLING SEQUENCE:
;
;	CALLS	#4,CON$PARSE_NICE
;
; INPUT PARAMETERS:
;
;	R1,R2	- Message descriptor
;	4(AP)	- Parameter type to match
;	8(AP)	- Address to store data, if parameters match
;
; IMPLICIT INPUTS:
;
;	NICE response message for a NODE, of the form:
;
;		.BYTE	1
;		.WORD	error detail
;		.BYTE	NMA$C_ENT_NOD
;		.WORD	node address
;		.ASCIC	node name
;		.REPT	N
;		.WORD	PARAM_ID (DATA ID from network management spec)
;		.WORD	PARAM_TYPE (DATA TYPE from network management spec)
;		data
;		.ENDR
;
; OUTPUT PARAMETERS:
;
;	R0 - 0==> parameter not found, 1==>parameter found
;
; IMPLICIT OUTPUTS:
;
;	If parameter is in message, it is stored at the address provided,
; in the format that is appropriate, e.g. counted ASCII string.
;
; COMPLETION CODES:
;
; SIDE EFFECTS:
;
;	None
;
;--

CON$PARSE_NICE::	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CLRL	R0			; Assume parameter is not found
	ADDL3	R1,R2,NICE_MSG_END	; Store pointer to end of message
	ADDL2	#3,R2			; Skip response code and error detail

	ASSUME	NMA$C_ENT_NOD	EQ 0

	TSTB	(R2)+			; Check for node entity
	BNEQ	100$			; If NEQ bogus msg
	MOVW	(R2)+,CON$W_ADDR_DNA	; Store the address
	MOVAB	CON$T_SHOW_NODE,R6	; Point to name
	MOVZBL	(R2)+,R3		; Get length of node name
	MOVB	R3,(R6)+		; Store name length
	PUSHL	R1			; Save original message lth
	MOVC3	R3,(R2),(R6)		; Store name
	MOVL	R1,R2			; Reset message pointer
	POPL	R1			; Restore message length
;
; Main parsing loop
;
20$:	CMPL	R2,NICE_MSG_END		; At end of message?
	BGEQU	100$			; If GEQU yes - param not found
	CLRL	R11			; Don't store unless there is a match
	CMPW	(R2)+,4(AP)		; Is this the param?
	BNEQ	30$			; If NEQ no - just skip over
	MOVL	8(AP),R11		; Need to store param - get its address
30$:	CALLS	#0,DECODE_TYPE		; Decode the parameter
	TSTL	R11			; Was data stored?
	BEQL	20$			; If EQL no - keep looking
	MOVL	#1,R0			; Parameter found
100$:	RET				; Done
	.PAGE
;++
;
; DECODE_TYPE - decode NICE message data type, possibly storing data
;
; This routine may be called recursively, for coded-mltiples
;
; CALLING SEQUENCE
;
;	CALLS	#0,DECODE_TYPE
; INPUTS:
;
;	R2 - points to param type in message
;	R11 - points to data storage area; 0==>just skip message field
;
; OUTPUTS:
;
;	Data may be stored
;
;--

DECODE_TYPE:	.WORD	^M<R9,R10>
	MOVZBL	(R2)+,R10		; Get the param type
	MOVL	R10,R9			; Make a copy
	BICB	#^C<NMA$M_PTY_CLE>,R10	; Get no. of fields or bytes
	BBC	#NMA$V_PTY_COD,R9,100$	; If BC not encoded
	BBC	#NMA$V_PTY_MUL,R9,175$	; If BC not coded-multiple
	PUSHL	R10			; Save recursion count
10$:	CALLS	#0,DECODE_TYPE		; Make recursive call
	SOBGTR	(SP),10$		; Loop
	BRB	200$			; Common exit
;
; Type is not coded
;
100$:	BBS	#NMA$V_PTY_ASC,R9,150$	; If BS Image ASCII data
	BICB	#^C<NMA$M_PTY_NLE>,R10	; Get no. of characters of data
	BNEQ	175$			; If NEQ not image hex
150$:	MOVZBL	(R2)+,R10		; Get lth of image data
	TSTL	R11			; Storing?
	BEQL	180$			; If EQL no
	MOVB	R10,(R11)+		; Store lth of string
	BRB	190$			; Go to common code

;
; Type is coded, but not multiple
;
175$:	TSTL	R11			; Storing?
	BNEQ	190$			; If NEQ yes
180$:	ADDL2	R10,R2			; Update message pointer
	BRB	200$			; Done
190$:	MOVB	(R2)+,(R11)+		; Store a byte
	SOBGTR	R10,190$		; Loop
	
200$:	RET				; Done
	.PAGE
;++
;
; CON$GET_SLI - translate service circuit into VMS device name
;
; INPUTS:
;
;	Circuit name in .ASCIC in PDB$G_CON_SLI
;
;--

CON$GET_SLI::
	$ASSIGN_S DEVNAM = NET_DESC, CHAN = NETCHAN
	ONERROR	RET			; If error done

	MOVAB	CON$NFB,R6		; Get address of NFB
	MOVB	#NFB$C_FC_SHOW,-	; This is a show function
		NFB$B_FCT(R6)
	MOVB	#NFB$C_DB_CRI,-		; Circuit database
		NFB$B_DATABASE(R6)
	MOVB	#NFB$C_OP_EQL,-		; Match criterion
		NFB$B_OPER(R6)
	MOVL	#NFB$C_CRI_NAM,-	; Match on circuit name
		NFB$L_SRCH_KEY(R6)
	MOVL	#NFB$C_CRI_TYP,-	; I want the device type back
		NFB$L_FLDID(R6)
	MOVL	#NFB$C_CRI_VMSNAM,-	; I want the VMS device name back
		NFB$L_FLDID+4(R6)
	MOVAB	PDB$G_CON_SLI+1,R0 	; Point to circuit name
	MOVAB	CON$P2BUF+4,R3		; Point to search key storage
	MOVZBW	(R0)+,(R3)+		; Store length of name
	MOVC3	-2(R3),(R0),(R3)	; Store the name
	$QIOW_S	FUNC=#IO$_ACPCONTROL,-	; Issue the control function
		CHAN=NETCHAN,-
		IOSB=IOSB,-
		P1=CON$NFB_DESC,-
		P2=#CON$P2BUF_DESC,-
		P4=#CON$P4BUF_DESC
	ONERROR	RET

	MOVL	IOSB,R0			; Get IOSB
	CMPW	R0,#SS$_ENDOFFILE	; Legitimate device?
	BNEQ	5$			; If NEQ maybe
	MOVW	#SS$_NOSUCHDEV,R0	; Return this error
5$:	ONERROR	RET			; If error, so long

	MOVAB	CON$P4BUF,R0		; Get address of response buffer
	CMPL	(R0)+,#NMA$C_CIRTY_NI	; Is this an Ethernet circuit?
	BEQL	10$			; If EQL yes
	MOVL	NOT_NI_MSG+4,R3		; Address of message
	MOVL	NOT_NI_MSG,R2		; Length of message
	BSBW	NCP$TTY_WRITE		; Output the message
	RET				; That is all!

10$:	MOVAB	CIRC_DESC,R1		; Point to descriptor area
	MOVZWL	(R0)+,(R1)+		; Get the length of the name
	MOVL	R0,(R1)			; Get its address
	MOVAL	-(R1),CON$XE_DESCADDR	; Move to desc addr to common place
100$:	RSB				; Done	
	
	.END
