	.TITLE	RMSRECREL - relative file recovery
	.IDENT	/V04-000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

	.PSECT	REC_CODE,EXE,NOWRT,PIC
;
;++
; Facility: RMS32 Recovery
;
; Abstract:
;
;		This routine is merged into the Recovery Control Process to
;		serve as the RMS recovery agent.  This routine contains the
;		code to recover relative file operations.
;
; Environment:
;
;		Star processor running Starlet exec.  This routine is to be
;		merged into the RCP (Recovery Control Process) to handle
;		RMS Recovery operations.  This routine never executes outside
;		the context of the RCP.
;
;		This routine must be PIC since it will be merged into the
;		address space of the RCP.
;
; Author: 	Peter Lieberwirth	 Creation Date: 16-Jun-1982
;
; Modified By:
;
;	V01-006	KPL0009		Peter Lieberwirth	18-Jan-1983
;		Fix bug with rolling back PUTs.  Start cleaning up
;		error code.
;
;	V01-005	KPL0005		Peter Lieberwirth	 8-Jan-1983
;		Do PUTs, FINDs by KEY.  Clean up CONNECT.
;
;	V01-004	KPL0004		Peter Lieberwirth	29-Dec-1982
;		Add RU recovery support.
;
;	V01-003	KPL0003		Peter Lieberwirth	23-Nov-1982
;		Separate OPEN from CONNECT, synchronize record operations
;		after all (not time to call back to wait yet).
;
;	V01-002	KPL0002		Peter Lieberwirth	18-Nov-1982
;		Add $CJFDEF to define RCP codes.
;
;	V01-001	KPL0001		Peter Lieberwirth	16-Nov-1982
;		Fix IDENT, wait asynchronously in RCP for completion of
;		RMS operation.  Fix register usage in open routine.
;--

.SUBTITLE Declarations

;++
;	See RMSRECOVR.MAR for a description of the register use in
;	these routines.
;--

;
; Include Files
;

;
; Macros
;

	$CJFDEF		; RCP arguement codes
	$RRPDEF
	$RJRDEF		; RMS journal entry format
	$RIMPDEF	; RMS recovery impure storage definition
	$RMSRDEF	; RMS operations
	$FABDEF
	$RABDEF
	$RFBDEF
	$RRBDEF
	$TMPOFFDEF	; offsets into AP for CALL
;
; local constants - for time being
;

RMS$_UNSUPPORTED=0

.SUBTITLE RM$RR_REL	- Recover relative files
;++
; 
; routine name: RM$RR_REL
;
;	This rouine receives a journal entry from the RCP and branches off
;	to the routine designed to process this particular RMS operation.
;
;	Operations supported in this module:
;
;		close
;		create
;		delete
;		put
;		truncate
;		update - handled in put code
;		write
;
;	Other operations are either handled in other modules, such as file
;	operations that are handled by RMSRECFIL, or are unnecesary to
;	support.
;
; Calling sequence:
;
;	
;
; Input parameters:
;
;	r11	- points to impure storage
;	r10	- points to RRP
;	r9	- current RMS journal entry
;
; Output parameters:
;
;
;
;
; Side effects:
;
;	Registers for the processing routines are set up.
;
;--

RM$RR_REL::				;

;
; dispatch to routine to process particular entry
;
	$CASE	RJR$B_OP(R9),TYPE=B,-	; dispatch to action routine
		DISPL=< RR$REL_BADCODE,-; bad code value
			RR$REL_CLOSE,-	; close
			RR$REL_CONN,-	; connect
			RR$REL_CREAT,-	; create
			RR$REL_DELET,-	; delete
			RR$REL_DISC,-	; disconnect
			RR$REL_DISPL,-	; display
			RR$REL_ENTER,-	; enter
			RR$REL_ERASE,-	; erase
			RR$REL_EXTEN,-	; extend
			RR$REL_FREE,-	; free
			RR$REL_FIND,-	; find
			RR$REL_GET,-	; get
			RR$REL_MODFY,-	; modify
			RR$REL_OPEN,-	; open
			RR$REL_PARSE,-	; parse
			RR$REL_PUT,-	; put
			RR$REL_READ,-	; read
			RR$REL_RELEAS,-	; release
			RR$REL_RENAM,-	; rename
			RR$REL_REWIN,-	; rewind
			RR$REL_SPACE,-	; space
			RR$REL_SRCH,-	; search
			RR$REL_TRUNC,-	; truncate
			RR$REL_UPDAT,-	; update
			RR$REL_WAIT,-	; wait
			RR$REL_WRITE>	; write

	MOVL	#RCP$_NORMAL,R0		; ignore undefineds
	RET

.SUBTITLE -	RR$REL_CLOSE	- Process $CLOSE
;++
; 
; routine name:	
;
;
;
; Calling sequence:
;
;	
;
; Input parameters:
;
;
;
;
;
; Output parameters:
;
;
;
;
; Side effects:
;
;--

RR$REL_CLOSE:

	MOVL	#RCP$_NORMAL,R0
	RET

.SUBTITLE -	RR$REL_CREAT	- Process $CREATE
;++
; 
; routine name:	
;
;
;
; Calling sequence:
;
;	
;
; Input parameters:
;
;
;
;
;
; Output parameters:
;
;
;
;
; Side effects:
;
;--

RR$REL_CREAT:

	MOVL	#RMS$_UNSUPPORTED,R0
	RET

.SUBTITLE -	RR$REL_DELET	- Process $DELETE
;++
; 
; routine name:	RR$REL_DELET
;
;	This routine recovers a relative delete operation.  Rolling forward a
;	relative delete is accomplished by re-doing a delete here.  Rolling
;	back a delete is accomplished by doing an update in COMPUTUPD.
;
;	This routine also rolls back a $PUT.
;
; Calling sequence:
;
;	JMP	RR$REL_DELETE
;
; Input parameters:
;
;	RMS journaling entry in R9
;	RRP in R10
;	RAB in R6
;
; Output parameters:
;
;	R0 has status of recovery operation.
;
; Side effects:
;
;	Operation described in journal entry is recovered.
;--

RR$REL_DELET:

	BBC	#RRP$V_BACK,-		; rolling back a delete is
		RRP$W_FLAGS(R10),5$	; handled by common update code
	BRW	RR$COMPUTUPD		;
5$:					;
RR$COMDEL:				; common AI and BI delete

	MOVL	RJR$L_RRN(R9),-		; set up RRN for delete
		@RAB$L_KBF(R6)		;
	$FIND	RAB = (R6)		; find the record
	BLBC	R0,10$			; report error

;	$FIND	RAB = (R6),-		; find the record
;		SUC = @RCPARG$_ASTADR(AP),-
;		ERR = @RCPARG$_ASTADR(AP)
;	BLBC	R0,10$			; go report error
;	BSBW	ASYNCH_WAIT		; wait for operation
;	BLBC	RAB$L_STS(R6),10$	; error on operation

	$DELETE	RAB = (R6)		; delete the record
	BLBC	R0,10$			; report error

;	$DELETE RAB = (R6),-		; and delete it
;		SUC = @RCPARG$_ASTADR(AP),-
;		ERR = @RCPARG$_ASTADR(AP)
;	BLBC	R0,10$			; go report error
;	BSBW	ASYNCH_WAIT		; wait for operation
;	BLBC	RAB$L_STS(R6),10$	; error on operation

	MOVL	#RCP$_NORMAL,R0		;
	RET
10$:					; ERROR
;	LOG	<ERROR RECOVERING RECORD, STS = !XL, STV = !XL>,RAB$L_STS(R6),RAB$L_STV(R6)
	MOVL	#RCP$_NOTALLJEN,R0	;
	RET

.SUBTITLE -	RR$REL_CONN	- Connect a stream
;++
; routine name: RR$REL_CONN
;
;	This routine connects a stream to the recoverable file.
;
; inputs:
;	r8 - RFB
;	r7 - fab address
;	r6 - rab address
;
; outputs:
;	None.
;
; side effects:
;	stream is connected
;--

RR$REL_CONN::

; connect a stream
;
	MOVB	#RAB$C_KEY,RAB$B_RAC(R6); KEY record access
	SSB	#RAB$V_UIF,RAB$L_ROP(R6); set update if (put turns into update)
	MOVAL	RFB$T_KEY_BUFF(R8),-	; set up key buffer address
		RAB$L_KBF(R6)		;
	MOVB	#4,RAB$B_KSZ(R6)	; and key size

	BBC	#RRB$V_RUJNL,-		; branch if not RU recovery
		RRB$W_FLAGS(R11),5$	;
	SSB	#RAB$V_ULK,RAB$L_ROP(R6); set manual unlocking

5$:	$CONNECT RAB = (R6)		; connect a stream
	BLBC	R0,30$			; get out on error

;	$CONNECT RAB= (R6),-		; connect a stream
;		SUC = @RCPARG$_ASTADR(AP),-
;		ERR = @RCPARG$_ASTADR(AP)
;	BLBC	R0,30$			; get out on error
;	BSBW	ASYNCH_WAIT		; wait on this operation
;	BLBC	RAB$L_STS(R6),30$	; get out on this error also
					;
	SSB	#RFB$V_CONNECTED,-	; indicate that the stream has been
		RFB$W_FLAGS(R8)		; connected
	MOVL	#1,R0			; success
	RSB				; to caller

; error occured during connect
;
30$:
;	LOG <ERROR CONNECTING STREAM, STS = !XL, STV = !XL>,RAB$L_STS(R6),RAB$L_STV(R6)
40$:	DUMPJNL
	CLRL	R0			; *** INDICATE ERROR ***
	RSB

.SUBTITLE -	RR$REL_OPEN	- Open the file
;++
;
; routine name: RR$REL_OPEN
;
;	This routine does not open the relative file to which the journal
;	records are to be applied.
;
; calling sequence:
;
;	brw	rr$rel_open
;
; input parameters:
;
; output parameters:
;
; side effects:
;
;--

RR$REL_OPEN::
RR$REL_OPEN1::
	MOVL	#RCP$_NORMAL,R0
	RET


.SUBTITLE -	RR$REL_PUT	- Process $PUT
;++
; 
; routine name:	RR$REL_PUT
;
;	This routine recovers a relative PUT operation.  It also contains the
;	common code to:
;			1. roll forward a $UPDATE
;			2. roll backward a $UPDATE
;			3. roll forward a $PUT
;			4. roll backward a $DELETE
;
; Calling sequence:
;
;	JMP	RR$REL_PUT
;
; Input parameters:
;
;
;	The usual - RCP data context and RMS journal record.
;
;	r7 - fab
;	r6 - rab
;
; Output parameters:
;
;	R0 has completion status.
;
;
; Side effects:
;
;	Operation is recovered.
;--

RR$REL_PUT:

	BBC	#RRP$V_BACK,-		; roll back a PUT with a delete
		RRP$W_FLAGS(R10),-	;
		RR$COMPUTUPD		;

	BRW	RR$COMDEL		;

RR$COMPUTUPD:

	ASSUME	FAB$C_FIX EQ 1
	ASSUME	FAB$C_VAR EQ 2
	ASSUME	FAB$C_VFC EQ 3

	MOVL	R9,R5			; copy pointer to RMS journal entry
	ADDL2	#RJR$T_RIMAGE,R5	; point to record image within entry
	INCL	R5			; point past deletion control byte
					;
	$CASE	FAB$B_RFM(R7),TYPE=B,-	;
		DISPL=< 10$,-		; undefined
			20$,-		; FIXed record format
			30$,-		; VARiable record format
			40$ >		; VFC record format
10$:	BRW	80$			; what a bummer

; This next line breaks if the relative journaling code ever optimizes writes to
; the journal such that the entire cell is not copied into the journal entry.
;
20$:	MOVW	FAB$W_MRS(R7),-		; record size from maximum record size
		RAB$W_RSZ(R6)		;
	BRW	50$			; go join common code

30$:					; VAR record format
	MOVW	(R5)+,RAB$W_RSZ(R6)	; get record size
	BRW	50$			; go join common code
	
40$:					; VFC
	MOVW	(R5)+,RAB$W_RSZ(R6)	; get record size
	MOVZBL	FAB$B_FSZ(R7),R2	; get fixed header size
	SUBW2	R2,RAB$W_RSZ(R6)	; calculate actual record size
	MOVL	R5,RAB$L_RHB(R6)	; set up record header buffer address
	ADDL2	R2,R5			; point past fixed header

50$:	MOVL	R5,RAB$L_RBF(R6)	; point record buffer at journal entry
	MOVL	RJR$L_RRN(R9),-		; set up KEY
		@RAB$L_KBF(R6)		;

	$PUT	RAB = (R6)		; recover the record
	BLBC	R0,60$			; get out on error

;	$PUT	RAB = (R6),-		; and update it
;		SUC = @RCPARG$_ASTADR(R6),-
;		ERR = @RCPARG$_ASTADR(R6)
;	BLBC	R0,60$			; go report error
;	BSBW	ASYNCH_WAIT		; go wait in RCP
;	BLBC	RAB$L_STS(R6),60$	; handle error on operation

	MOVL	#RCP$_NORMAL,R0		;
	RET				;
;
; handle error
;
60$:
;	LOG <ERROR RECOVERING RECORD, STS = !XL, STV = !XL>,RAB$L_STS(R6),RAB$L_STV(R6)
70$:	MOVL	#RCP$_NOTALLJEN,R0	;
	RET

80$:	MOVZBL	FAB$B_RFM(R7),R3	; get invalid RFM
;	LOG <INVALID FAB RFM, RFM = !ZL>,R3
	BRB	70$			; join common code

.SUBTITLE -	RR$REL_TRUNC	- Process $TRUNCATE
;++
; 
; routine name:	
;
;
;
; Calling sequence:
;
;	
;
; Input parameters:
;
;
;
;
;
; Output parameters:
;
;
;
;
; Side effects:
;
;--

RR$REL_TRUNC:
		MOVL	#RMS$_UNSUPPORTED,R0
		RET

.SUBTITLE -	RR$REL_UPDAT	- Process $UPDATE
;++
; 
; routine name:	
;
;	This routine is called to recover a relative $update.  The actual
;	roll forward or backward recovery is handled by the common recovery
;	code in RR$COMPUTUPD.
;
; Calling sequence:
;
;	brw	rr$rel_updat
;
; Input parameters:
;
;	See rr$rel_put
;
; Output parameters:
;
;	None.
;
; Side effects:
;
;--

RR$REL_UPDAT:

	BRW	RR$COMPUTUPD

.SUBTITLE -	RR$REL_WRITE	- Process $WRITE
;++
; 
; routine name:	
;
;
;
; Calling sequence:
;
;	
;
; Input parameters:
;
;
;
;
;
; Output parameters:
;
;
;
;
; Side effects:
;
;--

RR$REL_WRITE:
		MOVL	#RMS$_UNSUPPORTED,R0
		RET

.SUBTITLE	
.SUBTITLE Unsupported Operations for relative files
.SUBTITLE	

;++
; 
; routine name:	All the unsupported operations.
;
;--

.SUBTITLE -	RR$REL_DISC	- $DISCONNECT
.SUBTITLE -	RR$REL_DISPL	- $DISPLAY
.SUBTITLE -	RR$REL_FIND	- $FIND
.SUBTITLE -	RR$REL_FREE	- $FREE
.SUBTITLE -	RR$REL_GET	- $GET
.SUBTITLE -	RR$REL_MODFY	- $MODIFY
.SUBTITLE -	RR$REL_PARSE	- $PARSE
.SUBTITLE -	RR$REL_READ	- $READ
.SUBTITLE -	RR$REL_RELEAS	- $RELEASE
.SUBTITLE -	RR$REL_REWIN	- $REWIND
.SUBTITLE -	RR$REL_SPACE	- $SPACE
.SUBTITLE -	RR$REL_SRCH	- $SEARCH
.SUBTITLE -	RR$REL_WAIT	- $WAIT

.SUBTITLE -	RR$REL_ENTER	- $ENTER
.SUBTITLE -	RR$REL_ERASE	- $ERASE
.SUBTITLE -	RR$REL_EXTEN	- $EXTEND
.SUBTITLE -	RR$REL_RENAM	- $RENAME
.SUBTITLE -	RR$REL_BADCODE	- bad input

RR$REL_ENTER:
RR$REL_ERASE:
RR$REL_EXTEN:
RR$REL_RENAM:


RR$REL_DISC:
RR$REL_DISPL:
RR$REL_FIND:
RR$REL_FREE:
RR$REL_GET:
RR$REL_MODFY:
RR$REL_PARSE:
RR$REL_READ:
RR$REL_RELEAS:
RR$REL_REWIN:
RR$REL_SPACE:
RR$REL_SRCH:
RR$REL_WAIT: 
RR$REL_BADCODE:
	MOVL	#RMS$_UNSUPPORTED,R0
	RET

	.END	
