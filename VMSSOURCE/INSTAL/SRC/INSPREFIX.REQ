!
!	Require file for INSTALL
!
! Version:	'V04-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!+++
!
!   FACILITY: Install
!
!   ABSTRACT: The INSTALL utility makes image files known to the VMS
!	      operating system
!
!   ENVIRONMENT: VAX native, user and kernel mode
!
!   AUTHOR: Bob Grosso
!
!   CREATION DATE: June 1981
!
!   MODIFIED BY:
!
!	V03-004	BLS0256		Benn Schreiber		27-Dec-1983
!		Clean up pass.
!
!	V03-003	RPG0003		Bob Grosso		06-Sep-1983
!		Add macro to set IPL.
!
!	V03-002	RPG0002		Bob Grosso		21-Jun-1983
!		Add lock status block offset macros.
!
!	V02-001	RPG0001		Bob Grosso		28-Dec-1981
!		Use shared message openin.
!
!---

!
! Define VMS block structures
!
STRUCTURE
	BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK + O) <P, S, E>;
!
! Useful macros
!
MACRO
!
! Macro to generate a pointer to a counted string
!
    CSTRING (STRING) = UPLIT BYTE (%CHARCOUNT (STRING), STRING)%,
!
! Macro to execute a given sequence of commands and return if any error
!
    execute (command, errorcode) =
	BEGIN
	LOCAL
	    status;
	status = command;
	IF NOT .status			! if an error is detected
	THEN
	    %IF %LENGTH GTR 1		! If errorcode argument is present
	    %THEN SIGNAL (errorcode, %REMAINING, .status);
	    %ELSE RETURN .status;	! Return with error status
	    %FI
	END%,
!
! Macro to execute a given sequence of commands and signal if any error
!
    report (command) =
	BEGIN
	LOCAL
	    status;
	status = command;
	IF NOT .status			! if an error is detected
	THEN
	    SIGNAL (.status);
	END%;

!
! Set processor IPL
!					Andy Goldstein
MACRO
	SET_IPL (LEVEL) =
		BEGIN
		BUILTIN MTPR;
		MTPR (%REF (LEVEL), PR$_IPL)
		END
		%;

LITERAL
    TRUE	=	1,		! Boolean TRUE
    FALSE	=	0;		! Boolean FALSE


LITERAL
    INS$C_GBLNAMLEN = 39 + 4;		! Length of global section name plus suffix "_nnn"

MACRO
    LK$W_STATUS =  0, 0,16, 0%,
    LK$W_SPARE  =  0,16,16, 0%,
    LK$L_LOCKID =  0,32,32, 0%;

MACRO
	DYN_DESC_DECL =
		BLOCK[8,BYTE] PRESET ([DSC$B_CLASS] = DSC$K_CLASS_D,
					[DSC$B_DTYPE] = DSC$K_DTYPE_T)%;
MACRO
	INIT_DDESC(D) =				! Init dynamic string descriptor
		BEGIN
		D[DSC$W_LENGTH] = 0;
		D[DSC$B_CLASS] = DSC$K_CLASS_D;
		D[DSC$B_DTYPE] = DSC$K_DTYPE_T;
		D[DSC$A_POINTER] = 0;
		END%,
	INIT_SDESC(D) =				!Init static string descriptor
		BEGIN
		D[DSC$W_LENGTH] = 0;
		D[DSC$B_CLASS] = 0;
		D[DSC$B_DTYPE] = 0;
		D[DSC$A_POINTER] = 0;
		END%;

