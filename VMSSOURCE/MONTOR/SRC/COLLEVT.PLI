COLLECTION_EVENT: Procedure	Options(Ident('V04-000'));

/*
/****************************************************************************
/*									    *
/*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
/*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
/*  ALL RIGHTS RESERVED.						    *
/* 									    *
/*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
/*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
/*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
/*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
/*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
/*  TRANSFERRED.							    *
/* 									    *
/*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
/*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
/*  CORPORATION.							    *
/* 									    *
/*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
/*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
/* 									    *
/*									    *
/****************************************************************************
/*/

/*
/*++
/* FACILITY:  MONITOR Utility 
/*
/* ABSTRACT:  COLLECTION_EVENT AST Routine.
/*		
/*		 Queued from the EXECUTE_REQUEST routine each time a
/*		   data collection is required.
/*
/*
/* ENVIRONMENT:
/*
/*	VAX/VMS operating system. unprivileged user mode,
/*		except for certain collection routines which
/*		run in EXEC or KERNEL mode to access system
/*		data bases.
/*
/* AUTHOR:  Thomas L. Cafarella, April, 1981
/*

/*
/* MODIFIED BY:
/*
/*	V03-015	TLC1085		Thomas L. Cafarella	22-Jul-1984	14:00
/*		Calculate scale values for Free and Modified List bar graphs.
/*
/*	V03-014	TLC1082		Thomas L. Cafarella	23-Jul-1984	11:00
/*		Force error message when playing back a file containing
/*			only one collection.
/*
/*	V03-013	TLC1072		Thomas L. Cafarella	17-Apr-1984	11:00
/*		Add volume name to DISK display.
/*
/*	V03-012	TLC1066		Thomas L. Cafarella	01-Apr-1984	11:00
/*		Add SYSTEM class.
/*
/*	V03-011	TLC1061		Thomas L. Cafarella	18-Mar-1984	11:00
/*		Identify dual-path disks by allocation class.
/*
/*	V03-011	TLC1058		Thomas L. Cafarella	23-Mar-1984	10:00
/*		Fix MODES class when 782 and non-782 input
/*		files mixed in multi-file summary.
/*
/*	V03-010	TLC1051		Thomas L. Cafarella	11-Jan-1984	11:00
/*		Add consecutive number to class header record.
/*
/*	V03-010	PRS1002		Paul R. Senn		29-Dec-1983	16:00
/*		GLOBALDEF VALUE symbols must now be longwords; 
/*		Use %REPLACE rather than GLOBALDEF VALUE for any equated
/*		symbols which are not 4 bytes in length; 
/*
/*	V03-009	TLC1050		Thomas L. Cafarella	06-Dec-1983	11:00
/*		Change directory information in DLOCK class.
/*
/*	V03-008	TLC1046		Thomas L. Cafarella	26-Aug-1983	18:00
/*		Force flush to occur after all classes written to file.
/*
/*	V03-007	TLC1040		Thomas L. Cafarella	15-Jun-1983	10:00
/*		Add directory node indicator to DLOCK class.
/*
/*	V03-006	TLC1035		Thomas L. Cafarella	06-Jun-1983	15:00
/*		Add homogeneous class type and DISK class.
/*
/*	V03-005	TLC1029		Thomas L. Cafarella	21-Apr-1983	10:00
/*		Correctly calculate "Interrupt Stack" string.
/*
/*	V03-004	TLC1028		Thomas L. Cafarella	14-Apr-1983	16:00
/*		Add interactive user interface.
/*
/*	V03-001	TLC0014		Thomas L. Cafarella	01-Apr-1982	13:00
/*		Correct attached processor time reporting for MODES.
/*
/*	V03-003	TLC1011		Thomas L. Cafarella	29-Mar-1982	20:00
/*		Move system service names for SSERROR msg to static storage.
/*
/*	V03-002	TLC1003		Thomas L. Cafarella	23-Mar-1982	13:00
/*		Fix up module headers.
/*
/*	V03-001	TLC1002		Thomas L. Cafarella	20-Mar-1982	13:00
/*		Move collection event flag to REQUEST.PLI for consolidation.
/*
/*		Compress bar graph range for MODES and TOPCPU.
/*
/*--
/*/

/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	! 				INCLUDE  FILES				      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

%INCLUDE	MONDEF;				/* Monitor utility structure definitions */

/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	!		   SYSTEM SERVICE MACRO DEFINITIONS			      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

%INCLUDE	SYS$SETIMR;			/* $SETIMR system service */

/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	!		     EXTERNAL STORAGE  DEFINITIONS			      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

Declare
MNR$_CLASMISS	FIXED BINARY(31) GLOBALREF VALUE,	/* Error message */
MNR$_SSERROR	FIXED BINARY(31) GLOBALREF VALUE,	/* Error message */
MNR$_BEGNLEND	FIXED BINARY(31) GLOBALREF VALUE,	/* Error message */
MNR$_COLLERR	FIXED BINARY(31) GLOBALREF VALUE;	/* Error message */

Declare
COLL_EV_FLAG	FIXED BINARY(31) GLOBALREF VALUE,	/* Collection event flag */
MAX_CLASS_NO	FIXED BINARY(31) GLOBALREF VALUE,	/* Maximum defined class number */
SKIP_TO_CLASS	FIXED BINARY(31) GLOBALREF VALUE;	/* Skip to class record indicator for READ_INPUT rtn */

Declare
COLLENDED	BIT(1) ALIGNED   GLOBALREF,		/* YES => collection has ended */
COLL_STATUS	FIXED BINARY(31) GLOBALREF,		/* COLLECTION_EVENT return status code */
NORMAL		FIXED BINARY(31) GLOBALREF, 		/* MONITOR normal return status */
MULT_TEMP	FIXED BINARY(31) GLOBALREF,		/* Temp hold area for MCA$L_INT_MULT */
INTERVAL_DEL	BIT(64) ALIGNED	 GLOBALREF,		/* Delta time value for Interval */
SETIMR_STR	FIXED BINARY(7)  GLOBALREF;		/* Count byte for $SETIMR cstring */

Declare
FLUSH_IND	BIT(1) ALIGNED	 GLOBALREF,		/* Flush indicator; YES=> perform FLUSH */
FLUSH_COLLS	FIXED BINARY(15) GLOBALREF,		/* Number of collection events between FLUSH's */
FLUSH_CTR	FIXED BINARY(15) GLOBALREF;		/* Down counter for FLUSH_COLLS */

Declare
CDBPTR			POINTER GLOBALREF,		/* Pointer to CDB (Class Descriptor Block) */
C			POINTER DEFINED(CDBPTR),	/* Synonym for CDBPTR */
MRBPTR			POINTER GLOBALREF,		/* Pointer to MRB (Monitor Request Block) */
M			POINTER DEFINED(MRBPTR),	/* Synonym for MRBPTR */
MCAPTR			POINTER GLOBALREF,		/* Pointer to MCA (Monitor Communication Area) */
MC			POINTER DEFINED(MCAPTR),	/* Synonym for MCAPTR */
SPTR			POINTER GLOBALREF,		/* Pointer to SYI (System Information Area) */
CCDPTR			POINTER GLOBALREF;		/* Pointer to CCD (Current Class Descriptor) Array */

Declare
INPUT_FILE	FILE RECORD INPUT,				/* Monitor Input (Playback) File */
INPUT_CPTR	POINTER GLOBALREF,				/* Ptr to input buffer count word */
INPUT_DATA	CHAR(512) VARYING BASED(INPUT_CPTR);		/* Playback file input buffer */

Declare
01 CURR_CLASS_DESCR (MAX_CLASS_NO+1) BASED(CCDPTR),		/* Current Class Descriptor */
								/* This array of structures includes a CCD (Current */
								/* Class Descriptor) for each possible class     */
    02 CURR_CDBPTR	POINTER,				/* CDBPTR for current class */
    02 CURR_CLASS_NO	FIXED BINARY(7);			/* Class number for current class */

/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	!		       GLOBAL STORAGE  DEFINITIONS			      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	!		     	  COMPILE-TIME CONSTANTS			      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

%REPLACE NOT_SUCCESSFUL		BY '0'B;		/* Failing status bit */
%REPLACE YES			BY '1'B;		/* For general use */
%REPLACE NO			BY '0'B;		/* For general use */
/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	!		     	       OWN STORAGE				      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

Declare
CALL			FIXED BINARY(31),			/* Holds function value (return status) of called routines */ 
STATUS			BIT(1)	BASED(ADDR(CALL)),		/* Low-order status bit for called routines */
I			FIXED BINARY(15),			/* Index for DO loop */
BUFF_PTR		POINTER,				/* Temporary pointer to input file buffer */
CURR_TYPE		FIXED BINARY(7),			/* Class record type of record just read */
PREV_TYPE		FIXED BINARY(7),			/* Class record type of record previously read */
PREV_CONT		BIT(1) ALIGNED,				/* Value of MNR_CLS$V_CONT for record previously read */
CLASS_MISSING		BIT(1) ALIGNED,				/* For Playback, ON => requested class not in file */
CLASS_FOUND		BIT(1) ALIGNED;				/* For Playback, ON => requested class found in file */

Declare
MON_ERR		ENTRY (ANY VALUE, ANY, ANY) OPTIONS(VARIABLE),	/* MONITOR MACRO-32 routine to log synchronous errors */
READ_INPUT	ENTRY (FIXED BINARY(7)),			/* MONITOR routine to read an input (playback) file record */
COLLECTION_END	ENTRY,						/* MONITOR routine to indicate end of collection */
CLASS_COLLECT	ENTRY	(FIXED BINARY(7))			/* MONITOR MACRO-32 routine to collect a buffer of data */
			RETURNS(FIXED BINARY(31));

/*
/*++
/*
/* FUNCTIONAL DESCRIPTION:
/*
/*	COLLECTION_EVENT
/*
/*	COLLECTION_EVENT is an AST routine invoked via the $DCLAST
/*	system service from the EXECUTE_REQUEST routine, or via
/*	the $SETIMR system service from a previous invocation of
/*	COLLECTION_EVENT. It performs performance data collection
/*	from VMS data bases of the running system, or from an
/*	input recording file. A single invocation of COLLECTION_EVENT
/*	causes collection of data for all classes in the MONITOR
/*	request. The data is collected by calling the CLASS_COLLECT
/*	routine once for each class. CLASS_COLLECT stores the data in a
/*	collection buffer (pointed to by the CDB) for each class.
/*
/*	On the first collection event, class-specific initialization
/*	is performed by a call to the CLASS_INIT routine.
/*
/* INPUTS:
/*
/*	None
/*
/* IMPLICIT INPUTS:
/*
/*	All MONITOR variables accessible to this routine.
/*
/* OUTPUTS:
/*
/*	None
/*
/* IMPLICIT OUTPUTS:
/*
/*	MCA$L_COLLCNT is incremented by 1.
/*
/*	Data for all requested classes has been collected into
/*	their respective CDB collection buffers.
/*
/*	All MONITOR variables accessible to this routine.
/*
/* ROUTINE VALUE:
/*
/*	COLL_STATUS contains the status of this collection event upon
/*	exit.
/*
/* SIDE EFFECTS:
/*
/*	If this is the final collection event, the COLLENDED bit is set.
/*
/*--
/*/

IF COLLENDED = YES  THEN RETURN;				/* If collection has already ended, return immediately */

IF M->MRB$V_PLAYBACK						/* Playback Request */
    THEN DO;
	 IF MC->MCA$L_COLLCNT = 0				/* If first collection event, */
	     THEN MULT_TEMP = 1;				/* ... set multiple to trigger on this collection */
	 MC->MCA$V_MULTFND = NO;				/* Indicate multiple not yet found */
	 MULT_TEMP = MULT_TEMP - 1;				/* Count down toward zero */
	 IF MULT_TEMP = 0					/* If it's time to record and display, */
	     THEN DO;
		  MC->MCA$V_MULTFND = YES;			/* ... indicate so */
		  MULT_TEMP = MC->MCA$L_INT_MULT;		/* ... and re-load multiple value for next collection */
		  MC->MCA$L_CONSEC_REC = MC->MCA$L_CONSEC_REC + 1; /* ... also update to a new consec no for recording */
		  END;
	 BUFF_PTR = MC->MCA$A_INPUT_PTR;			/* Get pointer to input file buffer for later use */
	 PREV_TYPE = -1;					/* Dummy previous record type (class no) */
	 PREV_CONT = NO;					/* Dummy previous "continue" bit setting */
	 CLASS_MISSING = '0'B;					/* Class not missing */

	 DO I = 1 TO M->MRB$W_CLASSCT WHILE (^ MC->MCA$V_EOF & ^ CLASS_MISSING);	/* Loop through all requested classes */
	 CLASS_FOUND = '0'B;					/* Haven't found class yet */
	 CDBPTR = CURR_CDBPTR(I);				/* Set up current CDB */
	 IF MC->MCA$L_COLLCNT = 0				/* If first collection event */
	     THEN CALL = CLASS_INIT();				/* ... then do init for this class */

	 DO WHILE (^ MC->MCA$V_EOF & ^ CLASS_FOUND & ^ CLASS_MISSING);	/* Loop causes input file to skip past unwanted */
									/* ... classes within the recorded interval */
	 CURR_TYPE = BUFF_PTR->MNR_CLS$B_TYPE;			/* Get class (record) type of current record */
	 IF (CURR_TYPE < PREV_TYPE)  |  (CURR_TYPE > CURR_CLASS_NO(I)) |
	    (CURR_TYPE = PREV_TYPE & PREV_CONT = NO)		/* Check for missing class (should never occur) */
	     THEN DO;
		  CLASS_MISSING = YES;				/* Indicate "class missing" error */
		  COLL_STATUS = MNR$_CLASMISS;			/* Save failing status */
		  CALL MON_ERR(MNR$_CLASMISS);			/* ... and log the error */
		  END;
	     ELSE DO;
		  IF CURR_TYPE = CURR_CLASS_NO(I)		/* If inputted class = monitored class */
		      THEN DO;
			   CLASS_FOUND = YES;			/* Indicate found the record needed */
			   CALL = CLASS_COLLECT(CURR_CLASS_NO(I)); /* Collect data for this class */
			   IF STATUS = NOT_SUCCESSFUL				/* If collection failed, */
			       THEN DO;
				    COLL_STATUS = MNR$_COLLERR;			/* Save failing status */
				    CALL MON_ERR(MNR$_COLLERR,CALL);		/* Log the error */
				    CALL COLLECTION_END();			/* ... and terminate collection */
				    END;
			   END;
		  PREV_TYPE = CURR_TYPE;			/* Current now becomes previous */
		  PREV_CONT = BUFF_PTR->MNR_CLS$V_CONT;		/* Save previous "continue" bit setting */
		  CALL READ_INPUT(SKIP_TO_CLASS);		/* Read the next class record */
		  END;
	 END;

	 IF MC->MCA$V_EOF  |  CLASS_MISSING			/* If anything but CLASS_FOUND, */
	     THEN CALL COLLECTION_END();			/* ... then indicate collection ended */

	 END;

	 IF COLLENDED = NO					/* If end of collection not indicated, then scan */
								/* ... the input file for the beginning of the next */
								/* ... interval and leave the file positioned there. */
	     THEN DO;
		  CURR_TYPE = BUFF_PTR->MNR_CLS$B_TYPE;		/* Get class (record) type of current record */
		  DO WHILE(^ MC->MCA$V_EOF & CURR_TYPE > PREV_TYPE); /* Loop while class type numbers increase */
		  PREV_TYPE = CURR_TYPE;			/* Current now becomes previous */
		  CALL READ_INPUT(SKIP_TO_CLASS);		/* Read the next class record */
		  CURR_TYPE = BUFF_PTR->MNR_CLS$B_TYPE;		/* Get class (record) type of current record */
		  END;
		  IF MC->MCA$V_EOF				/* If end-of-file reached, */
		      THEN CALL COLLECTION_END();		/* ... then indicate so */
		  END;

	 IF MC->MCA$V_EOF  &  MC->MCA$L_COLLCNT = 0		/* If end-of-file after first collection event, */
	     THEN DO;						/* ... then this is an error */
		  COLL_STATUS = MNR$_BEGNLEND;			/* Save failing status */
		  CALL MON_ERR(MNR$_BEGNLEND);			/* ... and log the error */
		  END;

	 END;							/* End of Playback Request processing */


    ELSE DO;							/* Live Request */

	   MC->MCA$L_CONSEC_REC = MC->MCA$L_CONSEC_REC + 1;	/* Update to a new consec no for recording */
	   IF M->MRB$V_RECORD					/* If recording, */
	       THEN FLUSH_CTR = FLUSH_CTR - 1;			/* Decrement flush counter for this coll event */

	   DO I = 1 TO M->MRB$W_CLASSCT WHILE (COLLENDED = NO);	/* Loop once for each requested class */
	   CDBPTR = CURR_CDBPTR(I);				/* Set up current CDB */
	   IF MC->MCA$L_COLLCNT = 0				/* If first collection event */
	       THEN CALL = CLASS_INIT();			/* ... then do init for this class */

	   IF FLUSH_CTR = 0  &  CURR_CLASS_NO(I) = MC->MCA$B_LASTC /* If FLUSH_CTR reached zero, and this is last class, */
	       THEN DO;						   /* ... then time to flush */
		    FLUSH_IND = YES;				/* Indicate flush required */
		    FLUSH_CTR = FLUSH_COLLS;			/* ... and start down counter at beginning again */
		    END;

	   CALL = CLASS_COLLECT(CURR_CLASS_NO(I));		/* Collect data for this class */
	   IF STATUS = NOT_SUCCESSFUL				/* If collection failed, */
	       THEN DO;
		    COLL_STATUS = MNR$_COLLERR;			/* Save failing status */
		    CALL MON_ERR(MNR$_COLLERR,CALL);		/* Log the error */
		    CALL COLLECTION_END();			/* ... and terminate collection */
		    END;
	   END;

	   IF COLLENDED = NO					/* If not at end of collection, */
	       THEN DO;
		    CALL = SYS$SETIMR(COLL_EV_FLAG,INTERVAL_DEL,COLLECTION_EVENT,);
								/* Re-enter COLLECTION_EVENT at specified interval */
								/* COLL_EV_FLAG is not used; it is just a dummy */
		    IF STATUS = NOT_SUCCESSFUL			/* If $SETIMR failed, */
		        THEN DO;
			     COLL_STATUS = MNR$_SSERROR;	/* Save failing status */
			     CALL MON_ERR(MNR$_SSERROR,CALL,SETIMR_STR); /* Log the error */
			     CALL COLLECTION_END();		/* ... and terminate collection */
			     END;
		    END;
	   END;							/* End of Live Request processing */

MC->MCA$L_COLLCNT = MC->MCA$L_COLLCNT + 1;			/* Count this collection event */
RETURN;								/* Return to caller */

CLASS_INIT: Procedure Returns(fixed binary(31));		/* Class-specific initialization */

/*
/*++
/*
/* FUNCTIONAL DESCRIPTION:
/*
/*	CLASS_INIT
/*
/*	This routine is called by COLLECTION_EVENT on the first
/*	collection event to perform class-specific initialization.
/*	Currently, the MODES, PROCESSES, DISK, DLOCK and SYSTEM
/*	classes require such initialization.
/*
/* INPUTS:
/*
/*	None
/*
/* OUTPUTS:
/*
/*	None
/*
/* IMPLICIT OUTPUTS:
/*
/*	Initialization for the MODES, PROCESSES, DISK, DLOCK and SYSTEM classes performed.
/*
/* ROUTINE VALUE:
/*
/*	SS$_NORMAL
/*
/* SIDE EFFECTS:
/*
/*	None
/*
/*--
/*/

/*
/*	!-----------------------------------------------------------------------------+
/*	!									      !
/*	! 				 LOCAL STORAGE				      !
/*	!									      !
/*	!-----------------------------------------------------------------------------+
/*/

Declare
PROCS_CLSNO	FIXED BINARY(31) GLOBALREF VALUE,		/* PROCESSES class number */
MODES_CLSNO	FIXED BINARY(31) GLOBALREF VALUE,		/* MODES class number */
DISK_CLSNO	FIXED BINARY(31) GLOBALREF VALUE,		/* DISK class number */
DLOCK_CLSNO	FIXED BINARY(31) GLOBALREF VALUE,		/* DLOCK class number */
SYSTEM_CLSNO	FIXED BINARY(31) GLOBALREF VALUE,		/* SYSTEM class number */
TOP_RANGE	FIXED BINARY(31) GLOBALREF VALUE,		/* Range value for TOPB, TOPD, TOPF bar graph */
MODES_STRLEN	FIXED BINARY(31) GLOBALREF VALUE;		/* Length of "Interrupt Stack" string */

Declare
IDBPTR		POINTER,					/* Pointer to Item Descriptor Block (IDB) */
ITMSTR (1:C->CDB$L_ICOUNT) BIT(8) ALIGNED BASED(C->CDB$A_ITMSTR), /* Vector of item numbers for this class */
ITEM_IDX	FIXED BINARY(15),				/* Index into IDB_BLOCK */
ITEMNO		FIXED BINARY (7);				/* Item number used in DO loop */

Declare
1 PERFTABLE GLOBALREF,						/* Table of IDB's */
  2 IDB_BLOCK (0:255) CHAR(IDB$K_ILENGTH);			/* Up to 256 IDB's */

Declare
1 PINTERRUPT_STR  BASED(IDBPTR->IDB$A_LNAME),			/* Counted string for "Interrupt Stack PRIMARY" */
  2 L FIXED BINARY(7),						/* Count */
  2 S CHAR(1);							/* First character of string */

Declare
REVLEVELS	(0:127) FIXED BINARY(7) GLOBALREF;		/* Revision Levels Vector */

Declare
1 DIR_STR  BASED(IDBPTR->IDB$A_LNAME),				/* Counted string for "Directory" items in DLOCK */
  2 L FIXED BINARY(7),						/* Count */
  2 X CHAR(17),							/* Uninteresting characters of string */
  2 S CHAR(5);							/* Characters of interest */

Declare
PROCTITLE (0:127) GLOBALREF POINTER;				/* Table of pointers to PROCESSES screen titles */

Declare
1 BU_SYS_SINGLE		GLOBALREF,				/* Bar graph range values for SYSTEM class (single stat) */
  2 BSS_RANGE (1:17)	FIXED BINARY(31);

IF CURR_CLASS_NO(I) = MODES_CLSNO					/* If MODES class, */
    THEN DO;
	 C->CDB$V_CPU_COMB = NO;					/* Assume no CPU combination necessary */
	 MC->MCA$A_MPADDR = NULL();					/* Indicate no MP address */
	 UNSPEC(ITEM_IDX) = ITMSTR(1);					/* Zero-extend ITMSTR element to word */
	 IDBPTR = ADDR(IDB_BLOCK(ITEM_IDX));				/* Set up IDB ptr in order to */
									/* ... reference PINTERRUPT_STR */
	 PINTERRUPT_STR.L = MODES_STRLEN;				/* Get length of "Interrupt Stack" string */
	 IF SPTR->MNR_SYI$B_MPCPUS = 2					/* Check if monitored system a multiprocessor */
	     THEN DO;							/* Multiprocessor system */
		  C->CDB$L_ICOUNT = C->CDB$L_ICOUNT *			/* Increase number of collected items */
				    SPTR->MNR_SYI$B_MPCPUS;
		  C->CDB$W_BLKLEN = C->CDB$W_BLKLEN *			/* ... and size of coll buff data block */
				    SPTR->MNR_SYI$B_MPCPUS;
		  IF C->CDB$V_CPU & M->MRB$V_SYSCLS = NO & M->MRB$V_MFSUM = NO /* If CPU-specific display requested ... */
									/* AND SYSTEM class not being monitored, */
		      THEN DO;						/* AND not multi-file summary, */
			   C->CDB$L_ECOUNT = C->CDB$L_ICOUNT;		/* Increase number of displayed elements */
			   END;
		      ELSE DO;						/* Combined display */
			   C->CDB$V_CPU_COMB = YES;			/* Indicate that collected items must be */
									/* ... combined for display */
			   PINTERRUPT_STR.L = PINTERRUPT_STR.L - 10;	/* Shorten "Interrupt Stack" display string */
									/* ... to remove the word "PRIMARY" */
			   END;
		  END;
	     ELSE							/* Uniprocessor system */
		  PINTERRUPT_STR.L = PINTERRUPT_STR.L - 10;		/* Shorten "Interrupt Stack" display string */
									/* ... to remove the word "PRIMARY" */
	 END;

IF CURR_CLASS_NO(I) = PROCS_CLSNO					/* If PROCESSES class, */
    THEN DO;
	 C->CDB$A_TITLE = PROCTITLE(C->CDB$B_ST);			/* Set up ptr to title for requested display type */

	 IF C->CDB$B_ST = TOPC_PROC					/* If TOPCPU display, */
	     THEN C->CDB$L_RANGE = 100;					/* Set range to 100 */
	     ELSE C->CDB$L_RANGE = TOP_RANGE;				/* Set range for other TOP displays */

	 END;

IF CURR_CLASS_NO(I) = DISK_CLSNO					/* If DISK class ... */
 & REVLEVELS(DISK_CLSNO) > 0						/* ... AND it is any rev level after 0, */
    THEN DO;
	 C->CDB$V_DISKAC = YES;						/*   then indicate DISK with allocation class names */
	 IF REVLEVELS(DISK_CLSNO) > 1					/*   If any rev level after 1, */
	     THEN C->CDB$V_DISKVN = YES;				/*     then indicate DISK with volume names */
	     ELSE C->CDB$V_DISKVN = NO;					/*     else indicate not */
	 END;
    ELSE DO;
	 C->CDB$V_DISKAC = NO;						/*   else indicate no alloc class in name, */
	 C->CDB$V_DISKVN = NO;						/*   ... and no volume name */
	 END;

IF CURR_CLASS_NO(I) = DISK_CLSNO					/* If DISK class ... */
 & M->MRB$V_MFSUM = NO							/* ... AND it's not m.f. summary, */
 & C->CDB$B_ST = ALL_STAT						/* ... AND all stats requested, */
    THEN C->CDB$V_WIDE = YES;						/*   then indicate wide display, */
    ELSE C->CDB$V_WIDE = NO;						/*   else indicate usual width */

IF CURR_CLASS_NO(I) = DLOCK_CLSNO					/* If DLOCK class ... */
 & REVLEVELS(DLOCK_CLSNO) = 0						/* ... AND it is rev level 0, */
    THEN DO;

	 DO ITEMNO = 13 TO 15 BY 1;					/* Change text for last three items */

	 UNSPEC(ITEM_IDX) = ITMSTR(ITEMNO);				/* Zero-extend ITMSTR element to word */
	 IDBPTR = ADDR(IDB_BLOCK(ITEM_IDX));				/* Set up IDB ptr in order to */
									/* ... reference DIR_STR */
	 IF SPTR->MNR_SYI$V_RESERVED1					/* If this is directory node, */
	     THEN DIR_STR.S = 'Incom';					/*   then rates are "Incoming" */
	     ELSE DIR_STR.S = 'Outgo';					/*   else they are "Outgoing" */

	 END;								/* End of DO loop */

	 END;


IF CURR_CLASS_NO(I) = SYSTEM_CLSNO					/* If SYSTEM class, */
    THEN DO;
	 BSS_RANGE(14) = SPTR->MNR_SYI$L_BALSETMEM;			/* Stash away range of Free List bar graph */
	 BSS_RANGE(15) = SPTR->MNR_SYI$L_MPWHILIM;			/* ... and Modified List bar graph */
	 END;

RETURN(NORMAL);

END CLASS_INIT;

END COLLECTION_EVENT;
