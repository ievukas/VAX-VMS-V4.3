%TITLE	'X.25 Access Module Parsing'
MODULE NCPSTAMAC (IDENT = 'V04-000',LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP  SET / CLEAR X.25-ACCESS
!	module parameters.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Paul R. DeStefano, February 1984
!
! MODIFIED BY:
!
!	V03-001	PRD0086		Paul R. DeStefano	26-Mar-1984
!		Corrected parameter type for NODE.
!
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!
	ACT_DFN			! Action routine externals
EXTERNAL
	NCP$GL_QUALPRS;		! Qualifier was present on command line

!
! OWN STORAGE:
!


!
! LITERALS
!

LITERAL
    QUALPRESENT = 1;		! Qualifier was present on command line

%SBTTL	'Set Parameter blocks'

!
!	SET X25-ACCESS Parameter Blocks
!

	BUILD_PCL

	(MAC,					! Module X25-ACCESS

	NET, TKN,	PCXA_NET, ,

	ACC, TKN,	PCXA_ACC, ,
	NOD, NADR,	PCXA_NOD, ,
	PSW, TKN,	PCXA_PSW, ,
	USR, TKN,	PCXA_USR, ,

	, END, , ,

	)

	BUILD_PBK

	(MAC,					! Module X25-ACCESS

	NET, TKN, , ,
	KNT, LITB, NMA$C_ENT_KNO, MAC_NET,	! KNOWN NETWORKS
	ACC, TKN, , ,
	NOD, NADR, , ,
	PSW, TKN, , ,
	USR, TKN, , ,


	)

BIND	PDB$G_MAC_ENT =				! Access entity name
	UPLIT BYTE(0, %ASCIC 'X25-ACCESS');

	BUILD_SDB

	(MAC, NMA$C_ENT_MOD, MAC_ENT, MAC)

%SBTTL	'Clear Parameter blocks'

!
!	CLEAR X25-ACCESS Parameter Blocks
!

	BUILD_PCL

	(CAC,					! Module X25-ACCESS

	NET, TKN,	PCXA_NET, ,

	ACC, LITB,	PCXA_ACC, ,
	NOD, LITB,	PCXA_NOD, ,
	PSW, LITB,	PCXA_PSW, ,
	USR, LITB,	PCXA_USR, ,

	, END, , ,

	)

	BUILD_PBK

	(CAC,					! Module X25-ACCESS

	ALL, LITB, 0, VRB_ALL,

	NET, TKN, , ,
	KNT, LITB, NMA$C_ENT_KNO, CAC_NET,	! KNOWN NETWORKS
	ACC, LITB, , ,
	NOD, LITB, , ,
	PSW, LITB, , ,
	USR, LITB, , ,

	)


	BUILD_SDB

	(CAC, NMA$C_ENT_MOD, MAC_ENT, CAC)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(MAC,

	DAT, '	(NETWORK name, or KNOWN NETWORKS): ',
	NET, '		NETWORK	(1-16 characters): ',

	ACC,   'Account		        (1-39 characters): ',
	NOD,   'Node name	         (1-6 characters): ',
	PSW,   'Password	        (1-39 characters): ',
	USR,   'User		        (1-39 characters): ',

	),

	PROMPT_STRINGS
	(CAC,

	DAT, '	(NETWORK name, or KNOWN NETWORKS): ',
	NET, '		NETWORK	(1-16 characters): ',

	ALL,   'All X.25 access parameters	   (Y, N): ',
	ACC,   'Account				   (Y, N): ',
	NOD,   'Node				   (Y, N): ',
	PSW,   'Password			   (Y, N): ',
	USR,   'User				   (Y, N): ',

	);

%SBTTL	'Declare entry points to TPARSE tables'

!
!	Declare entry points to this TPARSE table
!

$INIT_STATE (NCP$G_STTBL_MAC, NCP$G_KYTBL_MAC);

FORWARD
	ST_CAC:		VECTOR [0];	! Clear X25-Access

GLOBAL BIND
	NCP$G_STTBL_CAC = ST_CAC,
	NCP$G_KYTBL_CAC = NCP$G_KYTBL_MAC;

%SBTTL	'SET X25-ACCESS Module Parameters'

!
!	SET/DEFINE MODULE X25-ACCESS parameter states
!

$STATE	(ST_MAC,
	(TPA$_EOS, ST_MAC_PMT_DAT),
	(TPA$_LAMBDA, ST_MAC_DAT)
	);

$STATE	(ST_MAC_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_MAC_DAT));


$STATE	(ST_MAC_DAT,			! Determine if KNOWN specified
	('NETWORK',	ST_MAC_DAT_NET),
	('KNOWN',	ST_MAC_DAT_KWN),
	);

!
!	Prompt for access parameters
!

$STATE	(ST_MAC_DAT_NET,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(MAC, NET, NCP$_INVKEY,

	((SE_NET_NAME),, ACT$SAVPRM, QUALPRESENT, NCP$GL_QUALPRS, PBK$G_MAC_NET));

$STATE	(ST_MAC_PMT_NET,
	(TPA$_EOS),
	(TPA$_LAMBDA,ST_MAC_PRC));

	PROMPT_STATES
	(MAC,
	ACC, NOD, PSW, USR
	)

$STATE	(ST_MAC_DOIT,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MAC),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_MAC_DAT_KWN,
	(TPA$_EOS, ST_MAC_PMT_NET, ACT$SAVPRM,,, PBK$G_MAC_KNT),
	('NETWORKS', ST_MAC_PMT_NET, ACT$SAVPRM,,, PBK$G_MAC_KNT),
	);


!
!	Dispatch States
!

$STATE	(ST_MAC_PRC,

	((SE_ALL), ST_MAC_DOIT),

	DISPATCH_STATES
	(MAC,
	
	ACC, 'ACCOUNT',
	NOD, 'NODE',
	PSW, 'PASSWORD',
	USR, 'USER'

	)
	,(TPA$_EOS, ST_MAC_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_MAC_PRC_KWN,
	((SE_MAC_KWN), ST_MAC_PRC));

$STATE	(SE_MAC_KWN,

	KEYWORD_STATE
	(MAC,

	KNT, 'NETWORKS',

	));



!
!	Process states - call subexpressions to store value
!

	PROCESS_STATES
	(MAC,

	ACC, ,
	NOD, ,
	PSW, ,
	USR, ,

	)


!
!	Sub_expressions
!

	SUB_EXPRESSIONS
	(MAC,

	ACC, (SE_ACC_ACC),
	NOD, (SE_NODE_ID),
	PSW, (SE_ACC_PSW),
	USR, (SE_ACC_USR),

	)

%SBTTL	'CLEAR X25-ACCESS Module Parameters'

!
!	CLEAR/PURGE MODULE X25-ACCESS parameter states
!

$STATE	(ST_CAC,
	(TPA$_EOS, ST_CAC_PMT_DAT),
	(TPA$_LAMBDA, ST_CAC_DAT)
	);


$STATE	(ST_CAC_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_CAC_DAT));


$STATE	(ST_CAC_DAT,			! Determine if KNOWN specified
	('NETWORK',	ST_CAC_DAT_NET),
	('KNOWN',	ST_CAC_DAT_KWN),
	);

!
!	Prompt for access parameters
!


$STATE	(ST_CAC_DAT_NET,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(CAC, NET, NCP$_INVKEY,

	((SE_NET_NAME),, ACT$SAVPRM, QUALPRESENT, NCP$GL_QUALPRS, PBK$G_CAC_NET));

$STATE	(ST_CAC_PMT_NET,
	(TPA$_EOS),
	(TPA$_LAMBDA,ST_CAC_PRC));

	QUERY_STATES
	(CAC,
	ALL, ACC, PSW, USR)

$STATE	(ST_CAC_DOIT,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CAC),
	);


!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_CAC_DAT_KWN,
	(TPA$_EOS, ST_CAC_PMT_NET, ACT$SAVPRM,,, PBK$G_CAC_KNT),
	('NETWORKS', ST_CAC_PMT_NET, ACT$SAVPRM,,, PBK$G_CAC_KNT),
	);



!
!	Dispatch States
!

$STATE	(ST_CAC_PRC,

	DISPATCH_STATES
	(CAC,

	ALL, 'ALL',
	ACC, 'ACCOUNT',
	PSW, 'PASSWORD',
	USR, 'USER',
	)
	,(TPA$_EOS, ST_CAC_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_CAC_PRC_KWN,
	((SE_CAC_KWN), ST_CAC_PRC));

$STATE	(SE_CAC_KWN,

	KEYWORD_STATE
	(CAC,

	KNT, 'NETWORKS',

	));



!
!	Process states - call subexpressions to store parameter ID's
!

	PROCESS_STATES
	(CAC,

	ALL, ,
	ACC, ,
	PSW, ,
	USR, ,

	)


!
!	Sub_expressions
!

	SUB_EXPRESSIONS
	(CAC,

	ALL, TPA$_EOS,

	ACC, TPA$_LAMBDA,
	PSW, TPA$_LAMBDA,
	USR, TPA$_LAMBDA,
	)

%SBTTL	'Define Subexpressions'

!
!	Define Subexpressions from Library
!

	SEM_ALL			! All parameter
	SEM_NET_NAME		! X25 Network name
	SEM_ACCESS		! X25 Access Account, Password, User
	SEM_NODE_ID		! Nodename, Node ID
	SEM_QUOT_STR		! Quoted string
	SEM_QUERY		! Query state subexpressions

END
ELUDOM
