%TITLE 'EDT$DATA - Common Data Definitions'
MODULE EDT$DATA (				! Common Data Definitions
		IDENT = 'V04-000'			! File: DATA.BLI Edit: REM2085
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module contains common data definitions used throughout
!	the editor.
!
! ENVIRONMENT:	Used in all EDT configurations.
!
! AUTHOR: Bob Kushlis, CREATION DATE:  6-AUG-1979
!
! MODIFIED BY:
!
! Dan Szymanski,  21-JUL-80,  01
!	As part of the expanded key definition facilities, the default
!	definitions for VT52 and VT100 keypads have been moved to KEYPAD.
!	The table EDT$$A_TRN_TBL  now contains (relative) pointers to the strings
!	of nokeypad commands defining the keys.  The variable EDT$$G_TRN_TBLINIT  was
!	added to indicate the initialization of the translation table.
!
! Dan Szymanski,  15-JAN-81,  02
!	Variable EDT$$G_DEL_CHLEN  added to keep track of length of the deleted
!	character buffer.
!
! Dan Szymanski,  28-JAN-81,  03
!	Variable EDT$$G_CAS_TYP  added to indicate type of changecase.
!
! 2-004	- Regularized the header and removed some symbols not being used.
!	   JBS 13-Feb-1981
! 2-005	- Added EDT$$G_IOFI_NFND .  JBS 19-Feb-1981
! 2-006	- Fixed file name and module name.  JBS 04-Mar-1981
! 2-007	- Change EOB_LINE to EDT$$Z_EOB_LN .  JBS 30-Mar-1981
! 2-008	- Add REQUIRE for TRAROUNAM.REQ.  JBS 17-Apr-1981
! 2-009	- Correct a typo in a comment.  JBS 01-MAY-1981
! 2-010	- Make the journal buffer 256 bytes long.  JBS 18-Jun-1981
! 2-011	- Add more control C variables.  JBS 22-Jun-1981
! 2-012 - add REF_USER_ENTITIES vector  TMV 3-Aug-81
! 2-013	- Remove EDT$$A_MAC_LST , no longer used.  JBS 07-Aug-1981
! 2-014	- Add EDT$$G_PA_NOQUO .  JBS 26-Aug-1981
! 2-015 - Add EDT$$G_RPT . STS 26-Aug-1981
! 2-016 - Add EDT$$G_FNF_MSGFLG  TMV 10-Sep-1981
! 2-017 - Add EDT$$G_DFLT_VERB for changecase mode.  STS 21-Sep-1981
! 2-018 - Add EDT$$G_G_SUMRY to type out summary or not. STS 01-Oct-1981
! 2-019 - Add new variables for text strings. STS 06-Oct-1981
! 2-020	- Add strings for prompting.  JBS 20-Oct-1981
! 2-021 - Add variables for para and word types.  STS 21-Oct-1981
! 2-022	- Add four more prompts, amd make max length 31 chars.  JBS 23-Oct-1981
! 2-023	- Remove EDT$$Z_RNG_ALLRNG.  JBS 02-NOV-1981
! 2-024 - Remove all references to addresses to make sharable, and move
!	   all initialization out to EDT$INIT.  STS 05-Nov-1981
! 2-025	- Add a cell for /VAR and /STREAM.  JBS 28-Nov-1981
! 2-026 - Add variables for file i/o routine and environment. STS 11-Dec-1981
! 2-027	- Revise control C variables and add one more.  JBS 29-DEC-1981
! 2-028	- Add a flag and a counter for the 'working' message.  JBS 12-Jan-1982
! 2-029 - Add EDT$$L_IO_VFCHD, (this was in IOMOD) STS 20-Jan-1982
! 2-030 - Line numbers declarations moved here from system specific routines.
!	  New line number globals added.  SMB 29-Jan-1982
! 2-031 - Change definition of maximum line number.  SMB 1-Feb-1982
! 2-032 - Add more line number globals.  SMB 3-Feb-1982
! 2-033 - Add a global for actual count of lines resequenced.  SMB 7-Feb-1982
! 2-034	- Add a global for enabling autorepeat manipulation.  JBS 09-Feb-1982
! 2-035 - Add globals for EDT$WORKIO address and environment. STS 10-Feb-1982
! 2-036 - Add global for workfile record descriptor.  STS 15-Feb-1982
! 2-037 - Add global to flag entering and leaving EXT command mode.  SMB 26-Feb-1982
! 2-038 - Add callable literals. STS 08-Mar-1982
! 2-039 - Change definition of EOB marker.  SMB 08-Mar-1982
! 2-040 - Add flag for re-entry. STS 11-Mar-1982
! 2-041	- Add EDT$$V_OPTIONS.  This will replace EDT$$G_CMD and EDT$$G_JOU.  JBS 18-Mar-1982
! 2-042	- Remove the EDT$K_ symbols to EDT$FILEIO, and remove EDT$$G_CMD and EDT$$G_JOU.
!	   JBS 23-Mar-1982
! 2-043 - Add flags to indicate input file and/or command file open. STS 07-Apr-1982
! 2-044 - Add global to indicate quotes around key. STS 08-Apr-1982
! 2-045	- Add EDT$$G_JOU_VALID.  JBS 09-Apr-1982
! 2-046	- Add EDT$$A_COM_NAM.  JBS 04-May-1982
! 2-047	- Add EDT$$A_CHAIN_INFO and EDT$$G_CC_DONE.  JBS 24-May-1982
! 2-048 - Add EDT$$G_MESSAGE_LINE for change mode messages. SMB 15-Jun-1982
! 2-049 - Add EDT$$G_CHM_FRST_ENTERED for callable edt.   SMB 1-Jul-1982
! 2-050	- Add EDT$$G_FMT_BOT, EDT$$G_FMT_LCNT and EDT$$G_LASTMSG, remove
!	   EDT$$G_CHM_FRST_ENTRY.  JBS 05-Jul-1982
! 2-051 - Remove EDT$$T_PMT_PRTC. STS 07-Jul-1982
! 2-052 - Add EDT$$G_SAV_TIWID to save terminal width. STS 08-Jul-1982
! 2-053	- Remove EDT$$A_STR_CMP, add EDT$$B_CHAR_INFO.  JBS 19-Jul-1982
! 2-054 - Add descriptor for signalled filename.  STS 10-Jul-1982
! 2-055 - Initialize EDT$$G_PST_CNT to zero.  SMB 22-Jul-1982
! 2-056 - Add some new globals for terminal characteristics.  SMB 30-Jul-1982
! 2-057 - Add a flag to abort a write. STS 05-Aug-1982
! 2-058 - Add globals for xlate routine address and environment word. STS 13-Aug-1982
! 2-059	- Revise key translation data base.  JBS 12-Aug-1982
! 2-060 - Add global literals for options word masks. STS 17-Aug-1982
! 2-061	- Add EDT$$G_TI_SCROLL and EDT$$G_TI_EDIT.  JBS 01-Sep-1982
! 2-062	- Remove reference to EDT$$TI_WRLN, no longer used.  JBS 02-Sep-1982
! 2-063 - Add new screen package globals.  SMB 11-Sep-1982
! 2-064 - Change the definition of EDT$$Z_EOB_LN again.  SMB 20-Sep-1982
! 2-065 - Add a screen pointer global for EOB.  SMB 05-Oct-1982
! 2-066 - Add a flag to indicate we must! do a put to journal file. STS 06-Oct-1982
! 2-067	- Add EDT$$G_SCR_REBUILD.  JBS 09-Oct-1982
! 2-068 - Add new select buffer global.  SMB 11-Oct-1982
! 2-069	- Add EDT$$G_TI_DUMB.  JBS 16-Oct-1982
! 2-070 - Add memory allocation maximum global.  SMB 18-Oct-1982
! 2-071	- Add a counter for records inserted.  JBS 21-Oct-1982
! 2-072	- Make the counter also count records deleted.  JBS 27-Oct-1982
! 2-073	- Add EDT$$G_BOT_LINE.  JBS 02-Dec-1982
! 2-074	- Remove cells which appear to be unused.  JBS 14-Dec-1982
! 2-075	- Add EDT$$G_CS_OLDCHNO.  JBS 27-Dec-1982
! 2-076 - Add scrolling region globals.  SMB 11-Jan-1983
! 2-077	- Add EDT$$G_RECSCRUPD.  JBS 21-Jan-1983
! 2-078	- Add conditionals for WPS and VT220 support.  JBS 10-Feb-1983
! 2-079	- Add new value for EDT$$G_SCR_CHGD.  JBS 02-Mar-1983
! 2-080	- Add character names table.  JBS 04-Mar-1983
! 2-081	- Add write message cell.  JBS 24-Mar-1983
! 2-082	- Add cell to remember insert/replace mode.  JBS 01-Apr-1983
! 2-083	- Add cell to remember rel record no of top screen line.  JBS 04-Apr-1983
! 2-084	- Add cell to flag any changes, to avoid scanning in screen udpate.  JBS 05-Apr-1983
! 2-085 - Add cell EDT$$G_DEC_CRT to indicate terminal's "service class".  REM 02-Mar-1984
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!
!	NONE
!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:TRAROUNAM';

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:SUPPORTS';

LIBRARY 'EDTSRC:TRANSLATE';

LIBRARY 'EDTSRC:KEYPADDEF';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    NO_SELECT = -1;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	NONE
!<BLF/PAGE>

!+
! The remainder of this module defines storage used throughout the editor.
!-

GLOBAL
    EDT$$T_CMD_BUF : BLOCK [CH$ALLOCATION (256)],	! Command line buffer
    EDT$$A_CMD_BUF,				! Pointer into command buffer
    EDT$$A_CMD_END,				! Pointer to end of command
    EDT$$G_CMD_LEN,				! Length of command buffer
    EDT$$T_LN_BUF : BLOCK [CH$ALLOCATION (256)],	! Current line buffer
    EDT$$A_LN_PTR,				! Pointer to char in current line
    EDT$$A_LN_END,				! Pointer to end of line
    EDT$$G_LN_LEN;				! Length of current line

GLOBAL
    EDT$$G_INPUT_OPN,				! indicates main input file open
    EDT$$G_CMD_OPN,				! indicates command file open
    EDT$$G_EXT_MOD : INITIAL (0),		! 1 = in EXT command mode
    EDT$$G_EDIT_MOD,				! Current editting mode
    EDT$$G_EDIT_DFLTMOD,			! The mode to enter after startup.
    EDT$$G_SAV_CNT,				! Flush count for audit trail.
    EDT$$G_ABT_WRITE,				! abort any write being done
    EDT$$G_WRITE_MSG,				! Print this message before next WRITE or EXIT
    EDT$$G_EXITD,				! Set to indicate the editor has exited
    EDT$$A_INP_NAM,				! Pointer to input file name
    EDT$$G_INP_NAMLEN,				! Length of input file name
    EDT$$A_OUT_NAM,				! Pointer to output file name
    EDT$$G_OUT_NAMLEN,				! Length of output file name
    EDT$$A_CMD_NAM,				! Pointer to command file name
    EDT$$G_CMD_NAMLEN,				! Length of command file name
    EDT$$A_JOU_NAM,				! Journal file name
    EDT$$G_JOU_NAMLEN,				! Journal file name length
    EDT$$G_PUT_JOU,
    EDT$$G_VARIABLE : INITIAL (0),		! 1 = /VARIABLE, -1 = /STREAM, 0 = neither (RSTS/E only)
    EDT$$V_OPTIONS,				! Options bits
    EDT$$A_CHAIN_INFO : INITIAL (0),		! Pointer to chain information (RSTS/E only)
    EDT$$G_NOS,					! Line numbers enabled flag
    EDT$$G_CAS_FLG,				! Flag case (upper, lower none)
    EDT$$G_EXCT_MATCH,				! Exact matches required?
    EDT$$G_SEA_BEG,				! End searches at beginning?
    EDT$$G_SEA_BNDD,				! Search bounded?
    EDT$$G_QUIET,				! Quiet mode
    EDT$$G_RPT,					! Allow repeat counts?
    EDT$$G_FNF_MSGFLG,				! Print file not found message
    EDT$$G_DEC_CRT,				! Terminal's "service class"
    EDT$$G_EIGHT_BIT,				! Eightbit mode
    EDT$$G_VFY,					! Do we verify command files?
    EDT$$G_JOU_IFI,				! Internal File Identifier for journal file
    EDT$$G_JOU_VALID,				! 1 = journal record is valid, 0 = it isn't, don't write.
    EDT$$A_ALT_BUF : REF TBCB_BLOCK,		! Alternate buffer for copy etc.
    EDT$$G_SECOND : VOLATILE,			! Set once a second (using an AST) for the 'working' message
    EDT$$G_WORKCOUNT,				! Counter to support the 'working' message
    EDT$$G_CC : VOLATILE,			! Set when control c is typed.
    EDT$$G_CC_CNT1_LO,				! Times tested since last journal record
    EDT$$G_CC_CNT1_HI,				! High half of the above
    EDT$$G_CC_CNT2_LO,				! Second control C counter
    EDT$$G_CC_CNT2_HI,				! High half of the above
    EDT$$G_CC_FLAG,				! Second control C flag
    EDT$$G_CC_DONE,				! Set if control C has been acted upon
    EDT$$G_REENTRY : INITIAL (67),		! flag for re-entry
    EDT$$G_TI_TYP,				! Terminal type.
    EDT$$G_TI_PLEN,				! Terminal page length
    EDT$$G_TI_RESET : INITIAL (0),		! Terminal char have been reset
    EDT$$G_SAV_TIWID,				! original terminal width
    EDT$$A_CUR_BUF : REF TBCB_BLOCK,		! The current text buffer control block
    EDT$$A_PRV_BUF : REF TBCB_BLOCK,		! Previous tbcb address.
    EDT$$A_MAC_BUF : REF TBCB_BLOCK,		! Pointer to current macro tbcb
    EDT$$A_PST_BUF : REF TBCB_BLOCK,		! Pointer to paste buffer
    EDT$$A_BUF_LST,				! List of active text buffers.
    EDT$$G_KPAD,				! Use the keypad?
    EDT$$G_WD_WRAP,				! word wrap?
    EDT$$A_US_ENT : VECTOR [4],			! Pointers to user defined entities.
    EDT$$A_US_TXT : VECTOR [2],			! Address of user defined texts
    EDT$$A_COM_NAM,				! Address of command file name
    EDT$$G_TAB_SIZ,				! Structured tab size.
    EDT$$G_TAB_LVL,				! Structured tab level.
    EDT$$G_TADJ,				! Tabs adjust level.
    EDT$$G_INP_SRC,				! Source of command input.
    EDT$$G_INP_CNT,				! count since last flush.
    EDT$$G_RCOV_MOD,				! Are we in recovery mode.
    EDT$$G_RECSCRUPD;				! Counter for updating the screen in recovery mode

GLOBAL BIND
    EDT$$B_CHAR_INFO = UPLIT (BYTE (CHAR_INFO));

GLOBAL BIND
    EDT$$A_CHAR_NAMES = UPLIT (BYTE (CHAR_NAMES));	! Names of some characters

MACRO
    LENGTH (LIST) =
 %LENGTH %;

GLOBAL LITERAL
    EDT$$K_CHAR_NAMES_LEN = LENGTH (CHAR_NAMES);

UNDECLARE %QUOTE
    LENGTH;

!+
! Change mode data declarations.
!+

GLOBAL
    EDT$$G_LN_CHGD,				! Indicates current line has changed.
    EDT$$G_COL,					! The column we should be on.
    EDT$$G_DIR,					! The current direction.
    EDT$$T_DEL_LN : BLOCK 			! Deleted line buffer.
	[CH$ALLOCATION (257)],
    EDT$$G_DEL_LNLEN,				! Length of deleted line.
    EDT$$T_DEL_WD : BLOCK 			! Deleted word buffer.
	[CH$ALLOCATION (81)],
    EDT$$G_DEL_WDLEN,				! Length of deleted word.
    EDT$$T_DEL_CH : BLOCK 			! Deleted character buffer.
	[CH$ALLOCATION (2)],
    EDT$$G_DEL_CHLEN,				! Length of deleted character.
    EDT$$G_DIR_MOD,				! The directional mode:
    						! -1 for backup, 1 for advance.
    EDT$$G_EXI,
    EDT$$G_REVID,				! reverse video on?
    EDT$$G_INSERT_MODE,				! Insert mode on (0 = replace mode)
    EDT$$G_VERT,				! was last entity VERT?
    EDT$$G_PST_CNT : INITIAL (0),		! No. of characters pasted.
    EDT$$A_SEA_STR,				! search string address.
    EDT$$G_SEA_LEN,				! search string length
    EDT$$A_RPL_STR,				! replace string address
    EDT$$G_RPL_LEN,				! replace string length

%IF SUPPORT_WPS
%THEN
    EDT$$G_CAS_TYP,				! Type of changecase being performed
    EDT$$G_DFLT_VERB,				! Default verb (move, chgu, or chgl)
    EDT$$G_SUMRY,				! type out summary or not on exit
    EDT$$G_WRDTYP,				! delimiter a word or not flag
    EDT$$G_PARTYP,				! wps para or regular para flag
%FI

    EDT$$G_TRN_TBLINIT;				! True if translation table has been initialized

!+
! Globals for the new screen updater.
!-

GLOBAL
    EDT$$G_MEM_CNT,				! Memory allocation count
    EDT$$A_OLD_SEL,				! Address of old select buffer
    EDT$$G_TRUN,				! Truncate or wrap long lines?
    EDT$$G_TI_WID,				! Width of terminal line
    EDT$$G_TI_SCROLL,				! 1 = terminal has scrolling regions
    EDT$$G_TI_EDIT,				! 1 = terminal has 'edit' features (DL, IL, DCH, ICM)
    EDT$$G_TI_DUMB,	! 1 = terminal driver does not track escape sequences (needs CR to avoid wrap)
    EDT$$G_TOP_SCREG,				! Top of current scrolling region
    EDT$$G_BOT_SCREG,				! Bottom of current scrolling region
    EDT$$G_SCLL_TOP,				! top limit of cursor before scrolling
    EDT$$G_SCLL_BOT,				! bottom limit of cursor before scrolling
    EDT$$G_SCR_LNS,				! number of screen lines to use
    EDT$$G_SCR_CHGD,				! see below
!+
! 0 = screen OK,
! 1 = screen must be cleared and repainted,
! 2 = terminal must be initialized, then screen cleared and repainted.
!-
    EDT$$G_SCR_REBUILD,			! The text area of the screen must be rebuilt from the work file
    EDT$$G_TXT_ONSCR,				! command put text on screen.
    EDT$$G_RECS_INSERTED,		! Count of records inserted and deleted since last screen update
    EDT$$G_SHF,					! The number of columns shifted.
    EDT$$L_SEL_LN : LN_BLOCK,			! Relative line number of select.
    EDT$$A_SEL_BUF : REF TBCB_BLOCK,		! select buffer.
    EDT$$A_SCR_BUF : REF TBCB_BLOCK,		! Screen text buffer control block
    EDT$$G_MESSAGE_LINE : INITIAL (22),		! Change mode message line
    EDT$$G_MSGFLG,				! Indicates a message has been displayed
    EDT$$G_LASTMSG,				! Number of the last message displayed
    EDT$$G_LN_NO,				! current line number.
    EDT$$G_CUR_COL,				! current column
    EDT$$G_CS_LNO,				! cursor line number
    EDT$$G_CS_CHNO,				! character position of cursor
    EDT$$G_CS_OLDCHNO,				! Previous character position of cursor
    EDT$$L_CS_LN : LN_BLOCK,			! relative line number of cursor line.
    EDT$$G_PRV_LN,				! Previous line number.
    EDT$$G_PRV_COL,				! Previous column number.
    EDT$$L_TOP_LN : LN_BLOCK,			! Line number of enforced top line.
    EDT$$A_SEL_POS,				! select position.
    EDT$$L_CUR_SCRLN : LN_BLOCK,		! Current screen record
    EDT$$A_EOB_SCRPTR,				! EOB sceen pointer
    EDT$$A_CSR_SCRPTR,				! Pointer to cursor screen line info
    EDT$$A_FST_SCRPTR,				! Pointer to first screen line info buffer
    EDT$$A_LST_SCRPTR,				! Pointer to last screen line info buffer
    EDT$$A_CUR_SCRPTR,				! Pointer to current screen line info buffer
    EDT$$A_TOP_SCRPTR,				! Pointer to the top screen line
    EDT$$A_BOT_SCRPTR,				! Pointer to the bottom screen line
    EDT$$G_BOT_LINE,				! All screen lines below this one have been erased
    EDT$$G_TOP_RECNO,				! Relative record number of top screen line
    EDT$$G_ANY_CHANGES,				! 0 = no edits since last screen update
    EDT$$A_FST_AVLN;				! Number available screen line blocks

GLOBAL
    EDT$$A_TRN_TBL : VECTOR [K_KPAD_HASHSIZ];	! Hash table of key definitions

GLOBAL
    EDT$$G_ENB_AUTRPT,				! 1 = enable autorepeat manipulation.
    EDT$$G_K_AUTRPT,				! auto repeat indicator.
    EDT$$T_RDAHED : BLOCK [CH$ALLOCATION (K_RDAHED_LEN)],	! Read-ahead buffer
    EDT$$G_RDAHED;				! Number of characters in the buffer

!+
! Global data used by EDTWF
!-

GLOBAL
    EDT$$G_WK_AVAIL,
    EDT$$G_WK_CURBUK,
    EDT$$G_WK_GRTSTBUK,
    EDT$$G_WK_MODFD,
    EDT$$L_WK_NXTLNO : LN_BLOCK,		! Line number following an insert
    EDT$$L_WK_STARTNO : LN_BLOCK,		! Line number of line preceding an insert
    EDT$$L_WK_INSCNT : LN_BLOCK,		! The count of inserted lines
    EDT$$L_WK_RESCNT : LN_BLOCK,		! The count of resequenced lines
    EDT$$A_WK_LN : REF LIN_BLOCK,
    EDT$$A_WK_BUK : REF BLOCK [WF_BUKT_SIZE, BYTE] FIELD (WFB_FIELDS);

!+
! This literal is pointed to when we are at an end of buffer.
!-

GLOBAL BIND
    EDT$$Z_EOB_LN = UPLIT BYTE(0, REP 6 OF (255), REP 6 OF (0));

!+
! Data used by FORMAT
!-

GLOBAL
    EDT$$T_FMT_BUF : BLOCK [CH$ALLOCATION (EDT$$K_FMT_BUFLEN)],
    EDT$$A_FMT_CUR,
    EDT$$G_FMT_LNPOS,
    EDT$$A_FMT_WRRUT,
    EDT$$G_FMT_BOT,				! 1 = formatted output printed on bottom of screen
    EDT$$G_FMT_LCNT;				! Number of lines printed at the bottom of the screen

!+
! Data used by EXEC
!-

GLOBAL
    EDT$$G_EXE_SUBCNT,
    EDT$$G_EXE_QRYQUIT,
    EDT$$G_EXE_SBITS,
    EDT$$Z_EXE_SBLK : REF NODE_BLOCK,
    EDT$$A_EXE_CURCMD : REF NODE_BLOCK;

!+
! Data used by line mode parser
!-

GLOBAL
    EDT$$G_PA_ABO,				! flag indicating to abort parse
    EDT$$G_DEFKEY,				! flag indicating getting a key
    EDT$$A_PA_TBLPTR,				! pointer into the parse table
    EDT$$C_PA_CH,				! the currently being processed character
    EDT$$Z_PA_CURRNG : REF NODE_BLOCK,		! the current range node
    EDT$$Z_PA_THRURNG : REF NODE_BLOCK,		! The currently being built thru type range
    EDT$$G_PA_PCENT,				! Did the keyword contain a percent?
    EDT$$G_PA_ERRNO,				! Error number of parsing error.
    EDT$$G_PA_TOKCLASS,				! class of current token
    EDT$$G_PA_SP,
    EDT$$Z_PA_BUFRNG : REF NODE_BLOCK,
    EDT$$Z_PA_ANDLSTHD : REF NODE_BLOCK,
    EDT$$A_PA_CURTOK,				! start of the current token
    EDT$$G_PA_CURTOKLEN,			! length of current token
    EDT$$A_PA_PRVTOK,				! Previous token address
    EDT$$G_PA_PRVTOKLEN,			! Previous token length
    EDT$$G_PA_CURCMD,
    EDT$$L_PA_NUMVAL : LIN_BLOCK,		! the value of a numeric literal
    EDT$$G_PA_NOQUO,				! 1 = suppress quoted strings when scanning a token
    EDT$$Z_PA_STK : BLOCKVECTOR [NUM_NODES, NODE_SIZE, BYTE] FIELD (NODE_FIELDS);

!+
! Data used by RANGE
!-

GLOBAL
    EDT$$G_RNG_MORELN,				! Used by EDT$$NXT_LNRNG  to indicate more lines.
    EDT$$G_RNG_FRSTLN,				! Indicates first line in a range.
    EDT$$G_RNG_NOOFLN,				! Count of number of lines in a range.
    EDT$$L_RNG_EOL : LN_BLOCK,			! The line number at which this range ends
    EDT$$Z_RNG_CURRNG : REF NODE_BLOCK,		! The current range node
    EDT$$Z_RNG_ORIGPOS : POS_BLOCK,		! To save the position at start of command.
    EDT$$Z_RNG_SAVPOS : POS_BLOCK;		! To save the beginning of range

!+
! Data used by TINPUT
!-

GLOBAL
    EDT$$G_TIN_ECHOFLG,
    EDT$$G_TIN_ECHOPOS,
    EDT$$G_TIN_OBUFPOS,				! Next byte to store in journal buffer
    EDT$$T_TIN_OBUF : VECTOR [256, BYTE],	! Journal file buffer
    EDT$$A_TIN_IBUFPTR,
    EDT$$G_TIN_IRECLEN,
    EDT$$G_TIN_IRECEND,
    EDT$$T_TIN_INREC : BLOCK [CH$ALLOCATION (255)];

!+
! Data used by UTIL
!-

GLOBAL
    EDT$$T_SEA_STR : BLOCK [CH$ALLOCATION (64)],	! Last search string.
    EDT$$G_SEA_STRLEN,				! Length of above.
    EDT$$T_SUB_STR : BLOCK [CH$ALLOCATION (64)],	! Last SUBSTITUTE string.
    EDT$$G_SUB_STRLEN;				! Length of above.

!+
! Data used by IOMOD
!-

GLOBAL
    EDT$$L_IO_VFCHD : BLOCK [CH$ALLOCATION (255)],
    EDT$$Z_WF_DESC : BLOCK [8, BYTE],		! descriptor for workfile
    EDT$$A_IO_FNAM,				! filename in signal arguments
    EDT$$G_IOFI_NFND;				! 1 = the open error was "file not found"

!+
! Data used for callable EDT
!-

%IF %BLISS (BLISS32)
%THEN

GLOBAL
    EDT$$A_XLATE_ROUT,				! address of translation routine
    EDT$$G_XLATE_ENV,				! environment word for translation routine
    EDT$$A_WORK_ROUT,				! address of routine for work i/o
    EDT$$G_WORK_ENV,				! environment word for work i/o routine
    EDT$$A_FILE_ROUT,				! address of routine to use for file i/o
    EDT$$G_FILE_ENV;				! environment word for above

%FI

!+
! define literals for the bit masks of the options word.
! These are made global so that we can make them accessible
! outside of EDT.
!-

GLOBAL LITERAL
    EDT$M_RECOVER = 1,
    EDT$M_COMMAND = 2,
    EDT$M_NOJOURNAL = 4,
    EDT$M_NOOUTPUT = 8,
    EDT$M_NOCOMMAND = 16,
    EDT$M_NOCREATE = 32;

!+
! Prompt strings:
!-

GLOBAL
    EDT$$T_PMT_LINE : VECTOR [32, BYTE],	! Line-mode prompt
    EDT$$T_PMT_KPD : VECTOR [32, BYTE],		! Keypad change-mode prompt
    EDT$$T_PMT_NOKPD : VECTOR [32, BYTE],	! Nokeypad change-mode prompt
    EDT$$T_PMT_HCCHG : VECTOR [32, BYTE],	! Hardcopy change mode prompt
    EDT$$T_PMT_INS : VECTOR [32, BYTE],		! Line-mode insert prompt
    EDT$$T_PMT_INSN : VECTOR [32, BYTE],	! Line-mode insert nonumbers prompt
    EDT$$T_PMT_QUERY : VECTOR [32, BYTE];	! /QUERY prompt

!+
! Define the powers of ten as longword constants, these are used both
! by name, and as a vector having the powers from 0 to 14.  Also define
! other line number related globals.
!-

GLOBAL BIND
    EDT$$L_MAX_LINES = UPLIT WORD(44103, 42949, 0) : VECTOR [3],	! 2814749767
    EDT$$L_LNO_VFCMAX = UPLIT WORD(31072, 34462, 1) : VECTOR [3],	! 6553500000
    EDT$$L_LNO_ZERO = UPLIT WORD(0, 0, 0) : VECTOR [3],
    EDT$$L_LNO_BIG = UPLIT WORD(54880, 65535, 65535) : VECTOR [3],	! 281474976700000
    EDT$$L_LNO_EMPTY = UPLIT WORD(65535, 65535, 65535) : VECTOR [3],	! An initialization
    EDT$$L_LNO0 = UPLIT WORD(1, 0, 0) : VECTOR [3],
    EDT$$L_LNO1 = UPLIT WORD(10, 0, 0) : VECTOR [3],
    EDT$$L_LNO2 = UPLIT WORD(100, 0, 0) : VECTOR [3],
    EDT$$L_LNO3 = UPLIT WORD(1000, 0, 0) : VECTOR [3],
    EDT$$L_LNO4 = UPLIT WORD(10000, 0, 0) : VECTOR [3],
    EDT$$L_LNO5 = UPLIT WORD(34464, 1, 0) : VECTOR [3],
    EDT$$L_LNO6 = UPLIT WORD(16960, 15, 0) : VECTOR [3],
    EDT$$L_LNO7 = UPLIT WORD(38528, 152, 0) : VECTOR [3],
    EDT$$L_LNO8 = UPLIT WORD(57600, 1525, 0) : VECTOR [3],
    EDT$$L_LNO9 = UPLIT WORD(51712, 15258, 0) : VECTOR [3],
    EDT$$L_LNO10 = UPLIT WORD(58368, 21515, 2) : VECTOR [3],
    EDT$$L_LNO11 = UPLIT WORD(59392, 18550, 23) : VECTOR [3],
    EDT$$L_LNO12 = UPLIT WORD(4096, 54437, 232) : VECTOR [3],
    EDT$$L_LNO13 = UPLIT WORD(40960, 20082, 2328) : VECTOR [3],
    EDT$$L_LNO14 = UPLIT WORD(16384, 4218, 23283) : VECTOR [3];

GLOBAL
    EDT$$L_LN_PREV : WORD INITIAL (0),		! Previous VFC line number
    EDT$$L_LN_INCR : VECTOR [3, WORD] INITIAL (WORD (0, 0, 0));	! Current input increment

END

ELUDOM
