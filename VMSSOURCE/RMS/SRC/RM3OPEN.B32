MODULE RM3OPEN (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                organization independent code for indexed file open
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:        	24-MAR-78  13:20
!
!
! MODIFIED BY:
!
!	V03-016	RAS0284		Ron Schaefer		30-Mar-1984
!		Fix STV value on error paths for RMS$_RPL and RMS$_WPL errors.
!
!	V03-015	DAS0001		David Solomon		25-Mar-1984
!		Fix broken branch to RM$ALDBUF.
!
!	V03-014	SHZ0001		Stephen H. Zalewski	27-Feb-1984
!		If you allocate a BDB, you MUST bump the local buffer count
!		(IFB$W_AVLCL).
!
!	V03-013	JWT0141		Jim Teague		11-Nov-1983
!		Oops, IFB$V_RUM changed to IFB$V_ONLY_RU
!
!	V03-012	JWT0140		Jim Teague		11-Nov-1983
!		Must check more than one RU bit, as was done in 
!		V03-010.
!
!	V03-011 MCN0013		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages.
!
!	V03-010	TMK0005		Todd M. Katz		20-Jan-1983
!		Add support for RMS Journalling and Recovery of ISAM files.
!		For $OPEN this boils down to not allowing a prologue 1 or 2 
!		file to be opened if it is marked for any type of journalling.
!
!	V03-009	KBT0464		Keith B. Thompson	13-Jan-1983
!		Get BKS from key descriptors to aviod LCL bugchecks due
!		to wrong file header info
!
!	V03-008	KBT0460		Keith B. Thompson	12-Jan-1983
!		Allocate a buffer for reading in prologue (it use to use
!		the buffer allocated for the fwa)
!
!	V03-007	KBT0225		Keith B. Thompson	23-Aug-1982
!		Reorganize psects
!
!	V03-006	TMK0004		Todd M. Katz		18-Aug-1982
!
!	V03-006	TMK0004		Todd M. Katz		18-Aug-1982
!		Allow prologue 3 files with alternate indicies to be opened.
!
!	V03-005	TMK0003		Todd M. Katz		01-Jul-1982
!		Implement RMS cluster solution for next record positioning. 
!		This emans that RMS no longer has to zero the pointer to the
!		NRP cell in the IFAB, IFB$L_NRP_PTR, because the next record
!		positioning context is now kept locally in the IRAB instead
!		of in a separate systemwide location.
!
!	V03-004	MCN0012		Maria del C. Nasr	29-Jun-1982
!		Allow different key data types for prologue 3 files.
!		This undoes part of TMK0002.
!
!	V03-003	KBT0054		Keith B. Thompson	8-Jun-1982
!		Allocate index blocks on all but BIO or UFO opens
!
!	V03-002	TMK0002		Todd M. Katz		06-May-1982
!		I added code to prevent prologue 3 files with key types
!		other than string and/or alternate indicies from being opened.
!		This code is required for V3A - V3B compatibility, it will go
!		out as a V3.1 patch, and it must be removed for V3B when 
!		alternate data types and indicies are supported. The error that
!		will be returned is: error in prologue version.
!
!		I also fixed up some of the error paths which were not
!		releasing all accessed VBNs of the file before returning
!		their appropriate error.
!
!	V03-001	TMK0001		Todd M. Katz		24-Mar-1982
!		Change all references from IFB$B_KBUFSZ to IFB$W_KBUFSZ.
!
!	V02-020	CDS0005		C D Saether		 5-Feb-1982
!		Back out V02-019.  GBC is now a record attribute.
!
!	V02-019	CDS0004		C D Saether		 3-Jan-1982
!		Return GBC field from prologue.
!
!	V02-018	CDS0003		C D Saether		 9-Aug-1981
!		Use alternate linkage declaration for RELEASE.
!
!	V02-017	CDS0002		C D Saether		16-Jul-1981
!		Remove check for ppf file.
!
!	V02-016	MCN0011		Maria del C. Nasr	05-Jun-1981
!		Make keybuffer size 2 bytes longer for compressed indexes,
!		and primary key.
!
!	V02-015	PSK0002		P S Knibbe		20-Apr-1981
!		Change some variable names
!
!	V02-014	PSK0001		P S Knibbe		17-Mar-1981
!		Change the prologue number check to allow prologue 3
!		Change check_two to make sure that at least two index records
!		can fit into an index bucket.
!
!	V02-013 REFORMAT	R A SCHAEFER		23-Jul-1980	14:09
!		Reformat the source
!
!	V02-012	CDS0001		C D SAETHER		13-MAR-1980
!		fix V011 fix to check bio in ifab, not fab
!
!   	V02-011 RAS0000		Ron Schaefer		27-NOV-79	09:30
!   		Allow BIO access to any device (i.e. magtape), do not read
!		prolog if so.
!
!    	V02-010 CDS0000		Chris Saether,		26-jun-79  17:55
!   		don't allocate stuff if UFO set
!
!****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! define linkages
!
LINKAGE
    L_ALDBUF,
    L_CACHE,
    L_CHKSUM,
    L_FABREG,
    L_LINK_7_10_11,
    L_RELEASE_FAB,
    RL$CHECK_TWO 	= JSB (REGISTER = 6) :
			  GLOBAL (R_FAB,R_IFAB);

! forward routine
!

FORWARD ROUTINE
    RM$OPEN3B 		: RL$FABREG,
    CHECK_TWO		: RL$CHECK_TWO;

! external routines
!
EXTERNAL ROUTINE
    RM$ALDBUF		: RL$ALDBUF ADDRESSING_MODE( LONG_RELATIVE ),
    RM$CHKSUM		: RL$CHKSUM,
    RM$CACHE		: RL$CACHE,
    RM$CLOSE3		: RL$LINK_7_10_11,
    RM$RELEASE		: RL$RELEASE_FAB,
    RM$AL_KEY_DESC	: RL$LINK_7_10_11;


%SBTTL	'RM$OPEN3B'
GLOBAL ROUTINE RM$OPEN3B : RL$FABREG =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!		This routine performs the file open functions that are
!		specific to the indexed file organization, including:
!
!		1 -- reading in the prologue
!			  and setting up various fields in the FAB and IFAB
!		2 -- setting up the index descriptors
!			(linked off the IFAB) and counting the keys
!		3 -- determining the size of the  key buffers
!			and setting kbufsz (IFAB) appropriately
!
!
! CALLING SEQUENCE:
!
!	enters via case branch from RMS$OPEN and jsb from RM$OPEN3
!	returns via rsb to RM$COPRTN.
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!
!	R11	IMPURE AREA address
!	R9	IFAB address
!	R8	FAB address
!	the contents of the FAB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!
!	R10 is the address of the IFAB
!	various fields in the IFAB and FAB are initialized
!	index descriptors are allocated
!
! ROUTINE VALUE:
!
!	standard rms, in particular SUC,PLG,RPL,IFA,KSI,ENV
!
! SIDE EFFECTS:
!
!	May wait quite some time for prologue to become free initially.
!	Allocates index descriptors
!	In the case of an error, key descriptors are deallocated
!	R1 - R5	 may be destroyed
!
!--

    BEGIN

    ! Define common registers
    !
    EXTERNAL REGISTER
	COMMON_FAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    IFAB = .IFAB_FILE;

    ! Have to zero this since it has a conflicting earlier use in the parse
    !
    IFAB [ IFB$L_IDX_PTR ] = 0;

    ! Allocate a BDB in preparation for reading in the prologue.  Even if we
    ! do not use it here, it may be used for XAB processing later on.
    !
    RETURN_ON_ERROR( RM$ALDBUF( 512 ) );		! Get a BDB.
    IFAB[IFB$W_AVLCL] = .IFAB[IFB$W_AVLCL] + 1;		! Bump the local buffer count.

    ! if UFO or BIO open then quit right here before descriptors get allocated
    !
    IF  .FAB [ FAB$V_UFO ] OR .IFAB [ IFB$V_BIO ]
    THEN
	RETURN RMSSUC( SUC );

    ! Read in the prologue 1 block which also has the first key descriptor
    !
    RETURN_ON_ERROR( CACHE( 1,512 ),
			BEGIN
			IF .FAB [FAB$L_STV] EQL 0
			THEN
			    FAB [FAB$L_STV] = .STATUS OR 1^16;
			STATUS = RMSERR (RPL)
			END );

    RETURN_ON_ERROR( RM$CHKSUM() );

    ! Check for correct prologue version
    !
    IF .BKT_ADDR [ PLG$W_VER_NO ] GTRU PLG$C_VER_3
    THEN
	BEGIN
	RM$RELEASE(0);
	RETURN RMSERR( PLV )
	END;

    ! Do not allow this file to be opened if it is a prologue 1 or 2 file, and 
    ! any type of RMS Journalling is enabled.
    !
    IF  .BKT_ADDR[PLG$W_VER_NO] LSSU PLG$C_VER_3
	 AND
	(.IFAB[IFB$V_RU]
		 OR
		.IFAB[IFB$V_ONLY_RU]
		 OR
		.IFAB[IFB$V_AT]
		 OR
		.IFAB[IFB$V_BI]
		 OR
		.IFAB[IFB$V_AI])
    THEN
	BEGIN
	RM$RELEASE(0);
	RETURN RMSERR(ENV);
	END;

    ! We now have a good prologue in memory
    !
    IFAB [ IFB$B_PLG_VER ] = .BKT_ADDR [ PLG$W_VER_NO ];
    IFAB [ IFB$B_AVBN ] = .BKT_ADDR [ PLG$B_AVBN ];
    IFAB [ IFB$B_AMAX ] = .BKT_ADDR [ PLG$B_AMAX ];
    IFAB [ IFB$W_FFB ] = 0;

    ! Allocate and count index descriptors, determine size of key buffers
    !
    BEGIN

    GLOBAL REGISTER
	R_IDX_DFN;

    LOCAL
	IDX_COMPR,
	KEY_DESC	: REF BBLOCK;

    ! Index descriptor for primary key the primary key obviously is the largest
    ! to date, so set kbufsz
    !
    IFAB [ IFB$W_KBUFSZ ] = .BKT_ADDR [ KEY$B_KEYSZ ];

    ! Start off finding the largest bucket size for key 0
    !
    IF .BKT_ADDR [ KEY$B_IDXBKTSZ ] GTRU .BKT_ADDR [ KEY$B_DATBKTSZ ]
    THEN
	IFAB [ IFB$B_BKS ] = .BKT_ADDR [ KEY$B_IDXBKTSZ ]
    ELSE
	IFAB [ IFB$B_BKS ] = .BKT_ADDR [ KEY$B_DATBKTSZ ];

    ! Assume no compression
    !
    IDX_COMPR = 0;

    ! Allocate the primary key descriptor
    !
    RETURN_ON_ERROR( RM$AL_KEY_DESC( .BKT_ADDR,1,0 ), RM$RELEASE(0) );

    IFAB [ IFB$B_NUM_KEYS ] = 1;

    KEY_DESC = .BKT_ADDR;

    RETURN_ON_ERROR( CHECK_TWO(),
		     BEGIN
		     RM$CLOSE3();
		     RM$RELEASE(0)
		     END );

    ! If the index or primary key is compressed, set flag.
    !
    IF .KEY_DESC [ KEY$V_IDX_COMPR ] OR .KEY_DESC [ KEY$V_KEY_COMPR ]
    THEN
	IDX_COMPR = 1;

    ! Get index descriptors for all other keys, block by block
    !
    WHILE .KEY_DESC [ KEY$L_IDXFL ] NEQ 0
    DO
	BEGIN

	LOCAL
	    VBN,
	    OFFSET;

	! Save the vbn and the offset which is in this block
	!
	VBN = .KEY_DESC [ KEY$L_IDXFL ];
	OFFSET = .KEY_DESC [ KEY$W_NOFF ];

	! Release current block and the new one
	!
	RETURN_ON_ERROR( RM$RELEASE(0) );

	RETURN_ON_ERROR( CACHE( .VBN,512 ),
			BEGIN
			IF .FAB [FAB$L_STV] EQL 0
			THEN
			    FAB [FAB$L_STV] = .STATUS OR 1^16;
			STATUS = RMSERR (RPL)
			END );


	RETURN_ON_ERROR( RM$CHKSUM() );

	! Loop for all of the key descriptors in this block
	!
	DO
	    BEGIN

	    ! Set the pointer to the new key descriptor
	    !
	    KEY_DESC = .BKT_ADDR + .OFFSET;

	    RETURN_ON_ERROR( CHECK_TWO(), 
			     BEGIN
			     RM$CLOSE3();
			     RM$RELEASE(0)
			     END );

	    ! We have a good one so count it
	    !
	    IFAB [ IFB$B_NUM_KEYS ] = .IFAB [ IFB$B_NUM_KEYS ] + 1;

	    ! Set the largest key size
	    !
	    IF .KEY_DESC [ KEY$B_KEYSZ ] GTRU .IFAB [ IFB$W_KBUFSZ ]
	    THEN
		IFAB [ IFB$W_KBUFSZ ] = .KEY_DESC [ KEY$B_KEYSZ ];

	    ! Set the largest bucket size
	    !
	    IF .KEY_DESC [ KEY$B_IDXBKTSZ ] GTRU .IFAB [ IFB$B_BKS ]
	    THEN
		IFAB [ IFB$B_BKS ] = .KEY_DESC [ KEY$B_IDXBKTSZ ];

	    IF .KEY_DESC [ KEY$B_DATBKTSZ ] GTRU .IFAB [ IFB$B_BKS ]
	    THEN
		IFAB [ IFB$B_BKS ] = .KEY_DESC [ KEY$B_DATBKTSZ ];

	    ! This index descriptor is ok so allocate one in memory
	    !
	    RETURN_ON_ERROR( RM$AL_KEY_DESC( .KEY_DESC,.VBN,.OFFSET ),
			     RM$RELEASE(0) );

	    ! If there is compression on note it
	    !
	    IF .KEY_DESC [ KEY$V_IDX_COMPR ]
	    THEN
		IDX_COMPR = 1;

	    ! Get the offset to the next key descriptor
	    !
	    OFFSET = .KEY_DESC [ KEY$W_NOFF ]

	    END

	! Leave the loop if the next key descriptor is in another block
	!
	UNTIL .KEY_DESC [ KEY$L_IDXFL ] NEQ .VBN

	END;

    ! If any of the keys have the index compressed, then increase the buffer
    ! size by two bytes, to store the length and compression counts.
    !
    IF .IDX_COMPR
    THEN
	IFAB [ IFB$W_KBUFSZ ] = .IFAB [ IFB$W_KBUFSZ ] + 2

    END;

    RETURN_ON_ERROR( RM$RELEASE(0) );

    RETURN RMSSUC()

    END;


%SBTTL	'CHECK_TWO'
ROUTINE CHECK_TWO ( KEY_DESC : REF BBLOCK ) : RL$CHECK_TWO =
!++
!
! FUNCTIONAL DESCRIPTION:
!
! 	Check to make sure that at least two records will fit in
!	each index. if not don't even let the user open the file
!	since it will only lead to trouble later
!	note: create does check this but rms-11 doesn't
!	if we release w/ a new rms-11 that does there would be no way of
!	creating such files and we could take the check out
!
! CALLING SEQUENCE:
!
!	CHECK_TWO( KEY_DESC )
!
! INPUT PARAMETERS:
!
!	KEY_DESC -- pointer to the on-disk key descriptor
!
! IMPLICIT INPUTS:
!
!	FAB -- so that in case of an error, the guilty key of reference
!		can be passed back in the stv
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!
!	KSI if two keys will not fit in the index
!	rmssuc if they will
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_FAB_STR;

    ! Make sure at least 2 keys will fit in the index level
    !
    LOCAL
	KEYSZ,		! Size of key
	BYTES;		! Number of bytes available in bucket

    BYTES = ( .KEY_DESC [ KEY$B_IDXBKTSZ ] * 512 ) - BKT$C_OVERHDSZ - 1;
    KEYSZ = .KEY_DESC [ KEY$B_KEYSZ ];

    IF .IFAB [ IFB$B_PLG_VER ] LSSU PLG$C_VER_3
    THEN
	BEGIN
	IF 2 * ( .KEYSZ + 2 + IRC$C_IDXPTRBAS + IRC$C_IDXOVHDSZ) GTRU .BYTES
	THEN
	    BEGIN
	    FAB [ FAB$L_STV ] = .KEY_DESC [ KEY$B_KEYREF ];
	    RETURN RMSERR(KSI);
	    END;
	END
    ELSE
	BEGIN

	BYTES = .BYTES - 3;

	IF .KEYSZ LEQU KEY$C_MAX_INDEX
	THEN
	    BEGIN  ! fixed index record

	    IF 2 * ( .KEYSZ + 4 ) GTRU .BYTES
	    THEN
		BEGIN
		FAB [ FAB$L_STV ] = .KEY_DESC [ KEY$B_KEYREF ];
		RETURN RMSERR(KSI);
		END;
	    END
	ELSE
	    BEGIN  ! variable index records

	    IF 2 * ( .KEYSZ + 4 + 2 ) GTRU .BYTES
	    THEN
		BEGIN
		FAB [ FAB$L_STV]  = .KEY_DESC [ KEY$B_KEYREF ];
		RETURN RMSERR(KSI);
		END;
	    END;	    	
	END;

    RETURN RMSSUC()

    END;

END

ELUDOM
