 	.title	pli$recopt - pl1 runtime record io option processing
	.ident	/1-003/					; Edit WHM1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the pl1 runtime routines for processing the
;	common options for record i/o statements.
;
; author: c. spitz 7-feb-80
;
; modified:
;
;	Bill Matthews 22-Sep-81
;
;		Fix so that routine pli$$recidfrom does return with the
;		Z condition code bit clear if an rfa is specified.
;
;
;	1-003	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--


;
; external definitions
;
	$deffcb				;define file control block offsets
	$defstk				;define runtime stack
	$defdat				;define operand data types
	$defkcb				;define key control block offsets
	$fabdef				;define fab offsets
	$rabdef				;define rab offsets

;
; local data
;

	rtshare				;sharable



	.page
;++
;pli$$keyto
; this routine uses the current key number to determine the data type of
; the key of reference and its position in the record. it allocates space
; on the stack for a temporary, if the key is segmented, and 'unsegments'
; the key. finally, the key is converted to the keyto destination.
;	r0 - addr of keyto descr
;		0(r0) - addr of keyto
;		4(r0) - size/prec of keyto
;		8(r0) - data type of keyto
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs:
;	r5,r6,r7,r8 - destroyed
;--

	.enabl	lsb
pli$$keyto_r8::
	movl	(sp),r6			;save return addr
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),140$ ;if blockio, cont
	bbc	#atr_v_indexed,r3,110$	;if indexed,
	movzbl	rab$b_krf(r4),r5	;get current key of ref
	mull	#kcb_c_len,r5		;get index to correct kcb
	addl	fcb_l_kcb(r2),r5	;
	cmpl	#dat_k_char,kcb_l_dtyp(r5) ;character key?
	bneq	60$			;if neq, no
	subl	#252,sp			;get room for largest key possible
	pushl	sp			;set addr of temp
	pushr	#^m<r0,r2,r3,r4,r5>	;save regs
	movab	24(sp),r3		;get start addr of temp
	movl	rab$l_ubf(r4),r7	;get addr of buffer
	movab	kcb_w_pos0(r5),r8	;get addr of pos0 in kcb
10$:	movzwl	(r8)+,r1		;get position in record
	addl	r7,r1			;add in addr of buffer
	tstw	(r8)			;any thing left?
	beql	20$			;if eql, no
	movc3	(r8)+,(r1),(r3)		;copy this segment
	brb	10$			;go again
20$:	popr	#^m<r0,r2,r3,r4,r5>	;restore regs
	brb	100$			;cont
60$:	movzwl	kcb_w_pos0(r5),-(sp)	;push position in buffer of key
	addl	rab$l_ubf(r4),(sp)	;add in buffer addr
100$:	pushl	#0			;set dst offset
	pushl	4(r0)			;set dst prec
	pushl	8(r0)			;set dst data type
	pushl	r0			;set addr of addr of dst
	pushl	#0			;set src offset
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),130$ ;if blockio, cont
	bbc	#atr_v_indexed,r3,130$	;if indexed
	pushl	kcb_l_prec(r5)		;set src prec
	pushl	kcb_l_dtyp(r5)		;set src data type
120$:	pushab	28(sp)			;set addr of addr of src
	pushl	#8			;set number of args
	bsbw	key_cvrt		;convert key into keyto, checking error
sigerr:	jmp	(r6)			;return
110$:	pushab	rab$l_bkt(r4)		;set addr of key
	brb	100$			;cont
130$:	pushl	#31			;set prec of src
	pushl	#dat_k_fix_bin		;set data type of src
	brb	120$			;cont
140$:	pushab	rab$w_rfa(r4)		;set addr of key
	brb	100$			;cont
	.dsabl	lsb

;++
; pli$$key_hnd
; this routine is the condition handler for pli$$readkey and pli$writekey.
; it is jsb'd to from an entry mask that lies within the file control
; block. This vectoring is necessary, in order to easily get the address of the
; file control block.  After calculating the address of the file control
; block, this routine sets the error code in fab$l_error.
;
; inputs:
;	0(sp) - address of byte following jsb instruction in fcb.
; outputs:
;	none
;--

pli$$key_hnd::
	subl3	#fcb_l_cndaddr+4,(sp),r0 ;get fcb address
	movab	fcb_l_condit(r0),(sp)	;get addr of handler
	movl	fp,r0			;start with this frame
10$:	movl	r0,r2			;save stack frame
	movl	stk_l_fp(r0),r0		;address next frame
	probew	#3,#stk_l_pc,(r0)	;frame accessible?
	beql	30$			;if eql then end of stack found, return
	cmpl	(sp),stk_l_cnd_hnd(r0)	;this frame's handler us?
	bneq	10$			;if neq, no, look at next frame
	clrl	stk_l_cnd_hnd(r0)	;we aren't needed anymore
	movl	r0,r1			;set addr of frame to return to
	movl	stk_l_pc(r2),r0		;set addr of pc to return to
	movl	sp,stk_l_ap(r2)		;set non-zero for status
	jmp	g^pli$goto		;return
30$:	movl	#ss$_resignal,r0	;set to resignal
	ret				;return

;++
;pli$$readkey
; this routine uses the current key number to determine the data type of
; the key of reference. it then allocates space on the stack to store a
; temporary of this data type. it converts the source key to the temporary
; and stores the key address and size in the rab.
; inputs:
;	r0 - addr of key descr
;		0(r0) - addr of key
;		4(r0) - size/prec of key
;		8(r0) - data type of key
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs:
;	r6 is destroyed
;--

pli$$readkey_r6::
	movl	(sp),r6			;save return addr
	bbc	#atr_v_indexed,r3,100$	;if indexed,
	movzbl	rab$b_krf(r4),r1	;get current key of ref
	cmpb	r1,fcb_b_numkcbs(r2)	;legal key number?
	blequ	10$			;if lequ, yes
	movl	#pli$_invindnum,r0	;set invalid key number
	brw	fail			;and fail
10$:	mull	#kcb_c_len,r1		;get index to correct kcb
	addl	fcb_l_kcb(r2),r1	;
	subl	#252,sp			;get room for largest key possible
	pushl	sp			;set addr of dst
	pushl	#0			;set dst offset to zero
	pushl	kcb_l_prec(r1)		;set dst prec
	pushl	kcb_l_dtyp(r1)		;set dst data type
	movb	kcb_w_len0(r1),rab$b_ksz(r4) ;set size of key in rab if not char
	cmpl	#dat_k_char,kcb_l_dtyp(r1) ;character key?
	bneq	110$			;if neq, no
	movb	kcb_l_prec(r1),rab$b_ksz(r4) ;set size of key in rab
	brb	110$			;cont in common
100$:	pushl	sp			;set addr of dst
	pushl	#0			;set dst offset to zero
	pushl	#31			;set dst prec
	pushl	#dat_k_fix_bin		;set dst data type
	movb	#4,rab$b_ksz(r4)	;set size of key in rab
110$:	pushab	12(sp)			;set dst addr
	pushl	#0			;set src offset
	pushl	4(r0)			;set src prec
	pushl	8(r0)			;set src data type
	pushl	r0			;set addr of addr of src
	movl	r0,r3			;copy key descr addr of onkey
	pushl	#8			;set number of args
	bsbw	key_cvrt		;convert src to key data type
	movab	40(sp),sp		;clean stack
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),130$ ;if blockio, cont
	movl	sp,rab$l_kbf(r4)	;set key buffer addr in rab
	movb	#rab$c_key,rab$b_rac(r4) ;set keyed access in rab
	jmp	(r6)			;return
130$:	popl	rab$l_bkt(r4)		;set virt block num for block io
	jmp	(r6)			;return;

key_cvrt:
	pushl	ap			;save ap
	clrl	ap			;set up status temp for handler
	movab	fcb_l_condit(r2),(fp)	;set up condition handler
	callg	8(sp),g^pli$cvrt_any	;do the conversion
	clrl	(fp)			;we don't need handler anymore
	tstl	ap			;conversion fail?
	bneq	10$			;if neq, yes, do onkey
	popl	ap			;restore ap
	rsb				;return
10$:	movab	sigerr,r0		;get return addr for keyto conversion
	cmpl	4(sp),r0		;should we signal error?
	bneq	20$			;if neq, no, do onkey
15$:	movl	#pli$_cnverr,r0		;set conversion error
	brw	fail			;and fail
20$:	cmpl	#dat_k_char,32(sp)	;were we converting to char?
	beql	15$			;if eql, yes, it failed once, so no
					;onkey value will be returned
	movl	#dat_k_char_var,32(sp)	;set for char var dest
	movl	#256,36(sp)		;set for length of 256
	subl	#258,sp			;get room for char temp
	movl	sp,258+44(sp)		;set addr of dest
	callg	258+8(sp),g^pli$cvrt_any ;convert it to char var
	pushl	sp			;set addr of onkey value
	pushl	r2			;set fcb address
	pushl	#pli$_cnverr		;set conversion error
	pushl	#pli$_key		;set key condition
	calls	#4,g^pli$io_error	;signal condition
	ret				;return

;++
;pli$$chk_keycnd
; this routine checks the rms rab for status that should be signaled as
; the pl1 key condition. if such a status is found, the onkey value is
; calculated, and io_error is called to signal the key condition.
; inputs:
;	r0 = error sub-code
;	r2 = fcb address
;	r3 = address of key descriptor
;	r4 = rab address
; outputs:
;	none
;--

pli$$chk_keycnd::
	cmpl	#pli$_rmsr,r0		;rab error?
	beql	20$			;if eql, yes, cont
10$:	rsb				;return
20$:	tstl	r3			;key specified?
	beql	10$			;if eql, no, just return
	tstl	(r3)			;key addr specified?
	beql	10$			;if eql, no, just return
	cmpl	#rms$_rnf,rab$l_sts(r4)	;record not found?
	beql	30$			;if eql, yes, raise key
	cmpl	#rms$_key,rab$l_sts(r4)	;key error?
	beql	30$			;if eql, yes, raise key
	cmpl	#rms$_mrn,rab$l_sts(r4)	;max rec num exceeded?
	beql	30$			;if eql, yes, raise key
	cmpl	#rms$_dup,rab$l_sts(r4) ;duplicate key?
	beql	30$			;if eql, yes, raise key
	cmpl	#rms$_rex,rab$l_sts(r4) ;record already exists?
	bneq	10$			;if neq, no, just return
30$:	subl	#258,sp			;get room for vcha temp
	pushl	sp			;set addr of dest
	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_key		;set key condition
	pushl	#0			;set dest offset
	pushl	#256			;set dest size
	pushl	#dat_k_char_var		;set dest data type
	pushab	24(sp)			;set addr of addr of dest
	pushl	#0			;set src offset
	pushl	4(r3)			;set src prec
	pushl	8(r3)			;set src data type
	pushl	r3			;set addr of addr of src
	calls	#8,g^pli$cvrt_any	;convert key to vcha
	calls	#4,g^pli$io_error	;signal the condition
	ret				;return

;++	
;pli$$writekey
; this routine uses the current key number to determine the data type of
; the key of reference and its position within the record if the file is
; indexed.  it allocates space on the stack to store a temporary for relative
; file keys. it converts the source key to the temporary (or directly into
; the record to be written) and stores the key address and size in the rab.
; the key number option must have been processed as well as the from reference
; before this routine is called
; inputs:
;	r0 - addr of key descr
;		0(r0) - addr of key
;		4(r0) - size/prec of key
;		8(r0) - data type of key
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs:
;	r3,r5,r6,r7,r8 - destroyed
;--

pli$$writekey_r8::
	movl	(sp),r6			;save return addr
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),100$ ;if blockio, cont
	bbc	#atr_v_indexed,r3,100$	;if indexed,
	movzbl	rab$b_krf(r4),r5	;get current key of ref
	cmpb	r5,fcb_b_numkcbs(r2)	;legal key number?
	blequ	10$			;if lequ, yes
	movl	#pli$_invindnum,r0	;set invalid key number
	brw	fail			;and fail
10$:	mull	#kcb_c_len,r5		;get index to correct kcb
	addl	fcb_l_kcb(r2),r5	;
	subl	#252,sp			;get room for largest key possible
	pushl	sp			;set addr of dst
	pushl	#0			;set dst offset to zero
	pushl	kcb_l_prec(r5)		;set dst prec
	pushl	kcb_l_dtyp(r5)		;set dst data type
	brb	110$			;cont in common
100$:	pushl	sp			;set addr of dst
	pushl	#0			;set dst offset to zero
	pushl	#31			;set dst prec
	pushl	#dat_k_fix_bin		;set dst data type
110$:	pushab	12(sp)			;set dst addr
	pushl	#0			;set src offset
	pushl	4(r0)			;set src prec
	pushl	8(r0)			;set src data type
	pushl	r0			;set addr of addr of src
	movl	r0,r3			;copy key descr addr for onkey
	pushl	#8			;set number of args
	bsbw	key_cvrt		;convert src to key data type
	movab	40(sp),sp		;clean stack
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),300$ ;if blockio, cont
	bbc	#atr_v_indexed,fcb_l_attr(r2),200$ ;if indexed
	cmpl	#dat_k_char,kcb_l_dtyp(r5) ;character key?
	bneq	160$			;if neq, no
	pushr	#^m<r2,r3,r4>		;save regs
	movab	12(sp),r1		;get start addr of key
	movl	kcb_l_prec(r5),r0	;get total length of key
	movb	r0,rab$b_ksz(r4)	;set size in rab
	movl	rab$l_rbf(r4),r7	;get addr of buffer
	movab	kcb_w_pos0(r5),r8	;get addr of pos0 in kcb
120$:	movzwl	(r8)+,r3		;get position in record
	addl	r7,r3			;add addr of buffer
	movc5	r0,(r1),#^x20,(r8)+,(r3) ;copy this segment
	bgtru	120$			;if gtru, more to do, go again
	popr	#^m<r2,r3,r4>		;restore regs
	brb	210$			;cont	
160$:	movzwl	kcb_w_pos0(r5),r1	;get position in buffer
	addl	rab$l_rbf(r4),r1	;add in addr of buffer
	pushr	#^m<r2,r3,r4>		;save regs
	movb	kcb_w_len0(r5),rab$b_ksz(r4) ;set size of key in rab
	movc3	kcb_w_len0(r5),12(sp),(r1) ;copy key to buffer
	popr	#^m<r2,r3,r4>		;restore regs
	brb	210$			;cont
200$:	movb	#4,rab$b_ksz(r4)	;set size of key in rab
210$:	movl	sp,rab$l_kbf(r4)	;set key buffer addr in rab
	movb	#rab$c_key,rab$b_rac(r4) ;set keyed access in rab
	jmp	(r6)			;return
300$:	popl	rab$l_bkt(r4)		;set lbn for block io
	jmp	(r6)			;return
	.enabl	lsb

;++
;pli$$keynum
; inputs
;	r0 - addr of keynum option
;	r1 - addr of key option
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs
;	r1 - addr of key option
;--

pli$$keynum::
	tstl	r0			;keynum passed?
	beql	90$			;if eql, no, just return
	bbs	#atr_v_indexed,r3,20$	;if indexed, cont
10$:	movl	#pli$_notindexed,r0	;set not indexed file
	brw	fail			;and fail
20$:	bbs	#atr_v_keyed,r3,40$	;if keyed, cont
30$:	movl	#pli$_notkeyd,r0	;set not keyed file
	brw	fail			;and fail
40$:	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),45$ ;if not blockio, cont
42$:	movl	#pli$_conblokio,r0	;set conflicting block io
	brw	fail			;and fail
45$:	tstl	r1			;key specified?
	bneq	60$			;if neq, yes, cont
50$:	movl	#pli$_nokey,r0		;set no key specified
	brw	fail			;and fail
60$:	movzwl	(r0),r0			;get key number
	bgeq	80$			;if geq, cont
70$:	movl	#pli$_invindnum,r0	;set invalid key number
	brw	fail			;and fail
80$:	movzbl	fcb_b_numkcbs(r2),-(sp)	;get highest key number + 1
	cmpl	r0,(sp)+		;key num too big?
	bgeq	70$			;if geq, then yes, fail
	movb	r0,rab$b_krf(r4)	;set key of ref in rab
90$:	rsb

;++
;pli$$matchgtr
; inputs:
;	r0 - addr of match_greater
;	r1 - addr of key
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs:
;	r1 - addr of key
;--

pli$$matchgtr::
	pushl	#rab$v_kgt		;set field index of key greater
	brb	100$			;cont in common

;++
;pli$$matchgeq
; inputs:
;	r0 - addr of match_greater_eql
;	r1 - addr of key
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs
;	r1 - addr of key
;--

pli$$matchgeq::
	pushl	#rab$v_kge		;set field index of key greater
100$:
	tstl	r0			;match gtr specified?
	beql	110$			;if eql, no, just return
	bbc	#atr_v_keyed,r3,30$	;if not keyed file, fail
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),42$ ;if blockio, fail
	tstl	r1			;key specified?
	beql	50$			;if eql, no, fail
	insv	(r0),(sp),#1,rab$l_rop(r4) ;set match greater or greatereql
110$:	movab	4(sp),sp		;remove index
	rsb				;return

;++
;pli$$valrecidto
; inputs:
;	r0 - addr of record id to
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
;--

pli$$valrecidto::
	tstl	r0			;record id to specified?
	beql	120$			;if eql, no, just return
	bbs	#atr_v_recidacc,r3,120$ ;if rec id, cont
115$:	movl	#pli$_recid,r0		;set not record id file
	brw	fail			;and fail
120$:	rsb				;return

;++
;pli$$recidfrom
; inputs:
;	r0 - addr of record id from
;	r1 - addr of key
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs:
;	condition code z bit is clear if rfa from specified
;--

pli$$recidfrom::
	tstl	r0			;record id from specified?
	beql	120$			;if eql, no, just return
	bbc	#atr_v_recidacc,r3,115$ ;if not recid, fail
	tstl	r1			;key also specified?
	beql	130$			;if eql, no, cont
	movl	#pli$_recidkey,r0	;set record id and key conflict
	brw	fail			;and fail
130$:	movq	(r0),rab$w_rfa(r4)	;set recid in rab
	movb	#rab$c_rfa,rab$b_rac(r4) ;set for rfa access in rab
	clrb	rab$b_krf(r4)		;reset key of ref in rab
	bicpsw	#4			;clear condition code Z bit
	rsb				;return

;++
;pli$$fxdctlfrom
; inputs:
;	r0 - addr of fixed control from descr. 0(r0) is the addr, 4(r0)
;		is word size/prec, 6(r0) is word data type
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
;--

pli$$fxdctlfrom::
	clrl	rab$l_rhb(r4)		;assume not specified
	pushl	(r0)			;save addr of fixed ctl
	beql	150$			;if eql, none specified
	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),134$ ;if not blockio, cont
133$:	movl	#pli$_conblokio,r0	;set conflicts with blockio
	brw	fail			;and fail
134$:	cmpw	#dat_k_char_var,6(r0)	;is it char var?
	bneq	135$			;if neq, no
	movzwl	@(r0),r1		;get current size
	brb	137$			;cont
135$:	pushl	4(r0)			;set size, datatyp for bysize
	calls	#1,g^pli$$bytesize	;get size
	blbc	r0,139$			;if lbc, fail
137$:	tstl	r1			;anything there?
	bleq	150$			;if leq, no, just return
	movzbl	<fcb_b_fab+fab$b_fsz>(r2),r0 ;get fixed control size
	cmpl	r0,r1			;enuf room?
	beql	140$			;if geq, yes, cont
	movl	#pli$_fxcsiz,r0		;set fixed control wrong size
139$:	brb	fail			;and fail
140$:	popl	rab$l_rhb(r4)		;set addr in rab
	rsb				;return
150$:	movab	4(sp),sp		;clean stack
	rsb				;return

;++
;pli$$fxctlto_r6
; inputs:
;	r0 - addr of fixed control to descr. 0(r0) is addr, 4(r0) is
;		word size/prec, 6(r0) is word data type
;	r2 - addr of fcb
;	r3 - fcb_l_attr
;	r4 - addr of rab
; outputs
;	r6 is destroyed
;--

pli$$fxctlto_r6::
	clrl	rab$l_rhb(r4)		;assume not specified
	movl	r0,r6			;save addr of fixed ctl descr
	tstl	(r0)			;address specified?
	beql	160$			;if eql, no, just return
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),133$ ;if blockio, fail
	pushl	4(r0)			;set size, datatyp for bysize
	calls	#1,g^pli$$bytesize	;get size
	blbc	r0,fail			;if lbc, fail
	tstl	r1			;anything there?
	bleq	160$			;if leq, no, just return
	movzbl	<fcb_b_fab+fab$b_fsz>(r2),r0 ;get fixed control size
	cmpw	#dat_k_char_var,6(r6)	;char var dest?
	bneq	170$			;if neq, no
	cmpl	r0,r1			;enuf room?
	bgtr	172$			;if gtr, no
	movl	(r6),r1			;get addr of dest
	movw	r0,(r1)+		;set size to length of fixed control
	movl	r1,rab$l_rhb(r4)	;set addr in rab
	rsb				;return
170$:	cmpl	r0,r1			;right size?
	beql	175$			;if eql, yes, cont
172$:	movl	#pli$_fxcsiz,r0		;set fixed control wrong size
	brb	fail			;and fail
175$:	cmpw	#<dat_k_structure+64>,6(r6) ;bit sized structure?
	bneq	176$			;if neq, no, cont
	popl	r0			;get ret addr
	subl	r1,sp			;get size for temp on stack
	movl	sp,rab$l_rhb(r4)	;set addr of temp
	jmp	(r0)			;return
176$:	movl	(r6),rab$l_rhb(r4)	;set addr in rab
160$:	rsb				;return
	
	.dsabl lsb

fail:	pushl	r2			;push fcb addr
	pushl	r0			;push error code
	pushl	#pli$_error		;push error condition
	calls	#3,g^pli$io_error	;signal the error
	ret				;

	.end
