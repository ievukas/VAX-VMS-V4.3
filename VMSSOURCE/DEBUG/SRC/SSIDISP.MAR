	.TITLE	SSI_SYS_DISP - user system service dispatcher
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
; Abstract:
;	This module is the interface routine for privileged shareable
;       image DBGSSISHR.EXE.  DBGSSISHR defines the dispatcher and 
;	calls the routines to set up system service interception.
;
; Modified by:
;       Ping Sager
;
; Origin:
;       SYS$SYSROOT:[SYSHLP.EXAMPLES]USSDISP.MAR
;	This module contains an example dispatcher for user written
;	system services along with several sample services and a user
;	rundown example.  It is a template intend to serve as the starting
;	point for implementing a privileged shareable image containing your
;	own services.  When used as a template, the definitions and code
;	for the sample services should be removed.
;
; Overview:
;	User written system services are contained in privileged shareable
;	images that are linked into user program images in exactly the
;	same fashion as any shareable image.  The creation and installation
;	of a privileged, shareable image is slightly different from that
;	of an ordinary shareable image.  These differences are:
;
;		1. A vector defining the entry points and providing other
;		   control information to the image activator.  This vector
;		   is a the lowest address in an image section with the VEC
;		   attribute.
;
;		2. The shareable image is linked with the /PROTECT option
;		   that marks all of the image sections so that they will
;		   protected and given EXEC mode ownership by the image
;		   activator.
;
;		3. The shareable image MUST be installed /SHARE /PROTECT
;		   with the INSTALL utility in order for the image activator
;		   to connect the privileged shareable image to the change mode
;		   dispatchers.
;
;	A privileged shareable image implementing user written system services
;	is comprised of the following major components:
;
;		1. A transfer vector containing all of the entry points and
;		   collecting them at the lowest virtual address in the shareable
;		   image.  This formalism enables revision of the shareable
;		   image without necessitating the relinking of images that
;		   use it.
;
;		2. A Privileged Library Vector in a PSECT with the VEC attribute
;		   that describes the entry points for dispatching EXEC and
;		   KERNEL mode services along with validation information.
;
;		3. A dispatcher for kernel mode services.  This code will 
;		   be called by the VMS change mode dispatcher when it
;		   fails to recognize a kernel mode service request.
;
;		4. A dispatcher for executive mode services.  This code will
;		   be called by the VMS change mode dispatcher when it fails
;		   to recognize an executive mode service request.
;
;		5. Service routines to perform the various services.
;
;	The first four components are contained in this template and are
;	most easily implemented in MACRO, while the service routines can
;	be implemented in BLISS or MACRO. Other languages may be usable
;	but are not recommended -- particularly if they require runtime
;	support routines or are extravagant in their use of stack or are
;	unable to generate PIC code.
;
;	This example is position-independent (PIC) and it is good practice
;	to implement shareable images this way whenever possible.
;--
;
; Link Command File Example:
;
;	$!
;	$!	Command file to link User System Service example.
;	$!
;	$ LINK/PROTECT/NOSYSSHR/SHARE=USS/MAP=USS/FULL SYS$INPUT/OPTIONS
;	!
;	!	Options file for the link of User System Service example.
;	!
;		SYS$SYSTEM:SYS.STB/SELECTIVE
;	!
;	!	Create a separate cluster for the transfer vector.
;	!
;	CLUSTER=TRANSFER_VECTOR,,,SYS$DISK:[]USSDISP
;	!
;	GSMATCH=LEQUAL,1,1
;
;--
	.PAGE
	.SBTTL	Declarations and Equates
;
;	Include Files
;

    	.EXTERNAL SSIK_START
    	.EXTERNAL SSIU_START

    	$PRVDEF
    	$PSLDEF
    	$OPDEF


;
;	Macro Definitions
;
;	DEFINE_SERVICE - A macro to make the appropriate entries in several
;			 different PSECTs required to define an EXEC or KERNEL
;			 mode service.  These include the transfer vector,
;			 the case table for dispatching, and a table containing
;			 the number of required arguments.
;
;	DEFINE_SERVICE Name,Entry_Point,Number_of_Arguments,Mode
;
	.MACRO	DEFINE_SERVICE,NAME,ENTRY,NARG=0,MODE=KERNEL
	.PSECT	$$$TRANSFER_VECTOR,PAGE,NOWRT,EXE,PIC
	.ALIGN	QUAD			; Align entry points for speed and style
;	.TRANSFER	NAME		; Define name as universal symbol for entry
NAME::					; Use entry mask defined in main routine
    	.MASK   ENTRY
	.IF	IDN MODE,KERNEL
	CHMK	#<KCODE_BASE+KERNEL_COUNTER> ; Change to kernel mode and execute
	RET				; Return
	KERNEL_COUNTER=KERNEL_COUNTER+1	; Advance counter

	.PSECT	KERNEL_NARG,BYTE,NOWRT,EXE,PIC
	.BYTE	NARG			; Define number of required arguments

	.PSECT	USER_KERNEL_DISP1,BYTE,NOWRT,EXE,PIC
	.WORD	2+ENTRY-KCASE_BASE	; Make entry in kernel mode CASE table
    	.ENDC

	.IF	IDN MODE,USER
    	JMP	ENTRY+2

	.PSECT	USER_NARG,BYTE,NOWRT,EXE,PIC
	.BYTE	NARG			; Define number of required arguments
    	.ENDC

    	.ENDM   DEFINE_SERVICE


;
;	Equated Symbols
;

	$PHDDEF				; Define process header offsets
	$PLVDEF				; Define PLV offsets and values
	$SSDEF				; Define system status code
;
;	Initialize counters for change mode dispatching codes
;
KERNEL_COUNTER=0			; Kernel code counter

;
;	Own Storage
;
	.PSECT	KERNEL_NARG,BYTE,NOWRT,EXE,PIC
KERNEL_NARG:				; Base of byte table containing the
					;  number of required arguments.

    	.PSECT	USER_NARG,BYTE,NOWRT,EXE,PIC
USER_NARG:

	.PAGE
	.SBTTL	Transfer Vector and Service Definitions
;++
; The use of transfer vectors to effect entry to the user written system services
; enables some updating of the shareable image containing them without necessitating
; a re-link of all programs that call them.  The PSECT containinng the transfer
; vector will be positioned at the lowest virtual address in the shareable image
; and so long as the transfer vector is not re-ordered, programs linked with
; one version of the shareable image will continue to work with the next.
;
; Thus as additional services are added to a privileged shareable image, their
; definitions should be added to the end of the following list to ensure that
; programs using previous versions of it will not need to be re-linked.
; To completely avoid relinking existing programs the size of the privileged
; shareable image must not change so some padding will be required to provide
; the opportunity for future growth.
;--
	DEFINE_SERVICE	SSI_USSK,INT_SSI_USSK,1,KERNEL
						; Service to setup intercept
    						;  system service

    	DEFINE_SERVICE  SSI_USSU,INT_SSI_USSU,4,USER
    						; Set up to use intercept
    						;  systerm service in user mode

;
; The base values used to generate the dispatching codes should be negative for
; user services and must be chosen to avoid overlap with any other privileged
; shareable images that will be used concurrently.  Their definition is
; deferred to this point in the assembly to cause their use in the preceding
; macro calls to be forward references that guarantee the size of the change
; mode instructions to be four bytes.  This satisfies an assumption that is
; made by for services that have to wait and be retried.  The PC for retrying
; the change mode instruction that invokes the service is assumed to be 4 bytes 
; less than that saved in the change mode exception frame.  Of course, the particular 
; service routine determines whether this is possible.
;
KCODE_BASE=16568			; Base CHMK code value for these services

	.PAGE
	.SBTTL	Change Mode Dispatcher Vector Block
;++
; This vector is used by the image activator to connect the privileged shareable
; image to the VMS change mode dispatcher.  The offsets in the vector are self-
; relative to enable the construction of position independent images.  The system
; version number will be used by the image activator to verify that this shareable
; image was linked with the symbol table for the current system.
;
;			Change Mode Vector Format		
;
;	   +------------------------------------------+
;	   !             Vector Type Code             !   PLV$L_TYPE
;	   !             (PLV$C_TYP_CMOD)             !
;	   +------------------------------------------+
;	   !          System Version Number           !   PLV$L_VERSION
;	   !             (SYS$K_VERSION)              !
;	   +------------------------------------------+
;	   !      Kernel Mode Dispatcher Offset       !   PLV$L_KERNEL
;	   !                                          !
;	   +------------------------------------------+
;	   !         Exec Mode Entry Offset           !   PLV$L_EXEC
;	   !                                          !
;	   +------------------------------------------+
;	   !	   User Rundown Service Offset        !   PLV$L_USRUNDWN
;	   !                                          !
;	   +------------------------------------------+
;	   !                Reserved                  !
;	   !                                          !
;	   +------------------------------------------+
;	   !          RMS Dispatcher Offset           !   PLV$L_RMS  
;	   !                                          !
;	   +------------------------------------------+
;	   !             Address Check                !   PLV$L_CHECK
;	   !                                          !
;	   +------------------------------------------+
;
;
	.PSECT	USER_SERVICES,PAGE,VEC,PIC,NOWRT,EXE

	.LONG	PLV$C_TYP_CMOD		; Set type of vector to change mode dispatcher
	.LONG	SYS$K_VERSION		; Identify system version 
	.LONG	KERNEL_DISPATCH-.	; Offset to kernel mode dispatcher
	.LONG	0			; No executive mode dispatcher
	.LONG	CLEANUP_SSV-.		; User rundown service to restore SSV
	.LONG	0			; Reserved.
	.LONG	0			; No RMS dispatcher
	.LONG	0			; Address check - PIC image
	.PAGE
	.SBTTL	Kernel Mode Dispatcher
;++
; Input Parameters:
;
;	(SP) - Return address if bad change mode value
;
;	 R0  - Change mode argument value.
;
;	 R4  - Current PCB Address. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;--
	.PSECT	USER_KERNEL_DISP0,BYTE,NOWRT,EXE,PIC
KACCVIO:				; Kernel access violation
	MOVZWL	#SS$_ACCVIO,R0		; Set access violation status code
	RET				;  and return
KINSFARG:				; Kernel insufficient arguments.
	MOVZWL	#SS$_INSFARG,R0		; Set status code and
	RET				;  return
KNOTME:	RSB				; RSB to forward request

KERNEL_DISPATCH::			; Entry to dispatcher
	MOVAB	W^-KCODE_BASE(R0),R1	; Normalize dispatch code value
	BLSS	KNOTME			; Branch if code value too low
	CMPW	R1,#KERNEL_COUNTER	; Check high limit
	BGEQU	KNOTME			; Branch if out of range
;
; The dispatch code has now been verified as being handled by this dispatcher,
; now the argument list will be probed and the required number of arguments
; verified.
;
	MOVZBL	W^KERNEL_NARG[R1],R1	; Get required argument count
	MOVAL	@#4[R1],R1		; Compute byte count including arg count
	IFNORD	R1,(AP),KACCVIO		; Branch if arglist not readable
	CMPB	(AP),W^<KERNEL_NARG-KCODE_BASE>[R0] ; Check for required number
	BLSSU	KINSFARG		;  of arguments
	CASEW	R0,-			; Case on change mode
		-			; argument value
		#KCODE_BASE,-		; Base value
		#<KERNEL_COUNTER-1>	; Limit value (number of entries)
KCASE_BASE:				; Case table base address for DEFINE_SERVICE
;
;	Case table entries are made in the PSECT USER_KERNEL_DISP1 by
;	invocations of the DEFINE_SERVICE macro.  The three PSECTS, 
;	USER_KERNEL_DISP0,1,2 will be abutted in lexical order at link-time.
;
	.PSECT	USER_KERNEL_DISP2,BYTE,NOWRT,EXE,PIC
    	BUG_CHECK IVSSRVRQST,FATAL	; Since the change mode code is validated
    					; above, we should never get here

	.PAGE
	.SBTTL	Intercept system service $SSI_USSK user system service
;++
; Functional Description:
;	This routine sets up the interface to the real routines which
;	perform the real work.
; Input Parameters:
;	R4 - Address of current PCB
;
; Output Parameters:
;	R0 - Completion Status Code
;--
;
	.ENTRY  INT_SSI_USSK,^M<R4>
	PUSHL	4(AP)
    	CALLS	#1,G^SSIK_START		; Invoke routine in privilege library
    	RET

	.PAGE
	.SBTTL	Intercept system service $SSI_USSU user system service 
;++
; Functional Description:
;	This routine sets up the interface to the real routines which
;	perform the real work.
; Input Parameters:
;	See Argument list
; Output Parameters:
;	R0 - Completion Status Code
;--
;
	.ENTRY	INT_SSI_USSU,^M<>
    	CMPL	#4,(AP)			; Require to have 4 arguments
    	BNEQ	UINSFARG		; Not 4
    	MOVZBL	(AP),R1			; Get required argument count
    	MOVAL	@#4[R1],R1		; Compute byte count including arg count
    	IFNORD	R1,(AP),UACCVIO		; Branch if arglist not readable
    	BRB	START			; Ok

UACCVIO:				; User access violation
    	MOVZWL	#SS$_ACCVIO,R0		; Set access violation status code
    	RET				;   and return

UINSFARG:				; Kernel insufficient arguments
    	MOVZWL	#SS$_INSFARG,R0		; Set access violation status code
    	RET				;   and return

START:
    	PUSHL	16(AP)			; SAVE_MASK, the running state of
    					;   all the user declared routines
    					;   in different priorities before
    					;   changing by USER_MASK, this value
    					;   is returned to the caller.
    	PUSHL	12(AP)			; USER_ID, used for checking purpose
    					;   in SSI_START, this value is 
    					;   returned to the caller.
    	PUSHL	8(AP)			; USER_ADDR, user declared routine,
    					;   to be called at interception time.
    	PUSHL	4(AP)			; USER_SETUP_FLAGS has 4 bytes, (one byte 
    					;   each for SETUP_FLAG, USER_PRIO,
    					;   USER_MASK & USER_MODE).  User
    					;   sets up the status for declared
    					;   routine.

    	PROBEW	#0,#4,@8(SP)		; Writability of USER_ID
    	BNEQ	2$
    	BRW	UACCVIO

2$:    	PROBEW	#0,#4,@12(SP)		; Writabiltiy of SAVE_MASK
    	BNEQ	4$
	BRW	UACCVIO

; Check SETUP_FLAG (0-1)
4$:    	CMPB	0(SP),#1		; Check for legal setup flag
    	BLEQU	8$			;  0 - Disable, 1 - Enable
    	BRW	100$

; Check USER_PRIO (1-4)
8$:    	CMPB	1(SP),#1		; Check for legal priority
    	BLSS	10$			;  1, 2, 3, 4
    	CMPB	1(SP),#4		;  1,2 - User program in user mode
        BGTR	10$			;    3 - DEBUG in user mode
    	BRB	12$
10$:					;    4 - Super DEBUG in user mode
        BRW     100$


; We don't check USER_MASK here, for we only take one bit value for
; prio. 1, 2 bits for prio. 2, 3 bits for prio. 3, and 4 bits for prio. 4.
; in SSI_START.  Note: this is the way we return mask value back to user.
;

; Check USER_MODE (3)
12$:	CMPB	3(SP), #PSL$C_USER	; Check for legal mode
    	BEQL	14$
    	BRW	100$			; Only accept user mode

; Check USER_ID (0 OR 1-16)
14$:	CMPL	@8(SP),#16		; Check for legal USER_ID value
    	BLEQU	20$			;  range: 0 to 16
    	BRW	100$    	

; All checking is done, ready to call the routines to do the real work.
;
20$:
	CALLS	#4,G^SSIU_START
	RET

100$:
    	MOVL	#0,R0
    	RET

; This routine is declared as the user rundown service. It gets called
; at image rundown. Its purpose is to restore the system service vector
; to its original state. This is done by calling the COPY_SAVED_SSV
; routine in module RESETSSV. Note - this routine does not want to 
; restore the system service vector twice. It checks for this both
; by checking to see whether there is are JSBs in the system service
; vector and also checking a global flag that says whether we have
; changed the system service vector.
;
CLEANUP_SSV::
    	CMPB	@#SYS$RUNDWN+2,#OP$_JSB	; Has the system service vector
    					;    been changed? (If so, we
    					;    will have put a JSB instruction
    					;    at SYS$anything+2).
    	BNEQ	10$			; No, skip call which restores SSV
    	TSTL	SSV_MUNGED_FLAG		; Has the system service vector
    					;    been changed?
    	BEQL	10$			; No, skip call which restores SSV
    	CALLS	#0,COPY_SAVED_SSV	; Restore system service vector
10$:	RSB

	.END


