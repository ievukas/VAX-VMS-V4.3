MODULE parag (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = long_relative,
					    NONEXTERNAL = long_relative)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!
!	Processes .PARAGRAPH, .SET PARAGRAPH, .(NO)AUTOPARAGRAPH, 
!	and .(NO)AUTOTABLE commands.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	June, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	004	KAD00004	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    gca		: gca_definition,
    ira		: fixed_string,
    nmlst	: number_list,
    pdt		: ref pdt_definition,
    sca		: sca_definition;

EXTERNAL LITERAL
    rnfinm;					! Error messages

EXTERNAL ROUTINE
    erma,
    gcpos,
    gcskip,
    glnm,
    gtpc,
    outnj,
    rskips;

%SBTTL 'Routine PARAG'
GLOBAL ROUTINE parag (handler_code) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	handler_code - indicates the command to be processed.
!	-1	     - means set a pending paragraph.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    SELECTONE .handler_code OF
	SET
	!
	! An autoparagraph was detected by pus.
	!
	[-1] :
	    BEGIN
	    outnj ();
	    !
	    ! Skip all spaces and tabs to get to text on line.
	    ! This duplicates handling done by old RUNOFFs.
	    !
	    rskips (ira);
	    !
	    ! Always do the indentation.
	    !
	    sca_indent = .pdt_indent;
	    !
	    ! Pend the skipping only if this section is not empty.
	    !
	    sca_para_pnd = NOT .sca_sect_empty;
	    END;

	[h_autoparagraph] :
	    BEGIN
	    gca_autopara = true;
	    !
	    ! Disable .AUTOTABLE.
	    !
	    gca_autotabl = false;
	    END;

	[h_no_autotable, h_no_autoparagr] :
	    BEGIN
	    !
	    ! Disable both .AUTOTABLE and .AUTOPARAGRAPH.
	    !
	    gca_autopara = false;
	    gca_autotabl = false;
	    END;

	[h_autotable] :
	    BEGIN
	    gca_autotabl = true;
	    !
	    ! Disable .AUTOPARAGRAPH.
	    !
	    gca_autopara = false;
	    END;

	[h_paragraph, h_set_paragraph] :
	    BEGIN
	    !
	    ! Get parameters.
	    !
	    glnm (3);

	    INCR I FROM 1 TO .nmlst_count DO

		IF .nmlst_descr (.i) EQL nm_bad
		THEN
		    !
		    ! Ignore entire command if a single argument is bad.
		    !
		    RETURN;

	    IF .nmlst_count GTR 0
	    THEN
		!
		! User supplied at least one parameter.
		!
		BEGIN
		!
		! Use first argument as paragraph indentation, 
		! if it was supplied.
		!
		IF .nmlst_descr (1) NEQ nm_null
		THEN
		    pdt_indent = .nmlst_value (1);

		IF .nmlst_count GTR 1
		THEN

		    IF .nmlst_descr (2) NEQ nm_null
		    THEN
			pdt_skip = .nmlst_value (2);
		!
		! Validate "paragraph test page" parameter.
		!
		IF .nmlst_count EQL 3
		THEN

		    IF .nmlst_descr (3) NEQ nm_null
		    THEN

			IF .nmlst_descr (3) EQL nm_unsigned
			THEN
			    !
			    ! If 3rd argument is unsigned, that is
			    ! the test page value.
			    !
			    pdt_tp = .nmlst_value (3)
			ELSE
			    !
			    ! Validate 3rd argument if it is signed.
			    !
			    BEGIN

			    LOCAL
				temp;
			    !
			    ! Try out adjustment to current test page value.
			    !
			    temp = .pdt_tp + .nmlst_value (3);

			    IF .temp GEQ 0
			    THEN
			        !
			        ! Save valid adjusted test page setting.
			        !
				pdt_tp = .temp
			    ELSE
			        !
			        ! Invalid test page specification.
			        !
				erma (rnfinm, false);

			    END;

		END;		! End of parameter processing

	    IF .handler_code EQL h_set_paragraph
	    THEN
		RETURN;

	    !
	    ! Force out the vertical motion so that change bars don't get
	    ! carried back too far.
	    !
	    outnj ();
	    sca_indent = .pdt_indent;
	    !
	    ! Pend the skipping only if this section is not empty.
	    !
	    sca_para_pnd = NOT .sca_sect_empty;

	    END;

	TES;

    END;					! End of PARAG

END						! End of module
ELUDOM
