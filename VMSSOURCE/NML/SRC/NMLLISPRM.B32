%TITLE 'NML special parameter handling routines'
MODULE NML$LISPRM (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains action routines to handle changing and
!	displaying of permanent data base entity parameters.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-008	MKP0009		Kathy Perko	2-Aug-1984
!		Fix DEFINE EXEC ADDR n so that, if n doesn't include an area
!		number, area 1 is used.
!
!	V03-007	MKP0008		Kathy Perko	20-April-1984
!		Fix DEF NODE nnn ADDR yyy so that, if the address is a duplicate
!		of the executor's, the error message indicates "executor"
!		instead of "remote node".
!
!	V03-006	MKP0007		Kathy Perko	18-April-1984
!		Fix DEF EXEC NAME or ADDRESS so that exec id globals
!		are updated.
!
!	V03-005	MKP0006		Kathy Perko	29-Jan-1984
!		If NCP is a V3.0.0, mask area in node numbers.
!
!	V03-004	MKP0005		Kathy Perko	4-Aug-1983
!		Change routines to manipulate permanent database record
!		fields to be transparent to ISAM keys at the beginning of
!		the records.  Also, redo checking on node ids for the new
!		node database format.
!
!	V03-003	MKP0004		Kathy Perko	29-July-1983
!		Redo NML$LISNODEID routine to return only the node id if
!		the PSTs datatype is NMA$M_PTY_CM1.
!
!	V03-002	MKP0003		Kathy Perko	13-July-1982
!		Fix NML$LISPARAM to add parameter lengths correctly.
!		Fix list routines for channels and set passwords.
!
!	V03-001	MKP0002		Kathy Perko	16-June-1982
!		Add new list routines for range and circuit owner paramters.
!
!	V02-001	MKP0001		Kathy Perko	2-April-1982
!		Add changes for X-25 Protocol Networks and DTE, and
!		for X-25 Server Modules.
!
!	V02-001	MKP001		Kathy Perko	24-July-1981
!		Delete NML call to map VMS line to DNA line name and
!		vice versa.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$LISNMLVER,
    NML$LISLOONAM,
    NML$LISNODEID,
    NML$LISPARAM,
    NML$LISPASSWORD,
    NML$LISPWSET,
    NML$LISRANGE,
    NML$LISOWNER,
    NML$DEFPARAM,
    NML$DEFLINLTY,
    NML$DEFLINTRI,
    NML$DEF_NODE_ADDR,
    NML$DEF_EXEC_ID,
    NML_FIND_DUPLICATE_NODE,
    NML$DEFNODNLI,
    NML$DEFOBJNUM,
    NML$PURPARAM,
    NML$PURNODNNA;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

!
! Parameter buffer and descriptor for use in handling volatile data base
! data.
!
OWN
    nml$t_prmbuffer : VECTOR [256, BYTE];
BIND
    nml$q_prmdsc = UPLIT (256, nml$t_prmbuffer) : DESCRIPTOR;
!
! Entity buffer and descriptor.
!
OWN
    nml$t_entbuffer : BBLOCK [nml$k_entbuflen],
    nml$q_entbfdsc  : VECTOR [2];

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    nml$_recbfovf,
    nml$_recdelet;

EXTERNAL
    nml$gw_perm_exec_addr : BBLOCK [2],
    nml$gb_ncp_version,
    nml$gq_perm_exec_name_dsc : VECTOR [2],
    nml$gq_proprvmsk : BBLOCK [8];

EXTERNAL ROUTINE
    nma$deletefld,
    nma$insertfld,
    nma$matchrec,
    nma$searchfld,
    nml$addmsgprm,
    nml$bld_reply,
    nml$delete_node_rec,
    nml$getexeadr,
    nml$getnodnam,
    nml$getrecowner,
    nml$read_loopnode,
    nml$readrecord,
    nml$send;


%SBTTL 'NML$LISNMLVER  Get NML version number'
GLOBAL ROUTINE NML$LISNMLVER (SEM_TABLE, BUFDSC, MSGSIZE, DUMDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves the network management version number into
!	the output message as a coded multiple parameter.
!
! FORMAL PARAMETERS:
!
!	SEM_TABLE	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor.
!	MSGSIZE		Address of current output message size.
!	DUMDSC		Not used.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	Parameter is added to output message buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_TABLE : REF BBLOCK;

    LOCAL
	BUFFER : VECTOR [6, BYTE],
	PTR;

    PTR = CH$PTR (BUFFER);			! Get pointer to output buffer

!
! Add version numbers preceded by data type.
!
    CH$WCHAR_A (1, PTR);
    CH$WCHAR_A (NML$K_VERSION, PTR);
    CH$WCHAR_A (1, PTR);
    CH$WCHAR_A (NML$K_DEC_ECO, PTR);
    CH$WCHAR_A (1, PTR);
    CH$WCHAR_A (NML$K_USER_ECO, PTR);

!
! Add coded multiple version parameter to message.
!
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_TABLE [PST$W_DATAID],
		   .SEM_TABLE [PST$B_DATATYPE] OR 3,
		   6,
		   BUFFER);

    RETURN NML$_STS_SUC

    END;					! End of NML$LISNMLVER

%SBTTL 'NML$LISLOONAM  Get loop node name'
GLOBAL ROUTINE NML$LISLOONAM (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the loopback node name for a line.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Data buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    sem_list : REF BBLOCK;

LOCAL
    circuit_dsc : VECTOR [2],
    node_dsc : 	  VECTOR [2],
    node_rec_buf: BBLOCK [nml$k_recbflen],	! Buffer for node data
    node_rec_dsc: VECTOR [2],			! Descriptor of node data buffer
    node_rec_data:VECTOR [2],			! Descriptor of data in node
						!	data buffer.
    status;


!
! Get the circuit ID from the circuit's permanent database record.
! If this fails, it's a bug.
!
circuit_dsc [0] = 0;
circuit_dsc [1] = 0;
IF NOT nma$searchfld (.datdsc,
		  nml$c_key_cir,
		  circuit_dsc [0],
		  circuit_dsc [1]) THEN
    RETURN nml$_sts_mpr;
node_rec_dsc [0] = nml$k_recbflen;
node_rec_dsc [1] = node_rec_buf;
node_rec_data [1] = node_rec_buf;
!
! Call routine to read through the known loopnodes in the node permanent
! database, looking for loopnode on the circuit being listed.
!
IF nml$read_loopnode (circuit_dsc,
			    node_rec_dsc,
			    node_rec_data) THEN
    BEGIN
    node_dsc [0]= 0;
    node_dsc [1] = 0;
    IF nma$searchfld (node_rec_data,
		      nma$c_pcno_nna,
		      node_dsc [0],
		      node_dsc [1]) THEN
	nml$addmsgprm (.bufdsc,
			.msgsize,
			.sem_list [pst$w_dataid],
			.sem_list [pst$b_datatype],
			.node_dsc [0],
			.node_dsc [1]);
    END;
RETURN nml$_sts_suc
END;					! End of NML$LISLOONAM

%SBTTL 'NML$LISNODEID  Get host node id'
GLOBAL ROUTINE NML$LISNODEID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the host node identification string.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Data buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    sem_list : REF BBLOCK;

OWN
    tmpbuffer : BBLOCK [6];
BIND
    tmpdsc = UPLIT (6, tmpbuffer) : DESCRIPTOR;

LOCAL
    cm_count,
    fldadr,
    fldsize,
    length,
    namdsc  : DESCRIPTOR,
    hostadr : WORD,
    ptr,
    reslen;

fldadr = 0;

IF NOT nma$searchfld (.datdsc,
		      .sem_list [pst$w_dataid],
		      fldsize,
		      fldadr) THEN
    RETURN nml$_sts_pty;

ptr = nml$t_prmbuffer;
!
! Get the maximum number of fields in the coded multiple: 1 (node address
! only) or 2 (node address and node name).
!
cm_count = .sem_list [pst$b_datatype] AND NOT nma$m_pty_cmu;

hostadr = .(.fldadr)<0,16>;
!
! Add node address field.
!
CH$WCHAR_A (2, ptr);
!
! If the NCP I'm talking to is speaking NICE V3.0.0 or less, clear the
! area number from node numbers in the executor's area.
!
IF CH$RCHAR (nml$gb_ncp_version) LEQ 3 THEN
    BEGIN
    MAP
	hostadr : BBLOCK [2];

    IF .hostadr [nma$v_area] EQL .nml$gw_perm_exec_addr [nma$v_area] THEN
	hostadr [nma$v_area] = 0;
    END;

ptr = CH$MOVE (2, hostadr, .ptr);
IF .cm_count EQL 2 THEN
    BEGIN
    nml$getnodnam (.hostadr, tmpdsc, reslen);
    namdsc [dsc$w_length] = .reslen;
    namdsc [dsc$a_pointer] = tmpbuffer;
    !
    ! Add node name field if the length is not zero.
    !
    IF .namdsc [dsc$w_length] NEQU 0 THEN
	BEGIN
	CH$WCHAR_A (nma$m_pty_asc, ptr);
	CH$WCHAR_A (.namdsc [dsc$w_length], ptr);
	ptr = CH$MOVE (.namdsc [dsc$w_length],
			.namdsc [dsc$a_pointer],
			.ptr);
	END
    ELSE
	cm_count = 1;
    END;

length = .ptr - nml$t_prmbuffer;
nml$addmsgprm (.bufdsc,
	       .msgsize,
	       .sem_list [pst$w_dataid],
	       nma$m_pty_cmu OR .cm_count,
	       .length,
	       nml$t_prmbuffer);

RETURN nml$_sts_suc
END;					! End of NML$LISNODEID

%SBTTL 'NML$LISPARAM  Get parameter'
GLOBAL ROUTINE NML$LISPARAM (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a parameter.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the coded multiple version number.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    DATATYPE : BBLOCK [1],	! NICE parameter data type.
    FLDADR,
    FLDSIZE;

    FLDADR = 0;

    IF NMA$SEARCHFLD (.DATDSC,
		      .SEM_LIST [PST$W_DATAID],
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN
	DATATYPE = .SEM_LIST [PST$B_DATATYPE];
	!
	! If the parameter is not an ASCII or hex image field, the length
	! goes in the datatype byte.  Add it here.
	!
	IF (NOT .DATATYPE [NMA$V_PTY_ASC]) AND
	   (.DATATYPE [NMA$V_PTY_TYP] NEQ NMA$C_PTY_HI) THEN
	    DATATYPE = .DATATYPE OR .FLDSIZE;
	NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .DATATYPE,
		   .FLDSIZE,
		   .FLDADR);
	END;

RETURN NML$_STS_SUC
END;					! End of NML$LISPARAM

%SBTTL 'NML$LISPASSWORD  Get parameter'
GLOBAL ROUTINE NML$LISPASSWORD (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a password parameter to the output message if
!	the user has the BYPASS privilege.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Address of data buffer descriptor.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

BIND
    STRDSC = $ASCID ('no access rights') : DESCRIPTOR;

LOCAL
    FLDADR,
    FLDSIZE;

IF NOT .NML$GQ_PROPRVMSK [PRV$V_BYPASS]
THEN
    BEGIN
    !
    ! User does not have BYPASS privilege so return string to indicate that
    ! a password is set if one is found.
    !

    FLDADR = 0;
    IF NMA$SEARCHFLD (.DATDSC,
		      .SEM_LIST [PST$W_DATAID],
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN

	NML$ADDMSGPRM (.BUFDSC,
		       .MSGSIZE,
		       .SEM_LIST [PST$W_DATAID],
		       .SEM_LIST [PST$B_DATATYPE],
		       .STRDSC [DSC$W_LENGTH],
		       .STRDSC [DSC$A_POINTER]);

	RETURN NML$_STS_SUC

	END;
    END;
!
! Call the normal parameter routine.
!
NML$LISPARAM (.SEM_LIST,
	      .BUFDSC,
	      .MSGSIZE,
	      .DATDSC);

RETURN NML$_STS_SUC
END;					! End of NML$LISPASSWORD

%SBTTL 'NML$LISPWSET  List password set'
GLOBAL ROUTINE NML$LISPWSET (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called while processing a LIST X25-S or X29-S DEST
!	command.  If a password is set, it adds a password set indicator to
!	the NICE response message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Address of data buffer descriptor.
!
! IMPLICIT INPUTS:
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
! SIDE EFFECTS:
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    FLDSIZE,
    FLDADR;

IF NMA$SEARCHFLD (.DATDSC,
		.SEM_LIST [PST$W_DATAID],
		FLDSIZE,
		FLDADR) THEN
    BEGIN
    !
    ! Add password to message with a value of 0.  This indicates simply that
    ! the password is defined, without actually returning the password.
    !
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   1,
		   1,
		   UPLIT (0));
    END;
RETURN NML$_STS_SUC
END;				! end of NML$LISPWSET

%SBTTL 'NML$LISRANGE  List range parameter'
GLOBAL ROUTINE NML$LISRANGE (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to list X25 and X29 Destination subaddresses
!	and X25 DTE channels.  The destination's subaddresses can be more
!	than one range pair, in which case the field length in the permanent
!	database is the number of range pairs times 4 (i.e. then length in
!	bytes).
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Address of data buffer descriptor.
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    FLDADR,
    FLDSIZE,
    CM_COUNT,
    LENGTH,
    PTR,
    RANGE_BEGIN,
    RANGE_END;

FLDADR = 0;

IF NMA$SEARCHFLD (.DATDSC,
		  .SEM_LIST [PST$W_DATAID],
		  FLDSIZE,
		  FLDADR) THEN
    BEGIN
    !
    ! For as many range pairs as are set, add them to the NICE response message
    ! in the form: Parameter ID, Coded multiple data type, word data type,
    ! range begin, word data type, range end.
    !
    WHILE .FLDSIZE GTR 0 DO
	BEGIN
	PTR = NML$T_PRMBUFFER;
	CM_COUNT = 1;

	CH$WCHAR_A (2, PTR);
	PTR = CH$MOVE (2, (.FLDADR) <0,16>, .PTR);
	!
	! If the range begin = range end, don't include range end.
	!
	IF (.FLDADR) <0,16> NEQ (.FLDADR) <16,32> THEN
	    BEGIN
	    CM_COUNT = .CM_COUNT + 1;
	    CH$WCHAR_A (2, PTR);
	    PTR = CH$MOVE (2, (.FLDADR) <16,32>, .PTR);
	    END;

	LENGTH = .PTR - NML$T_PRMBUFFER;
	NML$ADDMSGPRM (.BUFDSC,
		       .MSGSIZE,
		       .SEM_LIST [PST$W_DATAID],
		       .SEM_LIST [PST$B_DATATYPE] OR .CM_COUNT,
		       .LENGTH,
		       NML$T_PRMBUFFER);
	!
	! Increment pointer and length to get next range pair in the
	! permanent data base record.
	!
	FLDADR = .FLDADR + 4;
	FLDSIZE = .FLDSIZE - 4;
	END;
    END;

RETURN NML$_STS_SUC
END;				! end of NML$LISRANGE

%SBTTL 'NML$LISOWNER  Get OWNER parameter'
GLOBAL ROUTINE NML$LISOWNER (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!	This routine adds the circuit parameter, OWNER, to the NICE
!	response message.  The owner parameter is saved as a bit value.
!	If it's set, the executor owns the circuit.  Check to see if
!	it's set, and, if so, return the executor node ID.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!	The output message buffer contains the coded multiple executor node
!	address.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

BIND EXECUTOR = UPLIT BYTE
	(NMA$M_PTY_COD+1, NMA$C_ENT_NOD,	! Entity type = node
	2, WORD (0));	! Node address = executor

LOCAL
    FLDADR,
    FLDSIZE;

FLDADR = 0;
IF NMA$SEARCHFLD (.DATDSC,
		  .SEM_LIST [PST$W_DATAID],
		  FLDSIZE,
		  FLDADR) THEN
    BEGIN
    IF ..FLDADR THEN
	NML$ADDMSGPRM (.BUFDSC,
		 	.MSGSIZE,
		   	.SEM_LIST [PST$W_DATAID],
		   	.SEM_LIST [PST$B_DATATYPE] OR 2,
		 	5,
		   	EXECUTOR);
    END;
RETURN NML$_STS_SUC
END;					! End of NML$LISOWNER

%SBTTL 'NML$DEFPARAM  Add parameter'
GLOBAL ROUTINE NML$DEFPARAM (SEM_LIST, BUFSIZE, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

	IF NOT NMA$INSERTFLD (.BUFSIZE,
			      .SEM_LIST [PST$W_DATAID],
			      .LENGTH,
			      .ADDR,
			      .RTNDSC)
	THEN
	    BEGIN
!
! Insert failed.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;	! Set message text flag
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_MPR;	! Add error code
	    NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_RECBFOVF;

	    RETURN NML$_STS_MPR

	    END;

    RETURN NML$_STS_SUC

    END;					! End of NML$DEFPARAM

%SBTTL 'NML$DEFLINLTY  Add line type parameter'
GLOBAL ROUTINE NML$DEFLINLTY (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the line type parameter to the permanent data
!	base record if the value is valid.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE,
	STATUS;

    IF .(.ADDR)<0,8> EQL NMA$C_LINTY_POI
    THEN
	BEGIN

	FLDSIZE = 0;
	IF NMA$SEARCHFLD (.RTNDSC,
			  NMA$C_PCLI_TRI,
			  FLDSIZE,
			  FLDADR)
	THEN
	    BEGIN
!
! Line has tributary address so it cannot have type=POINT.
!

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCLI_LTY;

	    RETURN NML$_STS_PVA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFLINLTY

%SBTTL 'NML$DEFLINTRI  Add line tributary address parameter'
GLOBAL ROUTINE NML$DEFLINTRI (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the line tributary address parameter to the
!	permanent data base record if it is valid for this line.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE,
	STATUS;

    FLDSIZE = 0;
    IF NMA$SEARCHFLD (.RTNDSC,
		      NMA$C_PCLI_LTY,
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN

	IF .(.FLDADR)<0,8> EQL NMA$C_LINTY_POI
	THEN
	    BEGIN
!
! Line has type=POINT so no tributary address can be specified.
!

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PNA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCLI_TRI;

	    RETURN NML$_STS_PNA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFLINTRI

%SBTTL 'NML$DEF_NODE_ADDR   Add node address parameter'
GLOBAL ROUTINE NML$DEF_NODE_ADDR (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!	This routine checks the node address parameter to make sure
!	it does not already exits in the node permanent database.  If it does
!	not, it adds the node address to the permanent data base record.
!	This routine is not used to check for duplicate node names because
!	the node database name key is declared as "noduplicates", so RMS
!	will do this check for node names when the record is written to
!	the file.
!
! FORMAL PARAMETERS:
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Returns success (NML$_STS_SUC) if the node address is successfully
!		added to the permanent database record.
!	Returns nml$_sts_pva if the new address is already defined in the
!		node permanent database.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
    sem_list	: REF BBLOCK,
    rtndsc	: REF DESCRIPTOR;

LOCAL
    status;

!
! If there's another node in the permanent database with the new address,
! return an error message to NCP.
!
IF nml_find_duplicate_node (.sem_list, .bufdsc,
				.length, .addr,
				.rtndsc) THEN
    BEGIN
    nml$ab_msgblock [msb$v_det_fld] = 1;
    nml$ab_msgblock [msb$b_code] = nma$c_sts_pva;
    nml$ab_msgblock [msb$w_detail] = .sem_list [pst$w_dataid];
    RETURN nml$_sts_pva
    END;

!
! The node address is unique.  Add it to the node's permanent database record.
!
status = nml$defparam (.sem_list,
			   .bufdsc,
			   .length,
			   .addr,
			   .rtndsc);

RETURN .status

END;					! End of NML$DEF_NODE_ADDR

%SBTTL 'NML$DEF_EXEC_ID   Add executor name or address parameter'
GLOBAL ROUTINE NML$DEF_EXEC_ID (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!	This routine is called when processing a DEFINE EXECUTOR command
!	to change the name or address of the executor node.  It checks
!	the new name or address parameter to determine if it's already
!	assigned to some other node.  If it is, this means the identity
!	of the executor is being changed.  Delete the remote entry with
!	that name or address.  The new name or address is added to the
!	executor node permanent database record.  It is written back
!	to the file later.
!
! FORMAL PARAMETERS:
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!	The new executor name or address is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Returns success (NML$_STS_SUC) if the node address is successfully
!		added to the permanent database record.
!
! SIDE EFFECTS:
!	If the new executor name or address is already assigned to some
!	other node in the permanent database, that remote node is deleted from
!	the database.
!
!--

BEGIN

MAP
    addr	: REF BBLOCK [2],
    sem_list	: REF BBLOCK;

LOCAL
    status,
    temp;

IF nml_find_duplicate_node (.sem_list, .bufdsc,
				.length, .addr,
				.rtndsc) THEN
    BEGIN
    !
    ! The executor node identity is being changed to that of a node that's
    ! already in the database.  Delete the remote entry for that node (there
    ! are no parameters that it makes sense to carry over in this case)
    ! so the executor can become that node.
    !
    nml$delete_node_rec (.sem_list [pst$w_dataid],	! Database key
			 length);			! Name or address dsc.
    nml$ab_msgblock [msb$v_msg_fld] = 1;
    nml$ab_msgblock [msb$l_text] = nml$_recdelet;
    END;
!
! Put the RMS "current record" pointer back to the executor node's
! entry.
!
!*****************************TEMPORARY
nml$gw_perm_exec_addr = 0;
!*************************************
nml$getexeadr (temp);
!
! If the new executor address is 0, leave it that way.  If the area number
! of the address is 0, then default it to area 1 (this is for DEFINE EXEC
! ADDRESS only) so the exec will have a valid area number in the database.
!
IF .sem_list [pst$w_dataid] EQL nma$c_pcno_add THEN
    BEGIN
    IF .addr [nma$v_addr] NEQ 0 AND
	.addr [nma$v_area] EQL 0 THEN
	addr [nma$v_area] = 1;
    END;
status = nml$defparam (.sem_list,
			   .bufdsc,
			   .length,
			   .addr,
			   .rtndsc);

IF .sem_list [pst$w_dataid] EQL nma$c_pcno_add THEN
    nml$gw_perm_exec_addr = .(.addr)<0,16>
ELSE
    BEGIN
    CH$MOVE (.length, .addr, .nml$gq_perm_exec_name_dsc [1]);
    nml$gq_perm_exec_name_dsc [0] = .length;
    END;
RETURN .status

END;					! End of NML$DEF_EXEC_ID

%SBTTL 'NML_FIND_DUPLICATE_NODE  Check perm db for node id'
ROUTINE NML_FIND_DUPLICATE_NODE (SEM_LIST, BUFDSC,
				 LENGTH, ADDR,
				 RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!	This routine checks the node name or address parameter to see
!	if it already exists in the node permanent database.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!	NML$Q_PRMDSC is the descriptor of the duplicate node's record
!	(if there is one) which is used to return the ID of that node
!	in the NICE error message.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Returns status of node lookup.
!
! SIDE EFFECTS:
!	None
!
!--

BEGIN

MAP
    sem_list : REF BBLOCK;

LOCAL
    key,
    node_id_dsc: VECTOR [2],
    dup_dsc:	VECTOR [2],
    node_type,
    status;

!
! Look for a node name (or address) that was previously DEFINEd in the node's
! permanent database record.
!
node_id_dsc [1] = 0;
node_id_dsc [0] = 0;
status = nma$searchfld (.rtndsc,
			.sem_list [pst$w_dataid],
			node_id_dsc [0],
			node_id_dsc [1]);

!
! If there is no previously defined node ID, or the previous ID is different
! from the new ID in the NICE DEFINE command, then check to see if there's
! another node with the same name or address in the node permanent database.
!
IF NOT .status
	OR
   (.status AND
   CH$NEQ (.node_id_dsc [0], .node_id_dsc [1], .length, .addr)) THEN
    BEGIN
    key = .sem_list [pst$w_dataid];		! Make key a longword.
    status = nml$readrecord (nma$c_opn_node,	! Node database file ID
			     key,		! Node database key
			     length,		! Address of key value descriptor
			     nml$q_prmdsc,	! Buffer for node record
			     dup_dsc,		! Duplicate node data descriptor
			     node_type);	! Node entity type.
    IF .status THEN
	BEGIN
	!
	! There is another node with the new name or address DEFINEd.
	! Add duplicate node id to NICE response message parameters.  The node
	! ID will be returned in the NICE response to NCP.
	!
	nml$q_entbfdsc [0] = nml$k_entbuflen;
	nml$q_entbfdsc [1] = nml$t_entbuffer;
	nml$getrecowner (dup_dsc,
			.node_type,
			nml$q_entbfdsc,
			nml$q_entbfdsc [0]);
	nml$ab_msgblock [msb$l_flags] = msb$m_entd_fld;  ! Set entity descriptor flag
	nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc; ! Add entity descriptor pointer
	END;
    END
ELSE
    status = nml$_sts_cmp;
RETURN .status
END;					! End of NML_FIND_DUPLICATE_NODE

%SBTTL 'NML$DEFNODNLI  Add loop node line parameter'
GLOBAL ROUTINE NML$DEFNODNLI (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the loop node line parameter to the permanent
!	data base record if this is a loop node and the circuit id is
!	unique (i.e. there is no other loop node set up on the circuit).
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
    sem_list : REF BBLOCK;

LOCAL
    fldadr,
    fldsize,
    circuit_dsc:	VECTOR [2],	! Circuit already in node record (if any)
    node_rec_buf: 	BBLOCK [nml$k_recbflen], ! Buffer for node data
    node_rec_dsc:	VECTOR [2],	! Descriptor of node record buffer.
    node_rec_data:	VECTOR [2],	! Descriptor of data in node record buffer.
    status;

fldadr = 0;
IF nma$searchfld (.rtndsc,
		      nma$c_pcno_add,
		      fldsize,
		      fldadr) THEN
    BEGIN
    !
    ! Node has address so circuit is not allowed.  Loopnodes have only one
    ! parameter - a circuit ID.
    !
    nml$ab_msgblock [msb$l_flags] = msb$m_det_fld;
    nml$ab_msgblock [msb$b_code] = nma$c_sts_pna;
    nml$ab_msgblock [msb$w_detail] = nma$c_pcno_nli;
    RETURN nml$_sts_pna
    END;

circuit_dsc [0] = 0;
circuit_dsc [1] = 0;
status = nma$searchfld (.rtndsc,
			nma$c_pcno_nli,
			circuit_dsc [0],
			circuit_dsc [1]);
!
! If the loop node is already set up on the circuit specified in the NICE
! DEFINE command, I'm done.  Otherwise, make sure the circuit isn't already
! defined for some other loopnode.
!
IF NOT .status
OR (.status AND CH$NEQ (.circuit_dsc [0], .circuit_dsc [1],
			.length, .addr)) THEN
    BEGIN
    !
    ! Check to make sure there aren't any other loopnodes on the specified
    ! circuit in the node database.
    !
    node_rec_dsc [0] = nml$k_recbflen;
    node_rec_dsc [1] = node_rec_buf;
    node_rec_data [1] = node_rec_buf;
    status = nml$read_loopnode (length,		! Address of circuit descriptor
			  node_rec_dsc,		! I/O buffer descriptor
			  node_rec_data);	! Return node data descriptor
    IF .status NEQ rms$_eof THEN
	BEGIN
	!
	! Circuit name must be unique for loop node.
	!
	nml$q_entbfdsc [0] = nml$k_entbuflen;
	nml$q_entbfdsc [1] = nml$t_entbuffer;
	nml$getrecowner (node_rec_data,
			nml$c_loopnode,
			nml$q_entbfdsc,
			nml$q_entbfdsc [0]);
	nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc; ! Add entity descriptor pointer
	nml$ab_msgblock [msb$l_flags] = msb$m_det_fld OR msb$m_entd_fld;
	nml$ab_msgblock [msb$b_code] = nma$c_sts_pva;
	nml$ab_msgblock [msb$w_detail] = nma$c_pcno_nli;
	RETURN nml$_sts_pva
	END;
    END;
!
! The circuit is not already DEFINEd for some other loopnode.  Add it to
! the node's permanent database record.
!
status = nml$defparam (.sem_list,
			   .bufdsc,
			   .length,
			   .addr,
			   .rtndsc);
RETURN .status
END;					! End of NML$DEFNODNLI

%SBTTL 'NML$DEFOBJNUM  Add object number parameter'
GLOBAL ROUTINE NML$DEFOBJNUM (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the object number parameter to the permanent
!	data base record if it is unique.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFSIZE		Permanent database record maximum size.
!	LENGTH		Length of parameter to insert in record.
!	ADDR		Address of parameter to insert in record.
!	RTNDSC		Permanent database record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	DUMDSC : DESCRIPTOR,
	FLDADR,
	FLDSIZE,
	KEY : WORD,
	STATUS;

    FLDADR = 0;
    FLDSIZE = 0;
    STATUS = NMA$SEARCHFLD (.RTNDSC,
			    NMA$C_PCOB_NUM,
			    FLDSIZE,
			    FLDADR);

    !
    ! If no object number is already defined or the object number is
    !		changed by the command, and
    ! the object number is not zero (duplicate objects numbered 0 are allowed),
    ! make sure that the new object number is not already in the
    ! permanent data base.
    !
    IF (NOT .STATUS
	OR (.STATUS AND CH$NEQ (.FLDSIZE, .FLDADR, .LENGTH, .ADDR)))
    AND CH$NEQ (.LENGTH, UPLIT(0), .LENGTH, .ADDR)
    THEN
	BEGIN

	KEY = 0;
	IF NMA$MATCHREC (NMA$C_OPN_OBJ,
			 NML$Q_PRMDSC,
			 KEY,
			 NMA$C_PCOB_NUM,
			 .LENGTH,
			 .ADDR,
			 DUMDSC)
	THEN
	    BEGIN
!
! Object number is not unique.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCOB_NUM;

	    RETURN NML$_STS_PVA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFOBJNUM

%SBTTL 'NML$PURPARAM  Delete parameter'
GLOBAL ROUTINE NML$PURPARAM (RTNDSC, SEM_LIST)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes a parameter from the permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	RTNDSC		Record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter has been removed from the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    NMA$DELETEFLD (.RTNDSC,
		   .SEM_LIST [PST$W_DATAID]);

    RETURN NML$_STS_SUC

    END;					! End of NML$PURPARAM

%SBTTL 'NML$PURNODNNA  Delete node name parameter'
GLOBAL ROUTINE NML$PURNODNNA (RTNDSC, SEM_LIST)=

!++
! FUNCTIONAL DESCRIPTION:
!	This routine removes the node name parameter from the permanent
!	data base record if it is not required. It is required in the case
!	of a loop node.
!
! FORMAL PARAMETERS:
!	RTNDSC		Data buffer descriptor address.
!	SEM_LIST	Parameter semantic table entry address.
!
! IMPLICIT INPUTS:
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Error is returned if the parameter cannot be removed.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE;

    FLDADR = 0;
    FLDSIZE = 0;
    IF NMA$SEARCHFLD (.RTNDSC,
		      NMA$C_PCNO_NLI,
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN
!
! Node has circuit (is a loopnode) so name cannot be deleted.
!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PNA;
	NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_NNA;

	RETURN NML$_STS_PNA

	END
    ELSE
	NMA$DELETEFLD (.RTNDSC, .SEM_LIST [PST$W_DATAID]);

    RETURN NML$_STS_SUC

    END;					! End of NML$PURNODNNA

END

ELUDOM
