
MODULE SMG$BOOLEAN_TABLES( %TITLE 'TPARSE tables for Boolean capabilities'
		IDENT = '1-002'		! File: SMGBOOTAB.B32 Edit: PLL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management 
!
! ABSTRACT:
!
!	This module contains the LIB$TPARSE state tables used to parse
!	Boolean capabilities from an ascii TERMTABLE.TXT file.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: P. Levesque CREATION DATE: 30-Jan-1984
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 30-Jan-1984
! 1-002 - Allow comments on lines not terminated by a comma.  PLL 15-Mar-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NOT_BOOLEAN,			! signal an unknown cap name
	STORE_BOOLEAN;			! store a boolean cap value

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:SMGPROLOG';		! Defines psects, macros, etc.

LIBRARY 'RTLML:SMGTPALIB';		! Definitions and macros used by
					! TERMTABLE routines
LIBRARY 'RTLTPAMAC';			! TPARSE library of macros

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	SMG$$BLANKS_OFF,		! turn off flag to process blanks
	SMG$$FLUSH_NUMERIC,		! flush numeric value to data area
	SMG$$MISSING_END,		! signal error
	SMG$$NEXT_RECORD,		! get next record from TERMTABLE.TXT
	SMG$$STORE_CAP_MASK,		! remember capability number
	SMG$$SYNTAX_ERROR;		! signal syntax error

EXTERNAL
	SMG$_ERRLIN,			! error at line n
	SMG$_ERRAT_LIN,			! error in line n at 'x'
	SMG$_ILLVAL,			! illegal value for Boolean
	SMG$_MISTERNAM,			! missing terminal name
	SMG$_NOTBOOCAP,			! not a boolean capability
	SMG$_SYNERR;			! syntax error

EXTERNAL
	SMG$$MASK_ADR,			! used by TPARSE action routines
	SMG$$CURRENT_LINE;		! current input line - maintained
					! for error messages

!
! OWN STORAGE:
!
!	NONE


%SBTTL 'SMG$$BOOLEAN_TABLES - TPARSE tables for Boolean capabilities'
!++
! FUNCTIONAL DESCRIPTION:
!
!	The following are the state tables used to parse Boolean
!	capabilities in a terminal definition. 
!
!--

$INIT_STATE (SMG$$A_BOOLEAN_STATES, SMG$$A_BOOLEAN_KEYWDS);
				! set up state tables, key words

!+
! Begin scanning loop.  Look for the start of a capability.
! Skip over blanks and comments.
!-

$STATE (BEGIN_SCAN,
    ((END_OF_LINE), BEGIN_SCAN, SMG$$NEXT_RECORD),
    ('!', BEGIN_SCAN, SMG$$NEXT_RECORD),
    ((CAPABILITY), BEGIN_SCAN, SMG$$BLANKS_OFF),
    (TPA$_LAMBDA, TPA$_EXIT)
    );

!+
! This state indicates the end of a line.  A comment also signals the
! end of a line.
!-

$STATE (END_OF_LINE,
    (TPA$_EOS, TPA$_EXIT),
    ('!', TPA$_EXIT),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! Find the capability name and determine if it's one that we expect.
! The string up to the '=' sign should be the capability name.  
!-

$STATE (CAPABILITY,
    ((BOOLEAN_NAME), EQUALS_BOOLEAN, SMG$$BLANKS_OFF),
    ('END', TPA$_FAIL),
    ('NUMERIC', TPA$_FAIL),
    ('STRING', TPA$_FAIL),
    ('BOOLEAN', BEGIN_SCAN),
    ('REQUIRE', TPA$_FAIL, SMG$$MISSING_END),
    ('NAME', TPA$_FAIL, SMG$$MISSING_END),
    (TPA$_SYMBOL, , NOT_BOOLEAN)
    );

!+
! Check here for a boolean name.
!-

$STATE (BOOLEAN_NAME,
    ('ADVANCED_VIDEO', TPA$_EXIT, , SMG$K_ADVANCED_VIDEO, SMG$$MASK_ADR),
    ('ANSI_CRT', TPA$_EXIT, , SMG$K_ANSI_CRT, SMG$$MASK_ADR),
    ('AUTO_MARGIN', TPA$_EXIT, , SMG$K_AUTO_MARGIN, SMG$$MASK_ADR),
    ('BACKSPACE', TPA$_EXIT, , SMG$K_BACKSPACE, SMG$$MASK_ADR),
    ('BLOCK_MODE', TPA$_EXIT, , SMG$K_BLOCK_MODE, SMG$$MASK_ADR),
    ('CURSOR_REPORT_ANSI', TPA$_EXIT, , SMG$K_CURSOR_REPORT_ANSI, SMG$$MASK_ADR),
    ('DEC_CRT', TPA$_EXIT, , SMG$K_DEC_CRT, SMG$$MASK_ADR),
    ('EDIT', TPA$_EXIT, , SMG$K_EDIT, SMG$$MASK_ADR),
    ('EIGHT_BIT', TPA$_EXIT, , SMG$K_EIGHT_BIT, SMG$$MASK_ADR),
    ('FULLDUP', TPA$_EXIT, , SMG$K_FULLDUP, SMG$$MASK_ADR),
    ('IGNORE_NEWLINE', TPA$_EXIT, , SMG$K_IGNORE_NEWLINE, SMG$$MASK_ADR),
    ('INSERT_MODE_NULLS', TPA$_EXIT, , SMG$K_INSERT_MODE_NULLS, SMG$$MASK_ADR),
    ('LOWERCASE', TPA$_EXIT, , SMG$K_LOWERCASE, SMG$$MASK_ADR),
    ('NO_ERASE', TPA$_EXIT, , SMG$K_NO_ERASE, SMG$$MASK_ADR),
    ('NO_SCROLL', TPA$_EXIT, , SMG$K_NO_SCROLL, SMG$$MASK_ADR),
    ('OVERSTRIKE', TPA$_EXIT, , SMG$K_OVERSTRIKE, SMG$$MASK_ADR),
    ('PRINTER_PORT', TPA$_EXIT, , SMG$K_PRINTER_PORT, SMG$$MASK_ADR),
    ('REGIS', TPA$_EXIT, , SMG$K_REGIS, SMG$$MASK_ADR),
    ('SCOPE', TPA$_EXIT, , SMG$K_SCOPE, SMG$$MASK_ADR),
    ('SIXEL_GRAPHICS', TPA$_EXIT, , SMG$K_SIXEL_GRAPHICS, SMG$$MASK_ADR),
    ('SOFT_CHARACTERS', TPA$_EXIT, , SMG$K_SOFT_CHARACTERS, SMG$$MASK_ADR),
    ('PHYSICAL_TABS', TPA$_EXIT, , SMG$K_PHYSICAL_TABS, SMG$$MASK_ADR),
    ('PHYSICAL_FF', TPA$_EXIT, , SMG$K_PHYSICAL_FF, SMG$$MASK_ADR),
    ('UNDERLINE', TPA$_EXIT, , SMG$K_UNDERLINE, SMG$$MASK_ADR),
    ('PRIVATE_BOO_1', TPA$_EXIT, , SMG$K_PRIVATE_BOO_1, SMG$$MASK_ADR),
    ('PRIVATE_BOO_2', TPA$_EXIT, , SMG$K_PRIVATE_BOO_2, SMG$$MASK_ADR),
    ('PRIVATE_BOO_3', TPA$_EXIT, , SMG$K_PRIVATE_BOO_3, SMG$$MASK_ADR),
    ('PRIVATE_BOO_4', TPA$_EXIT, , SMG$K_PRIVATE_BOO_4, SMG$$MASK_ADR),
    ('PRIVATE_BOO_5', TPA$_EXIT, , SMG$K_PRIVATE_BOO_5, SMG$$MASK_ADR),
    ('PRIVATE_BOO_6', TPA$_EXIT, , SMG$K_PRIVATE_BOO_6, SMG$$MASK_ADR),
    ('PRIVATE_BOO_7', TPA$_EXIT, , SMG$K_PRIVATE_BOO_7, SMG$$MASK_ADR),
    ('PRIVATE_BOO_8', TPA$_EXIT, , SMG$K_PRIVATE_BOO_8, SMG$$MASK_ADR),
    ('PRIVATE_BOO_9', TPA$_EXIT, , SMG$K_PRIVATE_BOO_9, SMG$$MASK_ADR),
    ('PRIVATE_BOO_10', TPA$_EXIT, , SMG$K_PRIVATE_BOO_10, SMG$$MASK_ADR),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! Found a boolean name, now look for a boolean value.  Skip over the
! intervening equals sign.  
!-

$STATE (EQUALS_BOOLEAN,
    ((END_OF_LINE), EQUALS_BOOLEAN, SMG$$NEXT_RECORD),
    ('=', BOOLEAN_CAP_VALUE, SMG$$STORE_CAP_MASK),
    (TPA$_SYMBOL, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

!+
! Get the value.  This is a boolean capability, so it better have a boolean
! value.
!-

$STATE (BOOLEAN_CAP_VALUE,
    ((END_OF_LINE), BOOLEAN_CAP_VALUE, SMG$$NEXT_RECORD),
    ((BOOLEAN_CAP), BEGIN_SCAN),
    (TPA$_SYMBOL, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

!+
! The only acceptable values for a boolean are 0 and 1.
!-

$STATE (BOOLEAN_CAP,
    (TPA$_DECIMAL, COMMA , STORE_BOOLEAN),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

$STATE (COMMA,
    (',', TPA$_EXIT, SMG$$BLANKS_OFF),
    (TPA$_BLANK, COMMA, SMG$$BLANKS_OFF),
    ((END_OF_LINE), TPA$_EXIT, SMG$$NEXT_RECORD),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );


%SBTTL 'NOT_BOOLEAN - signal an unknown capability name'
ROUTINE NOT_BOOLEAN =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	We just found a name that isn't boolean.  It could be a misspelling
!	or it could be a capability misplaced under the wrong heading.
!	Signal an error.
!
! CALLING SEQUENCE:
!
!
! 	status = NOT_BOOLEAN ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	AP;
    MAP 
	AP : REF BLOCK [,BYTE];

    SIGNAL_STOP (SMG$_ERRAT_LIN,
	 	 3, .SMG$$CURRENT_LINE,
		 .AP [TPA$L_TOKENCNT],
		 .AP [TPA$L_TOKENPTR],
		 SMG$_NOTBOOCAP)
    END;			! end of routine NOT_BOOLEAN

%SBTTL 'STORE_BOOLEAN - store boolean value'
ROUTINE STORE_BOOLEAN =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	We just found a decimal value.  If it's a 0 or 1, then store
!	it, else give an error.
!
! CALLING SEQUENCE:
!
!
! 	status = STORE_BOOLEAN ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP 
	AP : REF BLOCK [,BYTE];

    IF .AP [TPA$L_NUMBER] EQL 0 OR
       .AP [TPA$L_NUMBER] EQL 1
    THEN
	BEGIN
 	CALLG (.AP, SMG$$FLUSH_NUMERIC);
					! call routine to move value
	AP [TPA$V_BLANKS] = 1;		! blanks are significant now
	END
    ELSE
	SIGNAL_STOP (SMG$_ERRLIN,
		     1, .SMG$$CURRENT_LINE,
		     SMG$_ILLVAL);

    RETURN (SS$_NORMAL);

    END;				! end of routine STORE_BOOLEAN
!<BLF/PAGE>

END					! End of module SMG$BOOLEAN_TABLES

ELUDOM
