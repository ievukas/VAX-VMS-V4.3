MODULE setmain (IDENT='V04-000',
	MAIN=set$start,
	ADDRESSING_MODE(EXTERNAL=GENERAL,
		NONEXTERNAL=LONG_RELATIVE)
	) =
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  SET utility
!
! ABSTRACT:
!	This module contains the command processing and dispatch routines.
!
! ENVIRONMENT:
!	VAX native, user mode.
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  10-Mar-1983
!
! MODIFIED BY:
!
!	V03-006	JLV0344		Jake VanNoy		 8-APR-1984
!		Fix problem that option=keyword caused in not matching
!		option.
!
!	V03-005	BLS0291		Benn Schreiber		24-MAR-1984
!		Move SET PASSWORD into SETP0
!
!	V03-004	PRB0320		Paul Beck	11-Mar-1984  12:56
!		Add entry for SET CLUSTER
!
!	V03-003	GAS0175		Gerry Smith		25-Aug-1983
!		Add SHOW BROADCAST.
!
!	V03-002	GAS0153		Gerry Smith		 7-Jul-1983
!		Add SET AUDIT.
!
!	V03-001	GAS0115		Gerry Smith		 4-Apr-1983
!		Include SET LOGINS, which was inadvertently left out.
!
!--

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions

!
! Macro to set up two associated tables.  The first table is a list of
! descriptor addresses.  These descriptors contain the option names.
! The second table is a corresponding list of addresses of option routines.
!
! If a new option is added to SET, all that is required in this 
! module is to add one line of code, the option name, e.g. WORKING_SET.
! Then, the name of the global routine that is dispatched to from this 
! routine will be named SET$WORKING_SET.
!
MACRO

    option_name [option] = %EXACTSTRING(4, 0, option)%,

    option_address [option] = %NAME(%STRING('set$',%STRING(option)))%,

    option_declare [option] = %NAME(%STRING('set$',%STRING(option))) : NOVALUE%,

    make_table (name) = 
	LITERAL %NAME(%STRING(name,'_table_length')) = %LENGTH - 1;
	EXTERNAL ROUTINE option_declare(%REMAINING);
	OWN
	    %NAME(%STRING(name,'_option')) : VECTOR[%LENGTH - 1]
	    INITIAL (option_name(%REMAINING)),

	    %NAME(%STRING(name,'_routine')) : VECTOR[%LENGTH - 1]
	    INITIAL (option_address(%REMAINING));%;


FORWARD ROUTINE
    set$start,				! Main routine for SET
    handler;				! Condition handler for SET

EXTERNAL ROUTINE
    lib$put_output,
    cli$get_value,			! Get qualifier value
    cli$present;			! Test if qualifier present

GLOBAL set$exit_status : $BBLOCK[4]
			  INITIAL(1);


$SHR_MSGDEF	(SET, 119, LOCAL,
		(badlogic, error));
!
! Set up a table of all options, and another table pointing to the address
! of the routine for each option.
!

make_table (set,
		accounting,
    		audit,
    		broadcast,
    		card_reader,
    		cluster,
		day,
		device,
		directory,
		file,
    		login,
		magtape,
		printer,
		process,
		protection,
		rms_default,
		terminal,
		time,
		volume,
		working_set);



ROUTINE set$start =
BEGIN

!---
!
! This is the main program.  It gathers all the command inputs, and then
! dispatches to the appropriate routines.
!
!---

LOCAL
    loc_char,
    status,
    option : $BBLOCK[dsc$c_s_bln];

ENABLE handler;					! Enable the condition handler

!
! Interrogate the CLI to determine which option one was requested, and
! dispatch to the appropriate routine.
!
$init_dyndesc(option);

IF NOT (status = cli$get_value(%ASCID 'OPTION', option))
THEN
    BEGIN
    SIGNAL_STOP(.status);
    END;

option[dsc$w_length] = MINU (.option[dsc$w_length], 4);

!
! look for xxx=yyy to trim length of search string.
!

loc_char=CH$FIND_CH (.option[dsc$w_length], .option[dsc$a_pointer], %ASCII '=');
If .loc_char NEQ 0 THEN 
    option[dsc$w_length] = .loc_char - .option[dsc$a_pointer];

loc_char=CH$FIND_CH (.option[dsc$w_length], .option[dsc$a_pointer], %ASCII ':');
If .loc_char NEQ 0 THEN 
    option[dsc$w_length] = .loc_char - .option[dsc$a_pointer];

set$exit_status = set$_badlogic;	! if loop fails, exit with error

INCR index FROM 0 TO set_table_length - 1 DO
    BEGIN
    IF CH$EQL(.option[dsc$w_length], .option[dsc$a_pointer],
	      .option[dsc$w_length], set_option[.index])
    THEN
	BEGIN
	set$exit_status = 1;	
	(.set_routine[.index])();
	EXITLOOP
	END;
    END;

IF .set$exit_status NEQ set$_badlogic
    THEN
	set$exit_status = .set$exit_status OR sts$m_inhib_msg;

RETURN .set$exit_status;	! Exit 
END;

ROUTINE handler (sigargs, mechargs) =
BEGIN

!---
!
! This routine is a condition handler established by the main
! routine.  It saves the most severe condition for the exit status.
!
!---

MAP
    sigargs : REF $BBLOCK,
    mechargs : REF $BBLOCK;
BIND
    signame = sigargs[chf$l_sig_name] : $BBLOCK;	! Name of signal


IF .set$exit_status EQL 1			! If no errors yet, use
THEN set$exit_status = .signame;		! this one.

IF NOT .signame					! If an error signal
AND .signame[sts$v_severity]			! and severity is worse
GTRU .$BBLOCK[set$exit_status, sts$v_severity] ! than current saved severity
THEN set$exit_status = .signame;		! then save it for exit

RETURN ss$_resignal;				! Resignal to get message
END;

END
ELUDOM
