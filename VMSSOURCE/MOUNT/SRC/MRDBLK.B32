MODULE MRDBLK (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Levels 1 & 2
!
! ABSTRACT:
!
!	This routine reads a block from the disk being mounted.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  18-Oct-1977  11:35
!
! MODIFIED BY:
!
!	V03-002	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V03-001	STJ0246		Steven T. Jeffreys,	04-Apr-1982
!		Create a common I/O routine that will be used for
!		all sycnronous I/O done within $MOUNT.
!
!	V02-001	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:38
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';


FORWARD ROUTINE
	READ_BLOCK,			! read a disk block
	WRITE_BLOCK;			! write a disk block

GLOBAL ROUTINE READ_BLOCK (LBN, BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the indicated block from the device that
!	CHANNEL is assigned to.
!
! CALLING SEQUENCE:
!	READ_BLOCK (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: LBN of block
!	ARG2: address of buffer to read into
!
! IMPLICIT INPUTS:
!	CHANNEL: channel number to use
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	I/O or system service status of request
!
! SIDE EFFECTS:
!	block read
!
!--

BEGIN

LOCAL
	STATUS,				! system status code
	IO_STATUS	: VECTOR [2];	! I/O status block

EXTERNAL
	CHANNEL;			! channel number for I/O

STATUS = DO_IO (CHAN = .CHANNEL,
		FUNC = IO$_READLBLK,
		IOSB = IO_STATUS[0],
		EFN  = MOUNT_EFN,
		P1   = .BUFFER,
		P2   = 512,
		P3   = .LBN);

IF .STATUS THEN STATUS = .(IO_STATUS[0])<0,16>;
RETURN .STATUS;

END;					! end of routine READ_BLOCK

GLOBAL ROUTINE WRITE_BLOCK (LBN, BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the indicated block to the device that
!	CHANNEL is assigned to.
!
! CALLING SEQUENCE:
!	WRITE_BLOCK (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: LBN of block
!	ARG2: address of buffer to write from
!
! IMPLICIT INPUTS:
!	CHANNEL: channel number to use
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	I/O or system service status of request
!
! SIDE EFFECTS:
!	block written
!
!--

BEGIN

LOCAL
	STATUS,				! system status code
	IO_STATUS	: VECTOR [2];	! I/O status block

EXTERNAL
	CHANNEL;			! channel number for I/O

STATUS = DO_IO (CHAN = .CHANNEL,
		FUNC = IO$_WRITELBLK,
		IOSB = IO_STATUS[0],
		EFN  = MOUNT_EFN,
		P1   = .BUFFER,
		P2   = 512,
		P3   = .LBN);

IF .STATUS THEN STATUS = .(IO_STATUS[0])<0,16>;
RETURN .STATUS;

END;					! end of routine WRITE_BLOCK

GLOBAL ROUTINE COMMON_IO (EFN,CHAN,FUNC,IOSTS,ASTADR,ASTPRM,P1,P2,P3,P4,P5,P6)=

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the common I/O routine for all synchronous I/O
!	done by the $MOUNT system service.  Event flags are used very
!	cautiously to prevent confusion arising from an outside agent
!	setting and clearing event flags indiscrimenently.
!
! CALLING SEQUENCE:
!	Identical to $QIO.  A macro, DO_IO, has been defined in MOUDEF
!	so that existing code can use this routine by replacing the
!	call to $QIOW with an invokation of DO_IO without having to
!	change the order or names of routine arguements.
!
! INPUT PARAMETERS:
!	See $QIOW for the details.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	I/O or system service status of request
!
! SIDE EFFECTS:
!	Some I/O has been attempted, and at exit, the event flag
!	MOUNT_EFN is always set.
!
!--

BEGIN					! Start of routine COMMON_IO

LOCAL
	IOSB		: REF BBLOCK VOLATILE,
	IO_STATUS	: BBLOCK [8],
	STATUS;

! If an I/O status block was not specified, use a local one.
!

IF (IOSB = .IOSTS) EQL 0
THEN
    BEGIN
    CH$FILL (0, 8, IO_STATUS);
    IOSB = IO_STATUS;
    END;

! Issue the I/O request.
!

STATUS = $QIOW	(EFN    = .EFN,
		 CHAN	= .CHAN,
		 FUNC	= .FUNC,
		 IOSB	= .IOSB,
		 ASTADR = .ASTADR,
		 ASTPRM = .ASTPRM,
		 P1	= .P1,
		 P2	= .P2,
		 P3	= .P3,
		 P4	= .P4,
		 P5	= .P5,
		 P6	= .P6
		);

! If the return status from $QIOW indicates success, make sure that
! the I/O actually completed.  If it did not, then wait for the event
! flag again, after resetting it to a known state.
!

IF .STATUS
THEN
    BEGIN
    WHILE (.IOSB [0,0,16,0] EQL 0) DO
	BEGIN
	$CLREF (EFN = .EFN);
	IF (.IOSB [0,0,16,0] EQL 0)
	THEN
	    $WAITFR (EFN = .EFN);
	END;
    STATUS = .IOSB [0,0,16,0];
    END;
    

! Set the specified event flag and return.
!

$SETEF (EFN = .EFN);
RETURN (.STATUS)
END;					! End of routine COMMON_IO

END
ELUDOM
