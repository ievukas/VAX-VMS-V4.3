MODULE INSPRSOLD (			! Parse old form of commands
			IDENT = 'V04-000',
			ADDRESSING_MODE(EXTERNAL = GENERAL)
		 ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Install
!
! ABSTRACT:
!
!	This module controls command parsing and processing.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
! AUTHOR:  Bob Grosso, June 1981
!
! Modified by:
!
!	V03-007	MSH0061		Michael S. Harvey	5-Jul-1984
!		Add EXEONLY support.
!
!	V03-006	MSH0055		Michael S. Harvey	31-May-1984
!		Prevent infinite loops on command input errors.
!
!	V03-005	MSH0015		Michael S. Harvey	6-Mar-1984
!		Clarify error message for /REPLACE command.
!
!	V03-004	BLS0256		Benn Schreiber		27-Dec-1983
!		Remove conflicting qualifier checking, now done in cld.
!		Allow /DELETE even if the file has been deleted.
!
!	V03-003	BLS0245		Benn Schreiber		27-Oct-1983
!		Correct severity of FAIL message for cases where WARNING
!		is appropriate.
!
!	V03-002	RPG0002		Bob Grosso		13-Sep-1983
!		Re-activate header resident.
!		Enable /NOPURGE for old interface.
!
!	V03-001	RPG0001		Bob Grosso		29-Aug-1983
!		Print help from help library instead of program text.
!--

%SBTTL  'Declarations';

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions

REQUIRE	'SRC$:INSPREFIX.REQ';
REQUIRE	'LIB$:INSDEF.R32';


!
! Table of contents
!

FORWARD ROUTINE
    PROCESS_COMMAND,			! execute the command line
    DISPATCH,				! check for conflicting quals and
					!  dispatch to appropriate routine
    HELP;				! print interactive help

EXTERNAL
    INSOLDCMD;		! Tables describing the old Install commands

!
! External routines
!

EXTERNAL ROUTINE
	! Module INSMAIN
    INS$OPEN_FILE,				! handle file open processing
    INS$CLOSE_FILE,				! handle file close
    INS$CHECK_PRIV,				! enforce privilege check in case INSTALL is installed

    INS$CREATE,				! perform CREATE command
    INS$DELETE,				! perform DELETE command
    INS$GLOBAL,				! list global sections
    INS$LIST;				! list known file entries

EXTERNAL ROUTINE
    CLI$DCL_PARSE,			! Parse DCL command
    CLI$PRESENT,			! Check if entity present
    CLI$GET_VALUE,			! Get value from command line
    LBR$OUTPUT_HELP,			! print interactive help
    LIB$GET_INPUT,			! Get subcommands
    LIB$PUT_OUTPUT,			! echo command line, and print help
    PRV$SETPRIV,			! set privilege bits given ASCII string
    STR$COMPARE,			! compare two strings
    STR$CONCAT,				! concatenate strings
    STR$COPY_DX,			! Copy strings by descriptor
    STR$POSITION,    
    STR$RIGHT,
    STR$UPCASE;

EXTERNAL LITERAL
    CLI$_NEGATED,			! Qualifier was explicitly negated
    PRV$_INVNAM,			! Invalid privilege name
    PRV$_NOTUNQ;			! Privilege name not unique

EXTERNAL LITERAL
    INS$_EXISTS,			! Known File Entry already exists
    INS$_FAIL,				! Unable to <OPERATION> <FILENAME>
    INS$_FAILED,			! Failed to process request for <FILENAME>
    INS$_HELP,				! Enter /HELP for INSTALL help
    INS$_INTRNLERR,			! Internal Error: error detail
    INS$_INVPRVNAM,			! Invalid privilege name
    INS$_NOKFEFND,			! Known File not found
    INS$_NOLOAD,			! Network and sequentially loaded files are not installable
    INS$_PRVNOTUNQ,			! Privilege name not unique
    INS$_REMOVED;			! Known entry was removed

EXTERNAL
    INS$L_INTRNLERR,			! Store internal error descriptor
    INS$G_KFENAM,			! file name block declaration
    INS$GL_KFECHAN,			! channel for open known file
    INS$GL_CTLMSK : $BBLOCK,		! Control flags 
    INS$GL_REPLACE_MSK: $BBLOCK,	! Control flags saved for REPLACE
    INS$GQ_KFERNS : 			! buffer for resultant name 
	$BBLOCK,	
    INS$GL_KFEADR,			! id of file to be listed
    INS$GQ_KFEPRIVS : $BBLOCK,		! Quadword privilege mask
    INS$GQ_FILDSC : 			! descriptor to get filename returned
	$BBLOCK,			!  from CLI.
    INS$G_KFEFAB : $BBLOCK,		! file access block declaration

    CTL$GQ_PROCPRIV : $BBLOCK;		! privilege mask of user

OWN
    INPUT_DESC : DYN_DESC_DECL;		! command string input

BIND
    EXIT_DSC = 		$DESCRIPTOR ('EXIT'),
    FILE_SPEC_DSC = 	$DESCRIPTOR ('FILE_SPEC'),
    GLOBAL_DSC = 	$DESCRIPTOR ('GLOBAL'),
    LIST_DSC = 		$DESCRIPTOR ('LIST'),
    PRIVILEGED_DSC = 	$DESCRIPTOR ('PRIVILEGED'),
    CREATE_DSC = 	$DESCRIPTOR ('CREATE'),
    REPLACE_DSC = 	$DESCRIPTOR ('REPLACE'),
    DELETE_DSC = 	$DESCRIPTOR ('DELETE'),
    SLASH_HEL_DSC = 	$DESCRIPTOR ('/HEL'),
    SLASH_HELP_DSC = 	$DESCRIPTOR ('/HELP'),
    HEL_DSC = 		$DESCRIPTOR ('HEL'),
    HELP_DSC = 		$DESCRIPTOR ('HELP');


%SBTTL  'INS$PARSE_OLD_CMD';

GLOBAL ROUTINE  INS$PARSE_OLD_CMD ( PARSE_CMD_DESC, INTERACTIVE ) =
BEGIN
!+++
!
!   Command loop.  If not interactive, execute command and exit, else
!   print "INSTALL>", read in command, parse command and execute command.
!   Exit loop for ^Z and /EXIT
!
!---
MAP
    PARSE_CMD_DESC : REF $BBLOCK;

DO
    BEGIN
    LOCAL
	HLP_PTR,
	HLP_LEN,
	STATUS;

    IF .INTERACTIVE
    THEN
	BEGIN
	LOCAL
	    COPY_DESC : $BBLOCK [DSC$C_S_BLN],
	    DASH_PTR,			! Locate the '-' continuation character
	    LAST_WAS_CONT;		! Last command line was continued

					! print the prompt and get input line
	STATUS = LIB$GET_INPUT 
	  ( INPUT_DESC, $DESCRIPTOR('INSTALL> ') ); 
	IF .STATUS EQL RMS$_EOF		! EXIT on CNTRL Z
	THEN EXITLOOP;
	IF NOT .STATUS
	THEN
	    BEGIN
	    SIGNAL (.STATUS);
	    RETURN .STATUS;
	    END;

	DASH_PTR = CH$FIND_CH( .INPUT_DESC [DSC$W_LENGTH], 
			.INPUT_DESC [DSC$A_POINTER], %C'-');
	IF NOT CH$FAIL (.DASH_PTR)
	THEN
	    BEGIN			! Line continued
	    LAST_WAS_CONT = TRUE;
	    COPY_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    COPY_DESC [DSC$W_LENGTH] = .DASH_PTR - .INPUT_DESC [DSC$A_POINTER];
	    COPY_DESC [DSC$A_POINTER] = .INPUT_DESC [DSC$A_POINTER];
	    STR$COPY_DX ( .PARSE_CMD_DESC, COPY_DESC );	! copy dst from src
	    WHILE .LAST_WAS_CONT DO
		!
		!   while last was continued, input next line, 
		!   and concatenate with previous.
		!
		BEGIN
		STATUS = LIB$GET_INPUT( INPUT_DESC, $DESCRIPTOR ('_> ') ); ! get input line
		IF .STATUS EQL RMS$_EOF
		THEN
		    BEGIN
		    INTERACTIVE = FALSE;
		    EXITLOOP;
		    END;

		COPY_DESC [DSC$A_POINTER] = .INPUT_DESC [DSC$A_POINTER];

		DASH_PTR = CH$FIND_CH( .INPUT_DESC [DSC$W_LENGTH], .INPUT_DESC [DSC$A_POINTER], %c'-');
		IF CH$FAIL (.DASH_PTR)
		THEN
		    BEGIN
		    LAST_WAS_CONT = FALSE;
		    COPY_DESC [DSC$W_LENGTH] = .INPUT_DESC [DSC$W_LENGTH];
		    END
		ELSE
		    BEGIN
		    COPY_DESC [DSC$W_LENGTH] = .DASH_PTR - .INPUT_DESC [DSC$A_POINTER];
		    END;
		STR$CONCAT (.PARSE_CMD_DESC, .PARSE_CMD_DESC, COPY_DESC );
		END;			! While reading lines following continuation lines

	    IF NOT .INTERACTIVE THEN EXITLOOP;		! ^Z entered on continuation line
	    STR$UPCASE ( .PARSE_CMD_DESC, .PARSE_CMD_DESC );
	    END				! If line continued
	ELSE
	    STR$UPCASE ( .PARSE_CMD_DESC, INPUT_DESC );	! Upcase and copy to PARSE_CMD_DESC
	END;				! If interactive


    !+++
    !
    !	Parse command if there is something on the command line
    !
    !---
    IF ( .PARSE_CMD_DESC [DSC$W_LENGTH] NEQ 0 ) AND	! If there is something on the line 
	NOT CH$FAIL( CH$FIND_NOT_CH			! and there is something besides blanks
	( .PARSE_CMD_DESC [DSC$W_LENGTH], 
	.PARSE_CMD_DESC [DSC$A_POINTER], %C' '))	
    THEN
	BEGIN

	!+++
	!
	!   Check for /HELP request
	!
	!---

        HLP_PTR = STR$POSITION ( .PARSE_CMD_DESC, SLASH_HELP_DSC);		! Look for "/HELP" on command line
        HLP_LEN = 5;
        IF .HLP_PTR EQL 0							! If not found, look for "/HEL"
        THEN
	    BEGIN
	    HLP_PTR = STR$POSITION ( .PARSE_CMD_DESC, SLASH_HEL_DSC);
	    HLP_LEN = 4;
	    END;
        IF .HLP_PTR NEQ 0
        THEN
	    !
	    !  Help was requested, treat entire line as help request
	    !
	    BEGIN
	    !
	    !   replace "/HEL" or "/HELP" with "INSTALL" since lbr$output_help
	    !   needs to see the topic keyword.
	    !   Then call the help routine.
	    !
	    STR$RIGHT ( .PARSE_CMD_DESC, .PARSE_CMD_DESC, %REF (.HLP_PTR+.HLP_LEN) );
	    STR$CONCAT (.PARSE_CMD_DESC, $DESCRIPTOR ('INSTALL '),.PARSE_CMD_DESC);
					! Stick "INSTALL on front of help line
	    REPORT( HELP ( .PARSE_CMD_DESC ));
	    END				! Help was requested

        ELSE
	    BEGIN			! Command was something other than /HELP

	    !+++
	    !
	    !   No help requested, proceed to parsing command line
	    !   Must concatenate command line to "INSTALL" string for
	    !   cli$dcl_parse to execute.
	    !
	    !---
	    STR$CONCAT (.PARSE_CMD_DESC, $DESCRIPTOR ('INSTALL '),.PARSE_CMD_DESC);! Stick "INSTALL on front of command line for CLI parse
	    STATUS = CLI$DCL_PARSE( .PARSE_CMD_DESC, INSOLDCMD );	! parse the command line

	    IF .STATUS 
	    THEN 
	        BEGIN
	        IF CLI$PRESENT( EXIT_DSC )				! If /EXIT, then exit program
	        THEN EXITLOOP;

		!+++
		!
		!   Set flags for the qualifiers present in command line
		!
		!---

		INS$GL_CTLMSK = 0;					! clear flags
		INS$L_INTRNLERR = 0;					! clear internal error descriptor
		!
		!   INSTALL control flags
		!
		INS$GL_CTLMSK [INS$V_FILSPC] = CLI$PRESENT( FILE_SPEC_DSC );

		INS$GL_CTLMSK [INS$V_CREATE] = CLI$PRESENT( CREATE_DSC );
		INS$GL_CTLMSK [INS$V_DELETE] = CLI$PRESENT( DELETE_DSC );
		INS$GL_CTLMSK [INS$V_REPLACE] = CLI$PRESENT( REPLACE_DSC );
		INS$GL_CTLMSK [INS$V_LIST] = CLI$PRESENT( LIST_DSC );
		INS$GL_CTLMSK [INS$V_FULL] = CLI$PRESENT( %ASCID 'FULL' );
		INS$GL_CTLMSK [INS$V_GLOBAL] = CLI$PRESENT( GLOBAL_DSC );
		INS$GL_CTLMSK [INS$V_HELP] = CLI$PRESENT( %ASCID 'HELP' );
		INS$GL_CTLMSK [INS$V_EXIT] = CLI$PRESENT( %ASCID 'EXIT' );
		INS$GL_CTLMSK [INS$V_PROTECT] = CLI$PRESENT( %ASCID 'PROTECTED' );
		INS$GL_CTLMSK [INS$V_OPEN] = CLI$PRESENT( %ASCID 'OPEN' );
		INS$GL_CTLMSK [INS$V_HDRRES] = CLI$PRESENT( %ASCID 'HEADER_RESIDENT' );
		INS$GL_CTLMSK [INS$V_PRIV] = CLI$PRESENT( PRIVILEGED_DSC );
		INS$GL_CTLMSK [INS$V_SHARED] = CLI$PRESENT( %ASCID 'SHARED' );
		INS$GL_CTLMSK [INS$V_WRITABLE] = CLI$PRESENT( %ASCID 'WRITEABLE' );
		INS$GL_CTLMSK [INS$V_NOPURGE] = CLI$PRESENT( %ASCID 'NOPURGE' );
		INS$GL_CTLMSK [INS$V_EXEONLY] = CLI$PRESENT( %ASCID 'EXECUTE_ONLY' );

		!
		!	execute the command
		!
		REPORT (PROCESS_COMMAND( ) );
		END;			! If it parsed

	    END;			! Else command was something other than /HELP
	END;				! If the command line was non-blank
    END					! while
WHILE .INTERACTIVE;
RETURN TRUE;
END;			! Routine Parse_old_cmd


%SBTTL  'process_command';

ROUTINE  PROCESS_COMMAND =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Set up the control flags and call the appropriate routines to execute
!	the commands.
!
!  IMPLICIT INPUT:
!
!	CLI$DCL_PARSE has been called with the input command line.
!
!  OUTPUT:
!
!	none
!
!  IMPLICIT OUTPUT:
!
!	Set up global control flags, set up FAB for open file, store
!	any privilege mask specified and record the open channel number.
!
!  ROUTINE VALUE:
!
!	success
!	error:
!	    RMS from file open
!	    PRV$SETPRIV: if there are invalid privileges specified
!
!---
OWN
    PRIV_DSC : $BBLOCK [DSC$C_S_BLN]
			PRESET([DSC$B_CLASS] = DSC$K_CLASS_D);
LOCAL
    CMK_ARGLST : VECTOR [1],	! arguement list for change mode dispatcher
    STATUS;

    !
    !	Since INSTALL may be installed with CMKRNL privilege,
    !	check that user has CMKRNL privilege before allowing
    !	any operations other than /EXIT and /HELP operations.
    !
    CMK_ARGLST [0] = 0;
    STATUS = $CMKRNL (ROUTIN = INS$CHECK_PRIV, ARGLST = CMK_ARGLST);
    IF NOT .STATUS
    THEN
	BEGIN
	SIGNAL (SS$_NOCMKRNL);
	RETURN TRUE;
	END;

    IF .INS$GL_CTLMSK [INS$V_PRIV]
    THEN
	BEGIN
	LOCAL
	    ALL_PRIVS;	! boolean

	ALL_PRIVS = TRUE;						! turn on all privs by default
	CH$FILL (0, 8, INS$GQ_KFEPRIVS);				! initialize privilege quadword to zeros
	WHILE CLI$GET_VALUE ( PRIVILEGED_DSC, PRIV_DSC ) DO
	    BEGIN
	    ALL_PRIVS = FALSE;						! turn off default
	    SELECT PRV$SETPRIV (PRIV_DSC, INS$GQ_KFEPRIVS) OF	! set the appropriate bit in the mask
		SET

		[PRV$_INVNAM]:
		    BEGIN
		    SIGNAL (INS$_INVPRVNAM, 1, PRIV_DSC);
		    RETURN TRUE;
		    END;

		[PRV$_NOTUNQ]:
		    BEGIN
		    SIGNAL (INS$_PRVNOTUNQ, 1, PRIV_DSC);
		    RETURN TRUE;
		    END;
		TES;
	    END;		! end while there are more privs
	IF .ALL_PRIVS					! No privs specified with /PRIV so
	THEN CH$FILL (-1, 8, INS$GQ_KFEPRIVS);		! use default of all privs set
	END;

!+++
!
!   Act on the command entered
!
!---

IF (NOT .INS$GL_CTLMSK [INS$V_FILSPC] ) 
THEN
    !
    !	A file spec wasn't entered, therefore the only legal qualifiers
    !	are /LIST and /GLOBAL and /FULL
    !
    BEGIN
    LOCAL
	STATUS;

    IF (.INS$GL_CTLMSK [INS$V_LIST] OR
	.INS$GL_CTLMSK [INS$V_FULL])
    THEN
	BEGIN
	STATUS = INS$LIST (0);
	IF NOT .STATUS 
	THEN 
	    SIGNAL (((INS$_FAILED AND NOT STS$M_SEVERITY) OR STS$K_WARNING),
			1, LIST_DSC, .STATUS);
	RETURN TRUE;
	END;

    IF .INS$GL_CTLMSK [INS$V_GLOBAL]
    THEN
	BEGIN
	STATUS = INS$GLOBAL ();
	IF NOT .STATUS 
	THEN 
	    SIGNAL (((INS$_FAILED AND NOT STS$M_SEVERITY) OR STS$K_WARNING),
				1, GLOBAL_DSC, .STATUS);
	RETURN TRUE;
	END;
    END


!
!   A file name was specified
!

ELSE
    BEGIN
    LOCAL
	OPEN_STATUS,
	STATUS;

    !
    ! Get the file spec from the CLI
    !
    REPORT( CLI$GET_VALUE ( FILE_SPEC_DSC, INS$GQ_FILDSC) );
    OPEN_STATUS = INS$OPEN_FILE ();
    IF NOT .OPEN_STATUS
    THEN 
	INS$CLOSE_FILE ();

    !+++
    !
    !   Process file operations
    !
    !---
    DISPATCH ();

    INS$CLOSE_FILE ();

    END;
RETURN TRUE;
END;		! routine process_command


%SBTTL	'dispatch';
ROUTINE DISPATCH =
!+++
!
!
!---
BEGIN
LOCAL
    STATUS;

    IF NOT .INS$G_KFEFAB[FAB$L_STS]
	AND NOT .INS$GL_CTLMSK[INS$V_DELETE]
	THEN RETURN TRUE;
    IF .INS$GL_CTLMSK [INS$V_DELETE] 
    THEN
	!
	!   if /delete requested then /replace/create are invalid
	!   if /list requested then all the remaining known files will
	!   be listed after the delete
	!
	BEGIN
	    STATUS = INS$DELETE (); 		! delete it
	IF NOT .STATUS
	THEN
	    BEGIN 
	    SIGNAL (((INS$_FAIL AND NOT STS$M_SEVERITY) OR STS$K_WARNING),
			2, DELETE_DSC, INS$GQ_KFERNS, .STATUS);

	    IF .STATUS EQL INS$_INTRNLERR
	    THEN
		SIGNAL (INS$_INTRNLERR, 1, .INS$L_INTRNLERR);
	    END
	ELSE IF .STATUS EQL INS$_REMOVED
	    THEN SIGNAL(.STATUS,1,INS$GQ_KFERNS);
	IF (.INS$GL_CTLMSK [INS$V_LIST] OR .INS$GL_CTLMSK [INS$V_FULL])
	THEN REPORT (INS$LIST (0));
	END



    ELSE
	IF .INS$GL_CTLMSK [INS$V_REPLACE]
	THEN
	    !
	    !	Replace has been requested.  There can be no other qualifiers.
	    !	The entry must be deleted and recreated.
	    !	If /list requested with /replace then do the replace and
	    !	list the new entry.
	    !
	    BEGIN
		!
		!   Delete and recreate with new attributes
		!
		INS$GL_CTLMSK [INS$V_DELETE] = TRUE;	! set delete flag
		INS$GL_REPLACE_MSK = 0;
		STATUS = INS$DELETE ();	 		! recreate it
		IF NOT .STATUS
		THEN
		    BEGIN 
		    SIGNAL (((INS$_FAIL AND NOT STS$M_SEVERITY)
				OR STS$K_WARNING),
				2, DELETE_DSC, INS$GQ_KFERNS, .STATUS);

		    IF .STATUS EQL INS$_INTRNLERR
		    THEN
			SIGNAL (INS$_INTRNLERR, 1, .INS$L_INTRNLERR);
		    END;
		INS$GL_KFEADR = 0;			! Entry has gone away
		INS$CLOSE_FILE ();

		INS$OPEN_FILE ();
		INS$GL_REPLACE_MSK [INS$V_LIST] = .INS$GL_CTLMSK [INS$V_LIST];
		INS$GL_REPLACE_MSK [INS$V_FULL] = .INS$GL_CTLMSK [INS$V_FULL];
		INS$GL_CTLMSK = .INS$GL_REPLACE_MSK;	! use replace mask
		INS$GL_CTLMSK [INS$V_CREATE] = TRUE;	! set create flag
		INS$GL_CTLMSK [INS$V_DELETE] = FALSE;	! clear delete flag
		IF .INS$GL_KFEADR EQL 0 
		THEN 
		    STATUS = INS$CREATE () 		! recreate it
		ELSE
		    STATUS = INS$_EXISTS;

		IF NOT .STATUS
		THEN
		    BEGIN 
		    SIGNAL (INS$_FAIL, 2, REPLACE_DSC, INS$GQ_KFERNS,.STATUS);

		    IF .STATUS EQL INS$_INTRNLERR
		    THEN
			SIGNAL (INS$_INTRNLERR, 1, .INS$L_INTRNLERR);
		    END;

	    IF (.INS$GL_CTLMSK [INS$V_LIST] OR .INS$GL_CTLMSK [INS$V_FULL])
	    THEN REPORT (INS$LIST (.INS$GL_KFEADR));
	    IF .INS$GL_CTLMSK [INS$V_GLOBAL] 
	    THEN REPORT (INS$GLOBAL (.INS$GL_KFEADR));

	    END		! /REPLACE


	ELSE
	    !
	    !   filespec given but not for replace or delete.
	    !   A /LIST without /CREATE requests list of given file's KFE.
	    !   A /LIST with /CREATE requests file be added to KFE and
	    !   that entry be listed.
	    !   A filename without /LIST or /CREATE is an implied /CREATE.
	    !
	    BEGIN
	    IF (.INS$GL_CTLMSK [INS$V_LIST] OR .INS$GL_CTLMSK [INS$V_FULL] OR
		.INS$GL_CTLMSK [INS$V_GLOBAL]) AND 
		NOT .INS$GL_CTLMSK [INS$V_CREATE]
	    THEN
		BEGIN
		IF .INS$GL_KFEADR EQL 0 
		THEN 
		    BEGIN
		    SIGNAL (((INS$_FAIL AND NOT STS$M_SEVERITY)
					OR STS$K_WARNING),
				2, LIST_DSC, INS$GQ_KFERNS, INS$_NOKFEFND);
		    RETURN TRUE;
		    END;
		END
	    ELSE
		BEGIN
		INS$GL_CTLMSK [INS$V_CREATE] = TRUE;	! set create flag
		IF .INS$GL_KFEADR EQL 0 
		THEN 
		    STATUS = INS$CREATE () 		! Create it
		ELSE
		    STATUS = INS$_EXISTS;

		IF NOT .STATUS
		THEN
		    BEGIN 
		    SIGNAL (INS$_FAIL, 2, CREATE_DSC, INS$GQ_KFERNS, .STATUS);

		    IF .STATUS EQL INS$_INTRNLERR
		    THEN
			SIGNAL (INS$_INTRNLERR, 1, .INS$L_INTRNLERR);
		    END;
		END;

	    IF (.INS$GL_CTLMSK [INS$V_LIST] OR .INS$GL_CTLMSK [INS$V_FULL])
	    THEN REPORT (INS$LIST (.INS$GL_KFEADR));
	    IF .INS$GL_CTLMSK [INS$V_GLOBAL] 
	    THEN REPORT (INS$GLOBAL (.INS$GL_KFEADR));
	    END;
RETURN TRUE;
END;		! Routine dispatch


%SBTTL  'help';

ROUTINE HELP ( HLP_DSC) =
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Conduct interactive help session
!
!  INPUT:
!	hlp_dsc : Descriptor of command, possibly with qualifier(s) for
!		  which help is requested
!
!  OUTPUT:
!	Interactive help session
!
!  ROUTINE VALUE:
!	Low bit set for success 
!	unless an error is returned from lbr$output_help.
!---
BEGIN
LOCAL
    HLP_FLAGS;

HLP_FLAGS = HLP$M_PROCESS OR HLP$M_GROUP OR HLP$M_SYSTEM;
REPORT ( LBR$OUTPUT_HELP (LIB$PUT_OUTPUT, 0, .HLP_DSC,
		$DESCRIPTOR('INSTALHLP'), HLP_FLAGS, LIB$GET_INPUT) );
RETURN TRUE;
END;

END		! Module INSPRSOLD
ELUDOM
