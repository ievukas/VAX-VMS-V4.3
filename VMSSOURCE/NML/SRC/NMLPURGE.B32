%TITLE 'NML PURGE permanent parameter module'
MODULE NML$PURGE (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for processing NCP PURGE commands.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-006	MKP0006		Kathy Perko		2-July-1984
!		If doing a PURGE KNOWN NODES, and there is no executor
!		don't return an error message to NCP.
!
!	V03-005	MKP0005		Kathy Perko		5-Feb-1984
!		Fix key initialization for PURGE KNOWN entities.
!
!	V03-004	MKP0004		Kathy Perko		4-Aug-1983
!		Make changes to change the node permanent database to use
!		multiple ISAM keys.  This is for performance reasons.
!
!	V03-003	MKP0003		Kathy Perko		14-Sept-1982
!		When the logging sink node id the executor, use a node
!		address of zero.  This allows the logging database to be
!		transportable.
!
!	V03-002	MKP0002		Kathy Perko		29-June-1982
!		Modify PURGE KNOWN processing to be able to purge multiple
!		entries with the same entity ID (for X25-PROTOCOL GROUPS).
!		Change qualifier handling to use entity qualifier Parameter
!		semantic Table (PST) address instead of Network Management
!		parameter code.
!
!	V03-001	MKP0001		Kathy Perko		16-June-1982
!		Add entity qualifier handling.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$PURGEKNOWN	: NOVALUE,
    NML_PURKNOWN	: NOVALUE,
    NML$PURGE_KNOWN_NODES: NOVALUE,
    NML_PURGE_KNOWN_NODES: NOVALUE,
    NML$PURLOGGING  	: NOVALUE,
    NML$PURENTITY	: NOVALUE,
    NML_PURENTITY	: NOVALUE,
    NML_PURLOGGING	: NOVALUE,
    NML_PURLOGALL;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

!
! Data base entity matching function codes.
!
LITERAL
    NML$C_ALWAYS  = 0,			! Always match
    NML$C_MATCH   = 1,			! Match if parameter is present
    NML$C_NOMATCH = 2;			! Match if parameter is not present

!
! OWN STORAGE:
!

!
! Event logging parameter buffer.
!
OWN
    NML$T_EVTBUFFER : VECTOR [NML$K_RECBFLEN, BYTE];
BIND
    NML$Q_EVTBFDSC = UPLIT (NML$K_RECBFLEN, NML$T_EVTBUFFER) : VECTOR [2];
!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTBUFFER : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTBFDSC  : VECTOR [2];

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_RECDELET;

EXTERNAL ROUTINE
    NMA$SEARCHFLD,
    NML$ADDEVENTS,
    NML$ADDFILTERS,
    NML$BLD_REPLY,
    NML$DEL_FIELDS,
    NML$DELETRECORD,
    NML$GETNXTSNK,
    NML$GETRECOWNER,
    NML$MATCHRECORD,
    NML$READ_KNOWN_NODE_REC,
    NML$READRECORD,
    NML$REMSRC,
    NML$SAVEVENTS,
    NML$SEND,
    NML$WRITERECORD;


%SBTTL 'NML$PURGEKNOWN  Purge parameters for known entities'
GLOBAL ROUTINE NML$PURGEKNOWN (ENTITY, ENTITY_LEN, ENTITY_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the a set of parameters from the permanent
!	data base entry for each entity of the specified type.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	ENTITY_LEN	Entity ID length (used only for X25-PROTOCOL GROUPS).
!	ENTITY_ADR	Entity ID address (used only for X25-PROTOCOL GROUPS).
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

BEGIN

LOCAL
    deleteflg,			! Record delete flag
    fid,			! File id code
    matchflg,			! Record matching flag
    prm;			! Parameter code

fid = .nml$ab_entitydata [.entity, eit$b_fileid];
matchflg = nml$c_always;
!
! If it's a PURGE ALL command, set a flag so the entity will be completely
! removed from the permanent database.
!
IF .nml$gl_prs_flgs [nml$v_prs_all] THEN
    deleteflg = true
ELSE
    deleteflg = false;

SELECTONEU .fid OF
    SET
    [nma$c_opn_log]:
	BEGIN
	!
	! Purge parameters for all logging sink types.
	!
        nml$purlogging (.entity, nma$c_snk_con, 0); ! Console
        nml$purlogging (.entity, nma$c_snk_fil, 0); ! File
        nml$purlogging (.entity, nma$c_snk_mon, 0); ! Monitor
        END;

    [nma$c_opn_x25,
     nma$c_opn_x29]:
	BEGIN
	matchflg = nml$c_match;
	prm = .nml$ab_entitydata [.entity, eit$w_key];
	nml_purknown (.fid, .entity, .entity_len, .entity_adr,
				.matchflg, .deleteflg, .prm);
	END;

    [OTHERWISE]:
	BEGIN
	nml_purknown (.fid, .entity, 0, 0, .matchflg, .deleteflg, 0);
	END;
    TES;

END;				! End of NML$PURGEKNOWN

%SBTTL 'NML_PURKNOWN  Purge parameters for known entities'
ROUTINE NML_PURKNOWN (FID, ENTITY, ENTITY_LEN, ENTITY_ADR,
				MAT, DEL, PRM) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine is called for PURGE KNOWN operations for all entities
!	except nodes.  It deletes permanent data base information for each
!	permanent database record that it matches.
!
! FORMAL PARAMETERS:
!
!	FID		File id code.
!	ENTITY		Entity type code.
!	ENTITY_LEN	Entity ID length (used only for X25-PROTOCOL GROUPS).
!	ENTITY_ADR	Entity ID address (used only for X25-PROTOCOL GROUPS).
!	MAT		Qualifier flag (match, nomatch, always).
!	DEL		Delete flag (TRUE=yes, FALSE=no).
!	PRM		Parameter code (if applicable).
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

BEGIN

LOCAL
    fldadr,
    fldsize,
    msgsize,				! Message size
    key,				! Temporary record key buffer
    recdsc  : VECTOR [2],		! Record descriptor
    status;
!
! Add parameters to every entity in the permanent database file.
!
key = 0;
WHILE nml$readrecord (.fid, key, 0, nml$gq_recbfdsc, recdsc, 0) DO
    BEGIN
    status = true;
    fldadr = 0;
    fldsize = 0;

    IF .mat EQL nml$c_match THEN
	BEGIN
	IF NOT nma$searchfld (recdsc, .prm, fldsize, fldadr) THEN
	    status = false
	ELSE
	    !
	    ! If the entity takes a qualifier (e.g. X25-PROTOCOL GROUPS),
	    ! it has more than one entry in the database).  Use the
	    ! supplied entity ID to identify all of the entity's entries.
	    !
	    BEGIN
	    IF .entity_len GTR 0 THEN
		BEGIN
		IF NOT CH$EQL (.entity_len, .entity_adr,
				.fldsize, .fldadr) THEN
		    status = false;
		END;
	    END;
	END;

    IF .status THEN
	BEGIN
	nml_purentity (.entity, .del, recdsc, key, 0);
	!
	! Build and send the response message.
	!
	nml$bld_reply (nml$ab_msgblock, msgsize);
	nml$send (nml$ab_sndbuffer, .msgsize);
	END;

    key = .key + 1;			! iNCREMENT RECORD KEY
    END;
END;				! End of NML_PURKNOWN

%SBTTL 'NML$PURGE_KNOWN_NODES  	Purge known nodes'
GLOBAL ROUTINE NML$PURGE_KNOWN_NODES (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine purges all entries for nodes that are in the permanent
!	data base.  Remote nodes are then purged.  Loop nodes are purged
!	last. The executor node is purged last.
!
! FORMAL PARAMETERS:
!	ENTITY		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN
IF NOT .nml$gl_prs_flgs [nml$v_prs_loopg] THEN
    !
    ! Purge remote nodes.
    !
    nml_purge_known_nodes (nml$c_node);
!
! Return loop nodes.
!
IF .nml$gl_prs_flgs [nml$v_prs_loopg] OR
   .nml$gl_prs_flgs [nml$v_prs_all] THEN
    nml_purge_known_nodes (nml$c_loopnode);
IF NOT .nml$gl_prs_flgs [nml$v_prs_loopg] THEN
    !
    ! Return executor node.
    !
    nml$purentity (nml$c_executor, 0, 0, 0, 0, 0);

END;				! End of NML$PURGE_KNOWN_NODES

%SBTTL 'NML_PURGE_KNOWN_NODES  Purge parameters for known nodes'
ROUTINE NML_PURGE_KNOWN_NODES (ENTITY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine deletes parameters from permanent data base information
!	for known nodes or loopnodes.
!
! FORMAL PARAMETERS:
!	ENTITY		Entity type code.
!
! SIDE EFFECTS:
!	Signals errors.
!
!--

BEGIN

LOCAL
    deleteflg,
    recdsc:	VECTOR [2],
    rewind_flag,
    msgsize;

!
! If processing a PURGE ALL command, set up to delete the entire record from
! the permanent database.  Since the only valid parameter for loopnodes is
! CIRCUIT, purging CIRCUIT is the same as PURGE ALL for loopnodes.
!
IF .nml$gl_prs_flgs [nml$v_prs_all] OR
   .nml$gl_prs_flgs [nml$v_prs_loopg] THEN
    deleteflg = true
ELSE
    deleteflg = false;
!
! Add parameters to every record in the file.
!
rewind_flag = true;
WHILE nml$read_known_node_rec (.entity,
				nml$gq_recbfdsc,
				recdsc,
				.rewind_flag) DO
    BEGIN
    rewind_flag = false;
    nml_purentity (.entity, .deleteflg, recdsc, UPLIT (0), 0);
    !
    ! Build and send the response message.
    !
    nml$bld_reply (nml$ab_msgblock, msgsize);
    nml$send (nml$ab_sndbuffer, .msgsize);
    END;
END;				! End of NML_PURGE_KNOWN_NODES

%SBTTL 'NML$PURLOGGING  Purge logging parameters'
GLOBAL ROUTINE NML$PURLOGGING (ENTITY, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the permanent data base entry for the specified
!	logging entity.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	SNK		Logging sink type.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS	Message parsing flags.
!	NML$GW_EVTSNKADR Sink node address.
!
!--

BEGIN

LOCAL
    FID,				! File id code
    MSGFLG,				! Response message flag
    MSGSIZE,				! Message size
    KEY,				! Temporary record key buffer
    OWNER,				! Search key
    RECDSC  : VECTOR [2];		! Record descriptor

!
! If this is the event sink (ESI) parameter group then call the normal
! routine.
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG] THEN
    BEGIN
    NML$PURENTITY (NML$C_SINK, 1, SNK, 0, 0, 0);
    RETURN
    END;

!
! The event filter parameter group is handled specially.
!
NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;		   ! Initialize message flags
FID = .NML$AB_ENTITYDATA [.ENTITY, EIT$B_FILEID];  ! Get file id
OWNER = .NML$AB_ENTITYDATA [.ENTITY, EIT$W_KEY];   ! Get search key
KEY = 0;					   ! Initialize record key
!
! If this is all (no parameters) then purge all logging to the specified
! sink type (console, monitor, or file).
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL] THEN
    BEGIN
    MSGFLG = NML_PURLOGALL (.SNK);
    END
ELSE
!
! Purge the event filter (EFI) database.
!
    BEGIN
    !
    ! If purging logging for the executor node, use a sink node address of
    ! zero.  Using zero for the executor node allows the logging database
    ! to be transported to another node and have the events logged at the
    ! new executor.
    !
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] THEN
	NML$GW_EVTSNKADR = 0;
    !
    ! If there is a record in the logging database for the sink node specified
    ! in the NICE message, purge the logging filters.
    !
    IF NML$MATCHRECORD (.FID,
			NML$GQ_RECBFDSC,
			KEY,
			.OWNER, 2, NML$GW_EVTSNKADR,
			0, 0, 0,		! No qualifier
			RECDSC) THEN
	BEGIN
	NML_PURLOGGING (.SNK, .NML$GW_EVTSNKADR, RECDSC, KEY);
	MSGFLG = TRUE;
	END;
    END;
!
! Set up to add entity id (sink type code) to NICE response message.
!
NML$Q_ENTBFDSC [0] = 1;
NML$Q_ENTBFDSC [1] = NML$T_ENTBUFFER;
NML$T_ENTBUFFER<0,8> = .SNK;
NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;		 ! Set entity descriptor flag
NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC; ! Add entity descriptor pointer
!
! Build and send the NICE response message.
!
IF .MSGFLG THEN
    BEGIN
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);
    END;

END;				! End of NML$PURLOGGING

%SBTTL 'NML$PURENTITY  Delete entity parameters'
GLOBAL ROUTINE NML$PURENTITY (ENTITY, ENTITY_LEN, ENTITY_ADR,
				QUAL_PST, QUAL_LEN, QUAL_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes a set of parameters from the permanent data 
!	base entry for the specified entity.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	ENTITY_LEN	Byte count of entity id string.
!	ENTITY_ADR	Address of entity id string.
!	QUAL_PST	Address of Qualifier's Parameter Semantic Table (PST)
!			address
!	QUAL_LEN	Byte count of qualifier id string
!	QUAL_ADR	Address of qualifier id string
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS	Message parsing flags.
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

BEGIN

MAP
    nml$gb_entity_format : BYTE SIGNED;

LOCAL
    deleteflg,
    fid,				! File id code
    msgsize,				! Message size
    key,				! Temporary record key buffer
    key_value_dsc: VECTOR [2],		! ID of node being purged (not used
					!	for other entities.
    owner,				! Search key
    recdsc    : VECTOR [2],		! Record descriptor
    temp,
    status;
!
! Set the flag to indicate record deletion (or not).
!
IF .nml$gl_prs_flgs [nml$v_prs_all] OR
   .nml$gl_prs_flgs [nml$v_prs_loopg] THEN
    deleteflg = true
ELSE
    deleteflg = false;
!
! Add parameters to the entity record in the file.
!
fid = .nml$ab_entitydata [.entity, eit$b_fileid]; ! Get file id
owner = .nml$ab_entitydata [.entity, eit$w_key];  ! Get search key
key_value_dsc [0] = .entity_len;
key_value_dsc [1] = .entity_adr;
!
! Find the record in the file.
!
IF .fid NEQ nma$c_opn_node THEN
    BEGIN
    key = 0;
    status = nml$matchrecord (.fid,
			nml$gq_recbfdsc,
			key,
			.owner, .entity_len, .entity_adr,
			.qual_pst, .qual_len, .qual_adr,
			recdsc);
    END
ELSE
    !
    ! Since the node permanent database is much larger than the others, it
    ! has a different structure using four ISAM keys instead of one.
    !
    BEGIN
    key = .owner;
    IF .owner EQL nmn$c_typ_key_ref THEN
	BEGIN
	key_value_dsc [0] = nmn$c_typ_key_len;
	key_value_dsc [1] = entity;
	END;
    status = nml$readrecord (.fid, owner, key_value_dsc,
				nml$gq_recbfdsc, recdsc, temp);
    END;

IF .status THEN
    nml_purentity (.entity, .deleteflg, recdsc, key, key_value_dsc)
ELSE
    BEGIN
    !
    ! No such entity found in data base.
    ! If processing a PURGE KNOWN NODES ALL, and there is no record for
    ! the executor, don't return an error message to NCP.  Otherwise,
    ! return an error response.
    !
    IF .entity EQL nml$c_executor AND
       .status EQL rms$_rnf AND
       .nml$gb_entity_format EQL nma$c_ent_kno THEN
	RETURN;
    nml$ab_msgblock [msb$l_flags] = msb$m_det_fld; ! Message detail only
    nml$ab_msgblock [msb$b_code] = nma$c_sts_cmp;  ! Add error code
    nml$ab_msgblock [msb$w_detail] =
	    .nml$ab_entitydata [.entity, eit$w_detail];
    END;
!
! Build and send the response message.
!
nml$bld_reply (nml$ab_msgblock, msgsize);
nml$send (nml$ab_sndbuffer, .msgsize);

END;				! End of NML$PURENTITY

%SBTTL 'NML_PURENTITY  Purge entity parameters'
ROUTINE NML_PURENTITY (ENTITY, DEL, RECDSC, KEY, KEY_VALUE_DSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes permanent data base parameters for the specified
!	line.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	DEL		Record delete flag (TRUE=yes, FALSE=no).
!	RECDSC		Address of current record descriptor.
!	KEY		For all but node database - Current record key.
!	KEY_VALUE_DSC	Used only for node database - ID of node being purged
!--

BEGIN

MAP
    recdsc : REF VECTOR [2];	! Record descriptor

LOCAL
    fid;				! File id code

fid = .nml$ab_entitydata [.entity, eit$b_fileid]; ! Get file id
nml$ab_msgblock [msb$l_flags] = 0;
nml$ab_msgblock [msb$b_code] = nma$c_sts_suc;
!
! Delete parameters.  If none specified then delete record.
!
IF NOT .del THEN
    BEGIN
    !
    ! Purge the parameters specified by the NICE message, and then write the
    ! record back to the permanent database file.
    !
    nml$del_fields (.recdsc);
    nml$writerecord (.fid, .entity, .key, .recdsc, nmn$c_update_rec);
    END
ELSE
    BEGIN
    !
    ! Delete the entity's record from the permanent database.  This is
    ! generally a PURGE ALL operation.
    !
    nml$deletrecord (.fid, .key, .key_value_dsc);
    nml$ab_msgblock [msb$l_flags] = msb$m_msg_fld;
    nml$ab_msgblock [msb$l_text] = nml$_recdelet;
    END;
!
! Add entity id to message descriptor.
!
nml$q_entbfdsc [0] = nml$k_entbuflen;
nml$q_entbfdsc [1] = nml$t_entbuffer;

nml$getrecowner (.recdsc,
		     .entity,
		     nml$q_entbfdsc,
		     nml$q_entbfdsc [0]);

nml$ab_msgblock [msb$v_entd_fld] = 1; ! Set entity descriptor flag
nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc; ! Add entity descriptor pointer

END;				! End of NML_PURENTITY

%SBTTL 'NML_PURLOGGING  Purge logging parameters'
ROUTINE NML_PURLOGGING (SNK, SNKADR, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common purge functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!	RECDSC		Address of current record descriptor.
!	KEY		Address of current record key.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD,
	RECDSC : REF VECTOR;

    LOCAL
	FID,				! File id code
	FLDSIZE,
	FLDADR,
	STATUS,
	UPDFLG;				! Data base update flag

    FID = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID]; ! Get file id
!
! Add event flags.
!
    IF NOT NML$ADDEVENTS (FALSE, .RECDSC, .SNK, .SNKADR, UPDFLG)
    THEN
	RETURN;
!
! If the events parameter valid then write the record back to the file.
! Otherwise, delete the record.
!
    IF .UPDFLG
    THEN
	NML$WRITERECORD (.FID,
			 NML$C_LOGGING,
			 .KEY,
			 .RECDSC,
			 NMN$C_UPDATE_REC)	! Write the record
    ELSE
	NML$DELETRECORD (.FID, .KEY, 0);	! Delete the record

    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

    END;				! End of NML_PURLOGGING

%SBTTL 'NML_PURLOGALL  Purge logging sink parameters'
ROUTINE NML_PURLOGALL (SNK) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common purge functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	SNK		Sink type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if any operations have been performed indicating
!	that a status message should be sent.  If no operations were 
!	performed then no data for the specified sink type was found so
!	no status message should be sent.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	FLDSIZE,
	FLDADR,
	KEY,				! Record key
	MSGFLG  : BYTE,			! Response message flag
	OWNER,				! Search key
	PRMDSC  : VECTOR [2],
	RECDSC  : VECTOR [2],
	SRCPTR,				! Pointer to source block
	STATUS;

!
! Purge the logging sink data.
!
    MSGFLG = FALSE;			! No response messages
    FID = .NML$AB_ENTITYDATA [NML$C_SINK, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [NML$C_SINK, EIT$W_KEY]; ! Get search key
    KEY = 0;				! Initialize record key
!
! Find the record in the file.
!
    IF NML$MATCHRECORD (.FID, NML$GQ_RECBFDSC, KEY,
			.OWNER, 1, SNK,
			0, 0, 0,		! No qualifier
			RECDSC)
    THEN
	BEGIN

	MSGFLG = TRUE;			! Set response message flag
	NML_PURENTITY (NML$C_SINK, TRUE, RECDSC, KEY);

	END;
!
! Purge the logging filter data.
!
    FID = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$W_KEY]; ! Get search key
    KEY = 0;

    WHILE NML$MATCHRECORD (.FID,
			   NML$GQ_RECBFDSC,
			   KEY,
			   .OWNER, 0, 0,
			   0, 0, 0,		! No qualifier
			   RECDSC) DO
	BEGIN
!
! Find event parameter in record.
!
	FLDADR = 0;
	STATUS = NMA$SEARCHFLD (RECDSC,
				NMA$C_PCLO_EVE,
				FLDSIZE,
				FLDADR);
	IF .STATUS
	THEN
	    BEGIN

	    CH$MOVE (.FLDSIZE, .FLDADR, .NML$Q_EVTBFDSC [1]);
	    PRMDSC [0] = .FLDSIZE;
	    PRMDSC [1] = .NML$Q_EVTBFDSC [1];

	    END
	ELSE
	    BEGIN

	    PRMDSC [0] = 0;
	    PRMDSC [1] = .NML$Q_EVTBFDSC [1];

	    END;
!
! Clear event filters.
!
	SRCPTR = 0;
	WHILE NML$GETNXTSNK (PRMDSC, .SNK, SRCPTR) DO
	    BEGIN

	    MSGFLG = TRUE;		! Set response message flag
	    NML$REMSRC (PRMDSC, .SRCPTR);

	    END;

	IF .MSGFLG
	THEN
	    BEGIN

	    IF NOT NML$SAVEVENTS (NML$K_MAX_REC_DATA,
				  .PRMDSC [0],
				  .PRMDSC [1],
				  RECDSC)
	    THEN
		EXITLOOP;
!
! If source was cleared successfully and there are still filters
! remaining for this sink node then write the record back to file.
!
	    IF .PRMDSC [0] EQLU 0
	    THEN
		NML$DELETRECORD (.FID, KEY, 0)
	    ELSE
	        NML$WRITERECORD (.FID, NML$C_SINK, KEY, RECDSC, NMN$C_UPDATE_REC);

	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

	    END;

	KEY = .KEY + 1;

	END;

    RETURN .MSGFLG

    END;				! End of NML_PURLOGALL

END					! End of module

ELUDOM
