MODULE PAS$WRITELN2 ( %TITLE 'WRITELN procedure'
		IDENT = '1-002'			! File: PASWRITEL.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$WRITELN2, which implements the
!	VAX-11 Pascal WRITELN procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Add NOWRITE attribute to PFD_WRITEV.  SBL 24-May-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Linkages, PSECTs, externals

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$WRITELN2: NOVALUE,			! Do a WRITELN
    PAS$$WRITELN: JSB_WRITELN NOVALUE,		! Internally callable
    PAS$$INIT_WRITE: JSB_INIT_WRITE NOVALUE,	! Do common initialization
    PAS$$END_WRITE: JSB_END_WRITE NOVALUE,	! Do common WRITE epilogue
    PAS$$DO_WRITEV: JSB_DO_WRITEV NOVALUE;	! Do a WRITEV

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!

!+
! Declare a Pascal File Descriptor to use for a "string file" WRITEV
!-

OWN
    PFD_WRITEV: BLOCK [PFD$K_SIZE+%CHARCOUNT('-string-'), BYTE]
    	FIELD (PFD$FIELDS) PSECT (_PAS$CODE)
	PRESET (
		[PFD$V_TEXT]	= 1,
		[PFD$V_NOREAD]	= 1,
		[PFD$V_NOWRITE]	= 1,
		[PFD$L_LENGTH]	= 1,
		[PFD$T_NAME]	= %CHARCOUNT('-string-'),
		[PFD$B_NAME1]	= %C'-',
		[PFD$B_NAME2]	= %C's',
		[PFD$B_NAME3]	= %C't',
		[PFD$B_NAME4]	= %C'r',
		[PFD$B_NAME5]	= %C'i',
		[PFD$B_NAME6]	= %C'n',
		[PFD$B_NAME7]	= %C'g',
		[PFD$B_NAME8]	= %C'-'
	       );

%SBTTL 'PAS$WRITELN2 - WRITELN procedure'
GLOBAL ROUTINE PAS$WRITELN2 (				! Do a WRITELN
	PFV: REF $PAS$PFV_FILE_VARIABLE,	 	! File variable
	ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$WRITELN2 implements the VAX-11 Pascal WRITELN procedure.  It
!	writes the current record buffer of a textfile to the file.
!
! CALLING SEQUENCE:
!
!	CALL PAS$WRITELN2 (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument


    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);		! Enable error handler

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];				! Set PFV address

    !+
    ! Validate PFV and get PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_WRITE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Call PAS$$WRITELN to do the work.
    !-

    PAS$$WRITELN (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Indicate successful completion
    ! Undefine the file buffer
    ! Unlock the file variable.
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_DFB] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$WRITELN2

!<BLF/PAGE>

%SBTTL 'PAS$$WRITELN - Internally callable WRITELN '
GLOBAL ROUTINE PAS$$WRITELN (
	PFV: REF $PAS$PFV_FILE_VARIABLE,	 	! File variable
        FCB: REF $PAS$FCB_CONTROL_BLOCK			! File control block
    ): JSB_WRITELN NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$$WRITELN implements the VAX-11 Pascal WRITELN procedure.  It
!	writes the current record buffer of a textfile to the file.
!
! CALLING SEQUENCE:
!
!	JSB_WRITELN PAS$$WRITELN (PFV.mr.r, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB		- The File Control Block for the file.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the file has been verified to be a textfile and
!	that it is locked.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	LINVALEXC - LINELIMIT value exceeded
!	ERRDURWRI - error during WRITELN
!
!--

    BEGIN

    BIND
	RAB = FCB: REF $PAS$FCB_CONTROL_BLOCK;		! RAB is also FCB address

    !+
    ! Check for linelimit exceeded and update remaining line count.
    !-

    IF .FCB [FCB$L_LINELIMIT] GEQ 0	! Linelimit enabled?
    THEN
	IF .FCB [FCB$L_LINELIMIT] EQL 0	! Linelimit exceeded?
	THEN
	    $PAS$IO_ERROR (PAS$_LINVALEXC,0)
	ELSE
	    FCB [FCB$L_LINELIMIT] = .FCB [FCB$L_LINELIMIT] - 1;

    !+
    ! Set up record pointer in RAB for $PUT.
    !-

    RAB [RAB$L_RBF] = .FCB [FCB$A_RECORD_BEG];
    RAB [RAB$W_RSZ] = .FCB [FCB$A_RECORD_CUR] - .FCB [FCB$A_RECORD_BEG];

    !+
    ! Reset record buffer.
    !-

    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_BEG];

    !+
    ! If prompting enabled, set carriage control appropriately.
    !-

    IF .FCB [FCB$V_PROMPT_ENABLE]
    THEN
	IF .FCB [FCB$V_PARTIAL_LINE]
	THEN
	    FCB [FCB$W_PROMPT_CC] = FCB$K_CC_NLCR	! Nothing before, CR after
	ELSE
	    FCB [FCB$W_PROMPT_CC] = FCB$K_CC_LFCR;	! LF before, CR after

    !+
    ! Do the $PUT and check for errors.
    !-

    IF NOT $PAS$RMS_OP ($PUT (RAB=.RAB))
    THEN
	$PAS$IO_ERROR (PAS$_ERRDURWRI);

    !+
    ! Cancel the "truncate-on-put" option which may have been set by
    ! a REWRITE.
    !-

    RAB [RAB$V_TPT] = 0;

    !+
    ! Indicate no partial line.
    !-

    FCB [FCB$V_PARTIAL_LINE] = 0;

    RETURN;

    END;					! End of routine PAS$$WRITELN

!<BLF/PAGE>

%SBTTL 'PAS$$INIT_WRITE - Common setup for WRITE procedures'
GLOBAL ROUTINE PAS$$INIT_WRITE (			! Common setup
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	FCB_IN: REF $PAS$FCB_CONTROL_BLOCK;		! Input FCB
	FCB: REF $PAS$FCB_CONTROL_BLOCK			! Output FCB
    ): JSB_INIT_WRITE NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure performs the common setup steps for all WRITE procedures.
!	These are:
!		Verify that the file is a textfile.
!		If it is the standard file OUTPUT or INPUT, open it.
!		Verify that the file is in Generation mode.
!		Resolve any lazy lookahead in progress.
!
! CALLING SEQUENCE:
!
!	JSB_INIT_WRITE PAS$$INIT_WRITE (PFV.mr.r, FCB_IN.mr.r; FCB))
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference in R2.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB_IN		- The File Control Block of the file, if any.  The
!			  resultant FCB is passed back in the FCB parameter.
!
!	FCB		- The address of the File Control Block (FCB) is an
!			  output register parameter.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	FILNOTTEX - file is not a textfile
!	FILNOTOPE - File not open
!	FILNOTGEN - file is not in Generation mode
!
!--

    BEGIN

    !+
    ! Resolve lazy lookahead, if any.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB_IN [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]		! Not open
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that this is a textfile
    !-

    IF NOT .FCB [FCB$V_TEXT]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTTEX,0);

    !+
    ! Test for Generation mode
    !-    

    IF NOT .FCB [FCB$V_GENERATION]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTGEN,0);

    RETURN;	! Success

    END;					! End of routine PAS$$INIT_WRITE

!<BLF/PAGE>

%SBTTL 'PAS$$END_WRITE - Common epilogue for WRITE procedures'
GLOBAL ROUTINE PAS$$END_WRITE (	
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	FCB: REF $PAS$FCB_CONTROL_BLOCK			! File control block
    ): JSB_END_WRITE NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called at the end of every WRITE procedure
!	to perform common functions.  These are:
!	   1.  Move last character written to user's file buffer.
!	   2.  Check for PROMPT_ALWAYS and output partial line if
!	       necessary.
!	   3.  Set STATUS to zero, undefine file buffer and unlock
!	       file variable.
!
! CALLING SEQUENCE:
!
!	JSB_END_WRITE PAS$$END_WRITE (PFV.mr.r, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference in R2.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB		- The File Control Block of the file.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the file is a textfile, is locked and is
!	in Generation mode.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!--

    BEGIN

    !+
    ! If file buffer is not NOREAD, store the last character written to the
    ! line into the user's file buffer.  However, don't do it if there are
    ! no characters in the line!
    !-

    IF (.FCB [FCB$A_RECORD_CUR] NEQA .FCB [FCB$A_RECORD_END]) AND NOT .FCB [FCB$V_NOREAD]
    THEN
	CH$WCHAR (CH$RCHAR(.FCB [FCB$A_RECORD_CUR]-1), .PFV [PFV$A_BUFFER]);

    !+
    ! If the file has the attribute PROMPT_ALWAYS, write out the partial
    ! record.
    !-

    IF .FCB [FCB$V_PROMPT_ALWAYS]
    THEN
	PAS$$PROMPT_FILE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Set STATUS to indicate success.
    ! Unlock file variable.
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;	! Success

    END;					! End of routine PAS$$END_WRITE

!<BLF/PAGE>

%SBTTL 'PAS$$DO_WRITEV - Do a WRITEV'
GLOBAL ROUTINE PAS$$DO_WRITEV (
    PFV: REF $PAS$PFV_FILE_VARIABLE,		! PFV of string file
    MAX_LENGTH: WORD,				! Maximum length of string
    STRING: REF VECTOR [, WORD],		! String to write to
    ARGUMENT_LIST: REF VECTOR [, LONG],		! Argument list
    ROUTINE_ADDR				! Routine to call
    ): JSB_DO_WRITEV NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! CALLING SEQUENCE:
!
!	JSB_DO_WRITEV PAS$$DO_WRITEV (PFV.mr.r, MAX_LENGTH.rw.v, STRING.wvt.r,
!			   ARGUMENT_LIST.rlu.r,ROUTINE_ADDR.fzem.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- Pascal File Variable allocated by our caller.
!			  It is filled in here.
!
!	STRING		- The varying string to append to.
!
!	ARGUMENT_LIST	- Argument list for a CALLG
!
!	ROUTINE_ADDR	- The address of the PAS$WRITE_xxx routine to call
!			  to actually do the work.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See called routine
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FCB_BLOCK: $PAS$FCB_CONTROL_BLOCK;	! File Control Block

    BIND
	FCB = FCB_BLOCK + FCB$K_BLN: $PAS$FCB_CONTROL_BLOCK;

    BUILTIN
	CALLG;

    !+
    ! Set up the Pascal File Variable
    !-

    PFV [PFV$A_BUFFER] = 0;			! No file buffer
    PFV [PFV$B_VERSION] = PFV$K_CUR_VERSION;	! PFV version number
    PFV [PFV$W_FLAGS] = 0;			! Initially zero bits
    PFV [PFV$V_VALID] = 1;			! PFV is valid
    PFV [PFV$V_FCB_VALID] = 1;			! FCB address is valid
    PFV [PFV$V_OPEN] = 1;			! File is "open"
    PFV [PFV$V_EOF_DEFINED] = 1;		! EOF(f) is defined
    PFV [PFV$V_DFB] = 1;			! File buffer is defined
    PFV [PFV$A_PFD] = PFD_WRITEV [PFD$R_PFD];	! Address of PFD
    PFV [PFV$A_FCB] = FCB [FCB$R_FCB];		! Address of FCB

    !+
    ! Set up the File Control Block (FCB).  Only set those fields which
    ! will be used.
    !-

    FCB [FCB$A_PFV] = PFV [PFV$R_PFV];		! Address of PFV
    FCB [FCB$A_PFD] = PFD_WRITEV [PFD$R_PFD];	! Address of name
    FCB [FCB$W_ATTRIB] = .PFD_WRITEV [PFD$W_ATTRIB]; 	! Attributes
    FCB [FCB$L_OPTIONS1] = 0;			! Initially 0
    FCB [FCB$V_GENERATION] = 1;			! In Generation mode
    FCB [FCB$V_STRING] = 1;			! String file

    !+
    ! Get the "line" pointer and length, and set the FCB accordingly.
    !-

    FCB [FCB$A_RECORD_BEG] = STRING [1];	! Skip over current length
    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_BEG] + .STRING [0];
    FCB [FCB$L_RECORD_LEN] = .MAX_LENGTH;
    FCB [FCB$A_RECORD_END] = .FCB [FCB$A_RECORD_BEG] + .FCB [FCB$L_RECORD_LEN];

    !+
    ! Call the appropriate routine;
    !-

    CALLG (ARGUMENT_LIST [0], .ROUTINE_ADDR);

    !+
    ! Update the current string length.
    !-

    STRING [0] = .FCB [FCB$A_RECORD_CUR] - .FCB [FCB$A_RECORD_BEG];

    RETURN;					! Success

    END;					! End of routine PAS$$DO_WRITEV

!<BLF/PAGE>

END						! End of module PAS$WRITELN2

ELUDOM
