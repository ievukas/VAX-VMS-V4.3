	.TITLE	SYSMTACCESS - Routine to check magnetic tape accessibility
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: VMS Executive, System services.
;
; ABSTRACT:
;
;	VMS supplied accessibility installation routine. This routine is a 
;	model on which installations' should base their accessibility 
;	routine, It is also the system default installation routine.
;
;
; ENVIRONMENT:
;
;	Kernel Mode
;
; AUTHOR:
;
;	Meg Dumont
;
; CREATION DATE:
;
;	 20-February-1984
;
; MODIFIED BY:
;
;	V03-004	MMD0316		Meg Dumont,	22-Jul-1984  19:21
;		Fix to V4 checks to restore R0 after the CMPC operation.
;
;	V03-003	MMD0266		Meg Dumont,	22-Mar-1984  16:30
;		Change LABEL to LBLNAM and a couple other misc fixes 
;		to V4 support.
;
;	V03-002	MMD0257		Meg Dumont,	7-Mar-1984  18:38
;		Fix CASE statements.
;
;	V03-001	MMD0253		Meg Dumont,	28-Feb-1984  16:57
;		Delete temporary definitions.
;
;--
	.PAGE
	.SBTTL	Declarations
	$MTADEF
	$VL1DEF				; ANSI volume label definitions
	$HD1DEF				; ANSI header 1 label defs
	$SSDEF				; Define status codes

; Equated symbols:

	LBLNAM	= 4			; Offset to the label passed either
					; a VOL1 or HDR1 depending on the type
					; passed by address
	UIC	= 8			; Offset to UIC of user doing operation,
					; passed by value
	STD_VERSION = 12		; Offset to decimal equivalent of the 
					; ANSI std verison number from VOL1 
					; label passed by value
	ACCESS_CHAR = 16		; Offset to the access char specified
					; by user valid label is being output
					; passed by value
	ACCESS_SPEC = 20		; Offset to field which indicates if the 
					; user specified a access char passed
					; by value
	TYPE	= 24			; Offset to type of operation. See
					; $MTADEF for types, passed by value

; Local symbols

	BLANK = ^X<20>			; Hex equivalent of a blank
	ASCII_1 = ^X<31>		; Hex equivalent of an ASCII one.

STARID:	.ASCII /DECFILE11A/	; VMS specific implementation identifier

	.PAGE
	.SBTTL	Entry vector
;+
; The following vectors are used by the various pieces of the system
; to access the accessibility routine. The vector EXE$MTACCESS is
; used by the change mode dispatcher in response to a user calling the
; $MTACCESS system service.  This vector then jumps to the actual dispatch
; vector, EXE$MTACCESS_VEC, which in turn will jump to the accessibility
; routine. This level of indirection is necessary because the
; change mode dispatch vector must be in close proximity to the change
; mode dispatcher, which implies that it must be in a read-only psect.
; The actual dispatch vector, EXE$MTACCESS_VEC, must be in a writable
; psect so that the contents of the vector may be changed.
;
; The longword SGN$GL_LOADFLAGS is a bit vector used to indicate which
; pieces of the loadable pieces of the EXEC should be loaded at system
; boot time.  If a user specified an accessibility routine is
; present in the system, the bit SGN$V_LOADMTACCESS will be set to 1.
;
; The vector address the user must specify to load the code is represented
; by the symbol EXE$MTACCESS_VEC.
;
;-

	.PSECT	AEXENONPAGED		; Nonpaged UR access only
EXE$MTACCESS::				; Entry point from change-mode dispat.
	.WORD	0			; Register save mask (none saved)
	JMP	@#EXE$MTACCESS_VEC	; Jump to the dispatch vector

	.PSECT	$$$500			; The vector must be nonpaged and URKW
EXE$MTACCESS_VEC::			; Quick access entry point
	JMP	@#EXE$MTACCESS_RTN	; Vector to default routine
	.PAGE
	.SBTTL	Main routine
;++
; $MTACCESS
;
; Functional description:
;	This routine is called to handle the VOL1 and HDR1 label accessibility
;	fields during magnetic tape label processing. It firsts determines
;	the ANSI standard verison of this tape. For version 3 or less tapes the
;	routiene will either output a blank or the character specified by the 
;	user. On input of version 3 or less tapes the routine will check for a
;	blank and return the value SS$_FILACCERR if the field is non-blank.
;
;	For version 4 tapes, on output the routine will either output the
;	character specified or an ASCII 1 if no character was specified.
;	On input of version 4 tapes, if the field is blanks then R0 is
;	set to 0, which means the user has complete access to the tape.
;	If the field has an ASCII one then SS$_NORMAL is returned and
;	which means VMS protection will be checked by the caller. If the
;	field contains something else then SS$_FILACCERR is returned and
;	VMS protection is checked. This routine does not use the
;	returnd SS$_NOVOLACC or SS$_NOFILACC, however the installation is
;	free to use them and the caller will know how to deal with them.
;
; Calling sequence:
;
;	This routine should be called via a CALLS/G to EXE$MTACCESS.
;
; Input:
;
;	LBLNAM(AP)	: The ANSI label to process passed by address.
;			  On input the label passed is either the VOL1
;			  or HDR1 label read off the magnetic tape. On
;			  output of labels this field is zero. The
;			  type of label is determined by the TYPE field.
;
;	UIC(AP)		: The volme UIC passed by value.
;
;	STD_VERSION(AP)	: The decimal equivalent of the ANSI standard
;			  version gotten from the VOL1 label, passed
;			  by value.
;
;	ACCESS_CHAR(AP)	: The accessibility character specified by the
;			  user, passed by value. For output of labels
;			  only.
;
;	ACCESS_SPEC(AP)	: Determines if the character passed in ACCESS_CHAR
;			  was specified by user.
;				MTA$K_CHARVALID = YES
;				MTA$K_NOCHAR = NO
;			  passed by value. For output of labels only.
;
;	TYPE(AP)	: Type of accessibility to process passed by value.
;				MTA$K_INVOL1 = Input a VOL1 label
;				MTA$K_INHDR1 = Input a HDR1 label
;				MTA$K_OUTVOL1 = Output a VOL1 label
;				MTA$K_OUTHDR1 = Output a HDR1 label
;
; Output:
;
;	None.
;
; Routine value:
;
;	On label INPUT the following is returned:
;
;	R0 = SS$_NORMAL		: Check the VMS protection on the magnetic tape.
;	     0			: Give the user full access. VMS protection is
;				  no checked.
;	     SS$_FILACCERR	: Check for explicit override then check the
;				  VMS protection.
;	     SS$_NOFILACC or SS$_NOVOLACC : The user has no access to the file
;					    of volume, respectively.
;
;	When the label is OUTPUT the accessibility character to write is
;	returned in R0.
;
;--

	.PSECT	Y$EXEPAGED			; This code is pageable

EXE$MTACCESS_RTN::				; $MTACCESS code
	MOVZWL	#SS$_NORMAL,R0			; Assume success.
	MOVL	LBLNAM(AP),R2			; Get address of label to process
	MOVZBL	TYPE(AP),R1			; Get type of request

	ASSUME MTA$K_INVOL1 EQ 0
	ASSUME MTA$K_INHDR1 EQ 1
	ASSUME MTA$K_OUTVOL1 EQ 2
	ASSUME MTA$K_OUTHDR1 EQ 3

	CMPB	STD_VERSION(AP),#3		; If GTR then process with 4 rules
	BGTR	ACCESS_V4

; Process accessibility with the rules used for ANSI standard version 3 or less
; magnetic tapes.

ACCESS_PREV4:
	CASE	R1,<-
		PREV4_INVOL1,-
		PREV4_INHDR1,-
		PREV4_OUTVOL1,-
		PREV4_OUTHDR1,-
		>
	RET

PREV4_INVOL1:
	CMPB	#BLANK,VL1$B_VOLACCESS(R2)	; If blank then return check VMS prot
	BEQL	10$
	MOVZWL	#SS$_FILACCERR,R0		; Else force override of field
10$:	RET

PREV4_INHDR1:
	CMPB	#BLANK,HD1$B_FILACCESS(R2)	; If blank then return check VMS prot
	BEQL	10$
	MOVZWL	#SS$_FILACCERR,R0		; Else force override of field
10$:	RET

	ASSUME MTA$K_CHARVALID EQ 1
	ASSUME MTA$K_NOCHAR EQ 0

PREV4_OUTVOL1:
PREV4_OUTHDR1:
	MOVZBL	ACCESS_CHAR(AP),R0		; Assume char valid
	TSTB	ACCESS_SPEC(AP)			; If NEQ then character passed
	BNEQ	10$
	MOVZBL	#BLANK,R0			; Else return a blank
10$:	RET


ACCESS_V4:
	CASE	R1,<-
		V4_INVOL1,-
		V4_INHDR1,-
		V4_OUTVOL1,-
		V4_OUTHDR1,-
		>
	RET

V4_INVOL1:	
	CMPB	#BLANK,VL1$B_VOLACCESS(R2)	; If blank give user full access
	BNEQ	10$
	CLRL	R0
	RET

10$:	CMPB	#ASCII_1,VL1$B_VOLACCESS(R2)	; If NEQ force the user to 
	BNEQ	20$				; override the field
	CMPC3	#10,STARID,VL1$T_SYSCODE(R2)	; If EQL then ok
	BEQL	V4_NORMAL
20$:	MOVZWL	#SS$_FILACCERR,R0		; Else force override
	RET

; The CMPC operation destroys R0 so we must set the value before we
; return to the user.
V4_NORMAL:
	MOVZWL #SS$_NORMAL,R0
	RET

V4_INHDR1:
	CMPB	#BLANK,HD1$B_FILACCESS(R2)	; If blank give user full access
	BNEQ	10$
	CLRL	R0
	RET

10$:	CMPB	#ASCII_1,HD1$B_FILACCESS(R2)	; If NEQ force the user to 
	BNEQ	20$				; override the field
	CMPC3	#10,STARID,HD1$T_SYSCODE(R2)	; If EQL then ok
	BEQL	V4_NORMAL
20$:	MOVZWL	#SS$_FILACCERR,R0		; Else force override
	RET


V4_OUTVOL1:
V4_OUTHDR1:
	MOVZBL	ACCESS_CHAR(AP),R0		; Assume char valid
	TSTB	ACCESS_SPEC(AP)			; If NEQ then character passed
	BNEQ	10$
	MOVZBL	#ASCII_1,R0			; Else return default character
10$:	RET

	.END

