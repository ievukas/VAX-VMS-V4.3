MODULE	CSPMOUNT
		(LANGUAGE (BLISS32)
		,IDENT = 'V04-000'
		) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	MOUNT,CSP
!
! ABSTRACT:	
!
!	This module contains the cluster server action routine for 
!	MOUNT and is part of the Cluster Server Process (CSP).
!
! Environment:	
!
!	Full process context capable of kernel mode.
!
! Author:	
!
!	Hai Huang
!
! Creation date:	
!
!	28 Feb 1984
!
!
! Revision history:
!
!	V03-003	HH0022		Hai Huang	17-May-1984
!		Dismiss the mount request if the device is not
!		cluster-wide, or if the device is already mounted.
!
!	V03-002	HH0007		Hai Huang	16-Mar-1984
!		Add cluster-wide group-volume support.
!
!	V03-001	HH0004		Hai Huang	01-Mar-1984
!		Add cluster-wide mount support.
!
!--

BEGIN						! Start of CSPMOUNT

LIBRARY	'SYS$LIBRARY:LIB.L32' ;
REQUIRE 'LIB$:CSPDEF' ;

LINKAGE
	JSB_2	= JSB (REGISTER=2) ;

FORWARD ROUTINE

	CSP$MOUNT		: JSB_2,
	CSP_MOUNT_DECIPHER	: NOVALUE,
	CSP_DISMOUNT_DECIPHER	: NOVALUE,
	GET_UIC,
	SET_UIC,
	CHECK_DEVICE;



			
%SBTTL 'CSP$MOUNT	- MOUNT client support for CSP'
GLOBAL ROUTINE CSP$MOUNT
			(CSD : REF BLOCK [,BYTE]) : JSB_2 =	

!+
!
! FUNCTIONAL DESCRIPTION:
!	
!	This routine performs the CSP mount client action routine.
!	The possible actions are mount and dismount, depending on
!	the parameter specified in the CSD packet.
!
! INPUTS:
!
!	CSD	: Pointer to the address of the received CSD
! 
! OUTPUTS:
!
!	None.
! 
! IMPLICIT INPUTS:
!	
!	None.
!
! OUTPUT PARAMETERS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	Mount or dismount system service issued.
!
! ROUTINE VALUE:
!
!	1	  : If successful
!	Otherwise : Error status from mount/dismount system service
!
! SIDE EFFECTS:
!
!	None.
! 
!-


BEGIN						! Start of CSP$MOUNT

LOCAL
	UIC,
	STATUS,
	BUFFER	: REF BLOCK;


BUFFER = .CSD [CSD$L_SENDOFF];			! Get address of message

IF ((UIC = .CSD [CSD$L_P1]) NEQ 0)		! A non-zero P1 is a mount request 
THEN

    BEGIN

    LOCAL
    	ARG	: VECTOR [2],
	OLD_UIC;		

    CSP_MOUNT_DECIPHER (.BUFFER);		! Decipher cluster-mount packet
						! into a mount item list
    STATUS = CHECK_DEVICE (.BUFFER);		! See if the mount should be processed
    IF NOT .STATUS				! If not, dismiss request
    THEN
	RETURN SS$_NORMAL;    
    OLD_UIC = $CMKRNL (ROUTIN = GET_UIC);	! Get original UIC
    ARG [0] = 1;				! Set up arglst
    ARG [1] = .UIC;				! Set new UIC
    $CMKRNL (ROUTIN = SET_UIC, ARGLST = ARG);	!  ...
    STATUS = $MOUNT (ITMLST = .BUFFER);		! Mount 
    ARG [1] = .OLD_UIC;				! Restore original UIC
    $CMKRNL (ROUTIN = SET_UIC, ARGLST = ARG);	!  ...

    END

ELSE						! P1=0 is a dismount request

    BEGIN
    
    LOCAL
	DEV_DSC,
	DISM_FLAGS;

    CSP_DISMOUNT_DECIPHER ( .BUFFER, DEV_DSC, DISM_FLAGS );  ! Decipher the cluster-
						! dismount packet
    STATUS = $DISMOU ( DEVNAM=.DEV_DSC, FLAGS=.DISM_FLAGS ); ! Dismount

    END;


RETURN .STATUS;
END ;



%SBTTL 'CSP_MOUNT_DECIPHER	-Deciphers a packet into MOUNT itemlist'
ROUTINE CSP_MOUNT_DECIPHER ( BUFFER ) : NOVALUE =

!+
!
! FUNCTIONAL DESCRIPTION:
!
! 	This routine takes a cluster-mount packet and returns
!	an item list.
!
! CALLING SEQUENCE:
!
!	CSP_MOUNT_DECIPHER (ARG1)
! 
! INPUTS:
!
!	ARG1	: Address of the input buffer
!
! OUTPUTS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUT PARAMETERS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUES:
!
!	None.
!
! SIDE EFFECTS:
!
!	The cluster-mount packet in the buffer is transformed into
!	a mount item list.
!
!
! NOTES:
!
! This decipher routine takes the given cluster-mount packet of the form
! shown below and transforms the packet into an item list.
!
!			      Offset
!	+---------------+	
!	| code1 | len1	|  0  ITEM_LENG	item_desc_1
!	+---------------+	
!	|offset to str_1|  4  ITEM_ADDR
!	+---------------+	
!	|    unused	|  8  ITEM_NULL 
!	+---------------+	
!	| code2 | len2	|  0  ITEM_LENG	item_desc_2
!	+---------------+	
!	|offset to str_2|  4  ITEM_ADDR
!	+---------------+	
!	|    unused	|  8  ITEM_NULL
!	+---------------+	
!	.		.	
!	.		.	
!	.		.	
!	+---------------+	
!	|	0	|     End of item decsiptors
!	+---------------+	
!	|     str_1	|
!	+---------------+	
!	|     .....	|  
!	+---------------+	
!	|     str_2	|
!	+---------------+	
!	|     .....	|  
!	+---------------+	
!
!
!	1. Each address in the item descriptor is "relocated" to be the 
!	   offset from the beginning of the packet (i.e. self-relative). 
!	   The transformation is simply to calculate the address in each
!	   item descriptor.
!
!-


BEGIN						! Start of CSP_MOUNT_DECIPHER

MAP	
	BUFFER		: REF BLOCK [,BYTE];

LOCAL
	ITEM		: REF BLOCK [,BYTE];	! Pointer to item descriptor

	
MACRO ITEM_LENG	 =  0,0,16,0%;			! Define buffer offsets
MACRO ITEM_CODE	 =  2,0,16,0%;
MACRO ITEM_ADDR	 =  4,0,32,0%;
MACRO ITEM_NULL	 =  8,0,32,0%;
LITERAL ITEM_SIZE = 12;

!
! For each item descriptor, calculate the real address of the item.
!
		
ITEM = .BUFFER;					! Point to the beginning of buffer
WHILE ( .ITEM [ITEM_CODE] NEQ 0 ) DO
BEGIN
    ITEM [ITEM_ADDR] = .ITEM [ITEM_ADDR] + .BUFFER; ! Calculate the real address
						! of the item string
    ITEM = .ITEM + ITEM_SIZE;			! Bump item desciptor pointer
END;

RETURN;
		
END;						! End of CSP_MOUNT_DECIPHER




%SBTTL 'CSP_DISMOUNT_DECIPHER	-Deciphers a packet into DISMOU arguments'
ROUTINE CSP_DISMOUNT_DECIPHER ( BUFFER, DEV_DSC, FLAGS ) : NOVALUE =

!+
!
! FUNCTIONAL DESCRIPTION:
!
! 	This routine takes a cluster-dismount packet and returns
!	a device descriptor and the dismount flags.
!
! CALLING SEQUENCE:
!
!	CSP_DISMOUNT_DECIPHER (ARG1, ARG2, ARG3)
! 
! INPUTS:
!
!	ARG1	: Address of the input buffer
!
! OUTPUTS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUT PARAMETERS:
!
!	ARG2	: Address of a longword to recieve the address
!		    of the device descriptor
!	ARG3	: Address of a longword to receive the flags
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUES:
!
!	None.
!
! SIDE EFFECTS:
!
!	None.
!
!
! NOTES:
!
! This decipher routine takes the given cluster-dismount packet of the form
! shown below and returns a device descriptor and the dismount flags.
!
!			      Offset
!	+---------------+	
!	|     flags	|  0  BUF_FLAGS
!	+---------------+	
!	| dev descrptor |  4  BUF_DSC
!	+---------------+	
!	|		|  8
!	+---------------+	
!	| device string | 12  BUF_STR
!	+---------------+	
!	|      ...	|
!	+---------------+	
!
!-

BEGIN						! Start of CSP_DISMOUNT_DECIPHER

MAP	
	BUFFER	: REF BLOCK [,BYTE] ;

LOCAL
	LOC_DSC	: REF BLOCK [,BYTE] ;


MACRO BUF_FLAG	 =  0,0,32,0%;			! Define buffer offsets
MACRO BUF_DSC	 =  4,0,32,0%;
MACRO BUF_STR	 = 12,0,32,0%;
LITERAL BUF_HDR_LEN = 12;

.FLAGS = .BUFFER[BUF_FLAG];			! Get flags from buffer
LOC_DSC = BUFFER[BUF_DSC];			! Point to device descriptor	
LOC_DSC[DSC$A_POINTER] = .LOC_DSC[DSC$A_POINTER] + .BUFFER; ! "Relocate" address
						!   in device descriptor
.DEV_DSC = .LOC_DSC;				! Return address of device dsc

RETURN;
END;						! End of CSP_DISMOUNT_DECIPHER



%SBTTL 'GET_UIC 	- Get our process UIC'
ROUTINE GET_UIC =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is a kernel-mode routine to get the UIC of a process. 
!
! CALLING SEQUENCE:
!
!	GET_UIC ()
!
! INPUT PARAMETERS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUT PARAMETERS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	UIC of this process.
!
! SIDE EFFECTS:
!
!	None.
!
!--

BEGIN

EXTERNAL
	SCH$GL_CURPCB	: REF BLOCK [, BYTE] ADDRESSING_MODE (ABSOLUTE);
						! system address of process PCB

RETURN (.SCH$GL_CURPCB[PCB$L_UIC]);

END;						! End of routine GET_UIC



%SBTTL 'SET_UIC 	- Set our process UIC'
ROUTINE SET_UIC ( UIC ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is a kernel-mode routine to set the UIC of a process. 
!
! CALLING SEQUENCE:
!
!	SET_UIC (ARG1)
!
! INPUT PARAMETERS:
!
!	ARG1	: Desired UIC
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUT PARAMETERS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	1.
!
! SIDE EFFECTS:
!
!	None.
!
!--

BEGIN

EXTERNAL
	SCH$GL_CURPCB	: REF BLOCK [, BYTE] ADDRESSING_MODE (ABSOLUTE);
						! System address of process PCB
SCH$GL_CURPCB [PCB$L_UIC] = .UIC;		! Set UIC

RETURN 1;				

END;						! End of routine SET_UIC



				
%SBTTL 'CHECK_DEVICE 	- Check if the mount request should be processed'
ROUTINE CHECK_DEVICE ( BUFFER ) =

!+
!
! FUNCTIONAL DESCRIPTION:
!
! 	This routine determines if the mount request received should
!	be processed. If the target device is already mounted, or is
!	not a cluster-wide device, then the request should be dismissed.
!
! CALLING SEQUENCE:
!
!	CHECK_DEVICE (ARG1)
! 
! INPUTS:
!
!	ARG1	: Address of the mount item list
!
! OUTPUTS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUT PARAMETERS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUES:
!
!	0	: If the mount request should be dismissed.
!	1	: If the mount request should be processed.
!
! SIDE EFFECTS:
!
!	None.
!
!-


BEGIN						! Start of CHECK_DEVICE

MAP	
	BUFFER		: REF BLOCK [,BYTE];

LOCAL
	STATUS,
	LOCAL_EFN,				! Local event flag
	ITEM		: REF BLOCK [,BYTE],	! Pointer to item descriptor
	DEV_DESC	: BLOCK [DSC$K_S_BLN, BYTE], ! Target device descriptor
	DEVCHAR		: BLOCK [4, BYTE],	! Device char word buffer
	DEVCHAR2	: BLOCK [4, BYTE],	! 2nd device char word buffer
	ITMLST		: BLOCK [(2*12)+4, BYTE] INITIAL
			!
			! 1st item - device charasteristic word
			!
			( WORD (4),		! Buffer length
			  WORD (DVI$_DEVCHAR),	! 1st device char word
			  LONG (DEVCHAR),	! Address of buffer
			  LONG (0),		! No length
			!
			! 2nd item - 2nd device characteristic word
			!
			  WORD (4),		! Buffer length
			  WORD (DVI$_DEVCHAR2),	! 2nd device char word
			  LONG (DEVCHAR2),	! Address of buffer
			  LONG (0),		! No length
			  LONG (0));		! Item list stopper

EXTERNAL ROUTINE
	LIB$GET_EF	: ADDRESSING_MODE (GENERAL), ! RTL routine to get an EF	
	LIB$FREE_EF	: ADDRESSING_MODE (GENERAL); ! RTL routine to release the EF
	
MACRO ITEM_LENG	 =  0,0,16,0%;			! Define buffer offsets
MACRO ITEM_CODE	 =  2,0,16,0%;
MACRO ITEM_ADDR	 =  4,0,32,0%;
MACRO ITEM_NULL	 =  8,0,32,0%;
LITERAL ITEM_SIZE = 12;

STATUS = 0;					! Assume failure
ITEM = .BUFFER;					! Point to the beginning of buffer
LIB$GET_EF (LOCAL_EFN);				! Get a local event flag

!
! Scan the item list for device names. For each device name in item list,
! issue a $GETDVI system service to find out the status of the device. 
!
WHILE ( .ITEM [ITEM_CODE] NEQ 0 ) DO		! Examine each item
    BEGIN
    IF .ITEM [ITEM_CODE] EQL MNT$_DEVNAM
    THEN
	BEGIN					! For device names only
	DEV_DESC [DSC$B_DTYPE] = 0;		! Set up device descritor
	DEV_DESC [DSC$B_CLASS] = 0;			
	DEV_DESC [DSC$W_LENGTH]  = .ITEM [ITEM_LENG];	
	DEV_DESC [DSC$A_POINTER] = .ITEM [ITEM_ADDR];

	STATUS = $GETDVIW ( DEVNAM = DEV_DESC,	! Get device info
		    	    ITMLST = ITMLST,	
		    	    EFN    = .LOCAL_EFN );	

	IF ( NOT .STATUS )			! If $GETDVI failed
	OR ( .DEVCHAR [DEV$V_MNT] )		! or device already mounted
	OR ( NOT .DEVCHAR2 [DEV$V_CLU] )	! or not cluster-wide device
	THEN
	    BEGIN
	    STATUS = 0;	    			! Return with failure
	    EXITLOOP;				
	    END;				
	END;					!
    ITEM = .ITEM + ITEM_SIZE;			! Bump item desciptor pointer
    END;					! End of while loop

LIB$FREE_EF (LOCAL_EFN);			! Release the event flag 

RETURN .STATUS;					! Back to caller

END;						! End of CHECK_DEVICE

END						! End of CSPMOUNT
ELUDOM
