	$BEGIN	RM1PUT,000,RM$RMS1,<SEQUENTIAL SPECIFIC PUT>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;		This module provides sequential file organization
;		specific processing for the $put function.
;
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 17-FEB-1977
;
; Modified By:
;
;	V03-002	RAS0280		Ron Schaefer		27-Mar-1984
;		Eliminate call to RM$CHKEOF1 by doing the check inline.
;		Eliminate some spurious branches as well.
;
;	V03-001	KBT0143		Keith B. Thompson	20-Aug-1982
;		Reorganize psects
;
;	V02-016	CDS0001		C Saether		 9-Nov-1981
;		Change brw to jmp to fix broken branch.
;
;	V02-015	REFORMAT	K. E. Kinnear		31-Jul-1980	9:01
;
;	V01-014	PSK0012		P. S. Knibbe		14-Feb-1980	11:30
;		Put to a block foreign device sets eof bit. Put
;		to a device with tpt and truncate access sets eof bit.
;
;	V01-013	JAK0001		J. A. Krycka		27-Aug-1978	13:42
;		Miscellaneous clean-up prior to DECNET V1.0 code freeze.
;		Add code to support network access by key.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$DEVDEF
	$FABDEF
	$RABDEF
	$IRBDEF
	$RMSDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop field

;
; Own Storage:
;


	.SBTTL	RM$PUT1 - HIGH LEVEL SEQUENTIAL $PUT

;++
; RM$PUT1 -- High Level Sequential $PUT.
;
; This module performs the following functions:
;
;	1.  Calls rm$putsetup1 to perform various setups.
;
;	2.  Initializes the current record size to zero.
;
;	3.  Verifies that rac = sequential or key (if rfm=fix).
;
;	4.  If device is unit record calls RM$PUT_UNIT_REC.
;	    Otherwise, verifies positioning at eof
;	    and calls RM$PUT_BLK_DEV unless rac=key in which case calls
;	    RM$UPDATE_ALT.
;
;
; Calling Sequence:
;
;	 Entered via case branch from RM$PUT at RM$PUT1.
;
; Input Parameters:
;
;	R11	impure area address
;	R10	IFAB addr
;	R9	IRAB addr
;	R8	rab addr
;
; Implicit Inputs:
;
;	The contents of the rab and related IRAB and IFAB.
;
; Output Parameters:
;
;	R7 thru R1	destroyed
;	R0		status
;
; Implicit Outputs:
;
;	Various fields of the rab are filled in to reflect
;	the status of the operation (see functional spec
;	for details).
;
;	The IRAB is similarly updated.
;
; Completion Codes:
;
;	Standard rms (see functional spec).
;
; Side Effects:
;
;	none
;
;--


RM$PUT1::
	$TSTPT	PUT1
	BSBW	RM$PUTSETUP1		; perform various put setups
	CLRW	IRB$W_CSIZ(R9)		; indicate no current record
	BLBC	R0,ERROR

;
; Verify that record access mode is sequential.
;

	ASSUME	RAB$C_SEQ EQ 0

	TSTB	RAB$B_RAC(R8)
	BNEQ	CHKRRN

	ASSUME	DEV$V_REC EQ 0

	BLBS	IFB$L_PRIM_DEV(R10),DAPDEV	; branch if unit record device

;
;  Sequential $PUT to a block device: must be positioned at eof.
;

BLKDEV:
	BBS	#IRB$V_EOF,(R9),PUTBLK1	; branch if already eof
	CMPL	IRB$L_NRP_VBN(R9),IFB$L_EBK(R10) ; at eof?
	BLSSU	ERRNEF			; branch if not yet
	BGTRU	PUTBLK			; branch if definitely
					; in current eof block
	CMPW	IRB$W_NRP_OFF(R9),IFB$W_FFB(R10) ; how about byte position?
	BLSSU	ERRNEF			; nope - not there yet
PUTBLK:	SSB	#IRB$V_EOF,(R9)		; eof - set the flag

PUTBLK1:
	BRW	RM$PUT_BLK_DEV		; do the put

;
; $PUT to a unit record device.
;

DAPDEV:	BRW	RM$PUT_UNIT_REC

;
;  Code to perform random mode $PUT by relative record #.
;

CHKRRN:
	BBS	#IFB$V_DAP,(R10),DAPDEV	; branch if network operation
	CMPB	RAB$B_RAC(R8),#RAB$C_KEY; keyed access?
	BNEQ	ERRRAC			; no - it's a problem
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),ERRRAC; branch if not disk
	BBS	#IFB$V_SQO,(R10),ERRSQO	; branch if sqo set
	BSBW	RM$SEQKEY		; convert rrn to rfa
	BLBC	R0,ERROR		; get out on errors
	BBS	#RAB$V_UIF+ROP,(R8),10$	; branch if put anywhere is ok
	BBS	#DEV$V_FOR,IFB$L_PRIM_DEV(R10),10$; branch if foreign device
	CMPL	RAB$W_RFA(R8),IFB$L_EBK(R10); check for attempt to put
					    ;  beyond eof
	BLSSU	ERRNEF1			; branch if before eof (error)
	BGTRU	10$			; branch if beyond
	CMPW	RAB$W_RFA+4(R8),IFB$W_FFB(R10); in eof blk - check offset
	BLSSU	ERRNEF1			; branch if before eof
10$:	MOVW	R6,IRB$W_CSIZ(R9)	; set current record size
	MOVL	R6,R1			; restore record size
	MOVQ	RAB$W_RFA(R8),IRB$L_RP_VBN(R9); set rp from rfa
	CLRW	IRB$L_RP_OFF+2(R9)	; insure valid long word offset
	BRW	RM$UPDATE_ALT		; go do the random put


;++
;
; Error Processors:
;
;--

ERRSQO:
	RMSERR	SQO			; seq output only and user

ERROR:	BRW	RM$EXRMS		; get out

;
;   If device is foreign or truncate is allowed
; 	then set eof and continue
;	else error
;

ERRNEF:	BBS	#DEV$V_FOR,-			; continue
		IFB$L_PRIM_DEV(R10),PUTBLK	; if foreign

;
; Not foreign - is truncate permitted ?
;

	BBC	#RAB$V_TPT+ROP,(R8),ERRNEF1	; no - real error
	BBS	#FAB$V_TRN,IFB$B_FAC(R10),PUTBLK; yes - if truncate
	BRW	RM$ERRFAC			; else error in access

ERRNEF1:
	RMSERR	NEF			; put not at end of file
	BRB	ERROR

ERRRAC:
	RMSERR	RAC			; bad record access value
	BRB	ERROR

	.END
