MODULE BAS$MAT_IO (				!Basic Matrix I/O element transmitter - UPI level
		IDENT = '1-016'			! File: BASMATIO.B32 Edit: DG1016
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: VAX-11 BASIC Language support
!
! ABSTRACT:
!
!	This module contains the UPI level element transmitters for Matrix I/O.
!	For matrix I/O, an element is an entire array.  The UPI then marches
!	through the descriptor and calls the PRINT or INPUT UDF for each element
!	in the array.  MAT I/O gets its own UPI module so that MAT I/O can be
!	excluded from the sharable library.
!
! ENVIRONMENT: User access mode, AST reentrant.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 01-Sep-79
!
! MODIFIED BY:
!
! 	DGP,01-Sep-79 : VERSION 1
! 1-001	- original.  DGP 01-Sep-79
! 1-002	- Remove references to OTS$$A_CUR_LUB, so this module need not be
!	   in the sharable library.  JBS 13-SEP-1979
! 1-003 - Finish development for FT2.  DGP 02-Oct-79
! 1-004 - More work on MAT PRINT.  DGP 05-Oct-79
! 1-005 - Work on MAT I/O for strings.  DGP 10-Oct-79
! 1-006 - MAT PRINT initializing UPPER_BOUND1 incorrectly.  DGP 15-Oct-79
! 1-007 - MAT INPUT, READ, and LINPUT not initializing UPPER_BOUND1 properly.
!	  DGP 16-Oct-79
! 1-008 - Bug fix in 2 dimensional MAT PRINT with both optional args.  DGP
!	  14-Nov-79
! 1-009 - Deallocate any temporary storage allocated.  DGP 14-Nov-79
! 1-010	- Move the BUILTIN ACTUALCOUNT declaration inside the routines that
!	  need it.  JBS 20-Aug-1980
! 1-011 - Add support for byte, g & h floating.  PLL 22-Sep-81
! 1-012 - Add support for decimal arrays, and dynamically mapped arrays.  PLL 23-Mar-1982
! 1-013 - Fix bug in MAT PRINT of strings.  Null strings caused an error.  
!	  PLL 31-Mar-1982
! 1-014 - Pass all longwords in the calls to the g and h store routines.
!	  PLL 8-Apr-1982
! 1-015 - TEMP_STORE in IN_MAT should be 4 longwords.  PLL 8-Apr-1982
! 1-016 - TEMP_STORE [0] should be cleared out before FETCHing dynamically
!	  mapped byte or word array elements.  DG 13-Jan-1984
!--

!<BLF/PAGE>

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:BASLNK';				! Some Basic specific linkages

REQUIRE 'RTLIN:OTSLNK';				! All of the rest of the linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$NUM,					! Returns the value of NUM
    BAS$NUM2,					! returns the value of NUM2
    BAS$$NUM2_INIT : NOVALUE,			! initialize NUM2
    BAS$$NUM_INIT : NOVALUE,			! initialize NUM
    BAS$OUT_MAT_S : NOVALUE,			! Matrix PRINT, semicolon format
    BAS$OUT_MAT_C : NOVALUE,			! Matrix PRINT, comma format
    BAS$OUT_MAT_B : NOVALUE,			! Matrix PRINT, no format
    BAS$IN_MAT : NOVALUE;			! Matrix INPUT

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:BASPAR';				! some Basic constants

REQUIRE 'RTLIN:RTLPSECT';			! Psect definitions

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLML:OTSLUB';				! Logical Unit Block (LUB) offsets

LIBRARY 'RTLSTARLE';				! system macros and symbols

!
! MACROS:
!

MACRO
    U1_1D =
 28, 0, 32, 0%,					! upper bound, one dimensional array
    U1_2D =
 32, 0, 32, 0%,					! first upper bound, two dim. array
    U2_2D =
 40, 0, 32, 0%;					! second upper bound, two dim. array

!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);				! Basic psects
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!

OWN
    NUM : INITIAL (0),				! Number of columns entered
    NUM2 : INITIAL (0);				! Number of rows entered for 2 dim. array else 0

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    STR$FREE1_DX,				! Free a dynamic string
    BAS$$BLNK_LINE : CALL_CCB NOVALUE,		! write a blank line
    BAS$$UDF_RL1 : CALL_CCB,			! UDF level - read list directed
    BAS$$UDF_WL1 : CALL_CCB NOVALUE,		! UDF level - write list directed
    BAS$FETCH_BFA : NOVALUE,			! Call - fetch from an array
    BAS$STORE_BFA : NOVALUE,			! Call - store into an array
    BAS$$STOP : NOVALUE,			! signal an error and stop
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Load CUR_LUB into register CCB
    BAS$FET_FA_B_R8 : VA_JSB,			! fetch from byte array
    BAS$FET_FA_W_R8 : VA_JSB,			! fetch from word array
    BAS$FET_FA_L_R8 : VA_JSB,			! fetch from longword array
    BAS$FET_FA_F_R8 : VA_JSB,			! fetch from floating array
    BAS$FET_FA_D_R8 : VA_JSB,			! fetch from double array
    BAS$FET_FA_G_R8 : VA_JSB, 			! fetch from gfloat array
    BAS$FET_FA_H_R8 : VA_JSB, 			! fetch from hfloat array
    BAS$STO_FA_B_R8 : VA_JSB, 			! store into byte array
    BAS$STO_FA_W_R8 : VA_JSB NOVALUE,		! store into word array
    BAS$STO_FA_L_R8 : VA_JSB NOVALUE,		! store into longword array
    BAS$STO_FA_F_R8 : VA_JSB NOVALUE,		! store into floating array
    BAS$STO_FA_D_R8 : VA_JSB NOVALUE,		! store into double array
    BAS$STO_FA_G_R8 : VA_JSB NOVALUE,		! store into gfloat array
    BAS$STO_FA_H_R8 : VA_JSB NOVALUE,		! store into hfloat array
    BAS$FETCH_DESC;				! fetch elem from array of desc
EXTERNAL LITERAL
    BAS$K_DATTYPERR : UNSIGNED (8);		! Data type error


GLOBAL ROUTINE BAS$NUM 				! NUM
    : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine supports the Basic NUM function.  It returns the number of
!	rows input in a two dimensional array and the number of elements input
!	in a one dimensional array.  It uses a chunk of OWN storage because
!	those are the Basic semantics.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NUM.rl			The number of elements or rows read
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NUMBER_OF_ELEMENTS.wl.v	number of elements read on last MAT INPUT, LINPUT, or READ.
!
! SIDE EFFECTS:
!
!--

    BEGIN
    RETURN .NUM
    END;					! End of BAS$NUM


GLOBAL ROUTINE BAS$NUM2 			! NUM2
    : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine supports the Basic NUM2 function.  It returns the number
!	of elements entered in the last row of a 2 dimensional array or 0.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NUM2.rl		The number of elements read in the last row or 0
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NUM_OF_ELEMENTS.wl.v	number of elements
!
! SIDE EFFECTS:
!
!--

    BEGIN
    RETURN .NUM2
    END;					! End of BAS$NUM2


GLOBAL ROUTINE BAS$$NUM_INIT 			! NUM_INIT
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize NUM to 0.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NUM.wl			The number of rows read
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!--

    BEGIN
    NUM = 0;
    RETURN;
    END;					! End of BAS$$NUM_INIT


GLOBAL ROUTINE BAS$$NUM2_INIT 			! Initialize NUM2
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes NUM2 to 0.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NUM2.wl			Number of columns in last row.
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!--

    BEGIN
    NUM2 = 0;
    RETURN;
    END;					! End of BAS$$NUM2_INIT


GLOBAL ROUTINE BAS$OUT_MAT_S (			! Matrix print, semicolon format
	ARRAY, SUBSCRIPT1, SUBSCRIPT2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The array is printed one element at a time with the elements in each row
!	being printed in a packed format.  Each row begins on a new line.  Row
!	and column zero are not printed.
!
! FORMAL PARAMETERS:
!
!	ARRAY.rx.a			! array to print
!	[SUBSCRIPT1.rlu.v]		! first optional subscript
!	[SUBSCRIPT2.rlu.v]		! second optional subscript
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	Data Type Error
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LITERAL
	V_1D_FLAG = 1,				! flag - one dimen. array
	K_ONE_OPT_ARG = 2,			! value of arg. count for one
						! optional argument
	K_TWO_OPT_ARGS = 3,			! value of arg. count for two
						! optional arguments
	K_1D = 1;				! one dimension

    LOCAL
	NUM_ELEMS_DONE,				! total number of array elements processed
	FLAGS,
	TEMP_STORE : VECTOR [4, LONG],		! temp storage for calling FETCH_VA
	ROW,					! current value of subscript 1
	COLUMN,					! current value of subscript 2
	UPPER_BOUND1,				! upper bound for 1 dimensional
						! array and number of rows for 2
						! dimensional array
	TOTAL_NUM_ITEMS,			! total number of items in the array
						! excluding row and col. 0
	ELEM_DESCRIP : REF BLOCK [12,BYTE],	! desc fetched from array
	NUM_DESCRIP : BLOCK [8,BYTE];		! numeric desc for FETCH

    MAP
	ARRAY : REF BLOCK [, BYTE];

    BAS$$CB_GET ();
!+
! Check to see if this a list of arrays.  If it is, then print a blank line between
! each array.
!-

    IF .CCB [ISB$V_MAT_PRINT] THEN BAS$$BLNK_LINE ();

    CCB [ISB$V_MAT_PRINT] = 1;
    FLAGS = 0;
!+
! Default TEMP_STORE to a dynamic stirng descriptor
!-
    TEMP_STORE [0] = %X'020E0000';
    TEMP_STORE [1] = %X'00000000';
!+
! Check the number of dimensions and set a flag if only one dimension.
!-

    IF .ARRAY [DSC$B_DIMCT] EQL K_1D THEN FLAGS = .FLAGS + V_1D_FLAG;

!+
! Check for optional arguments.  If there are no optional arguments, then set
! the upper bounds based on what is in the descriptor.  If there are optional
! args, then use them as the upper bound.
!-

    IF ACTUALCOUNT () LSS K_ONE_OPT_ARG
    THEN

	IF .ARRAY [DSC$B_DIMCT] EQL K_1D
	THEN
!+
! No optional arguments and a one dimensional array
!-
	    BEGIN
	    UPPER_BOUND1 = .ARRAY [U1_1D];
	    TOTAL_NUM_ITEMS = .UPPER_BOUND1;
	    END
	ELSE
	    BEGIN
!+
! 2 dimensional array
!-
	    UPPER_BOUND1 = .ARRAY [U2_2D];
	    TOTAL_NUM_ITEMS = .ARRAY [U1_2D]*.UPPER_BOUND1;
	    END;

    IF ACTUALCOUNT () GEQ K_ONE_OPT_ARG
    THEN
	BEGIN
	UPPER_BOUND1 = .SUBSCRIPT1;
	TOTAL_NUM_ITEMS = .SUBSCRIPT1;
	END;

    IF ACTUALCOUNT () EQL K_TWO_OPT_ARGS
    THEN
!+
! 2 optional arguments
!-
	BEGIN
	UPPER_BOUND1 = .SUBSCRIPT2;
	TOTAL_NUM_ITEMS = .SUBSCRIPT1*.SUBSCRIPT2;
	END;

!+
! Initialize the two current subscripts regardless of the number of dimensions
!-
    ROW = COLUMN = NUM_ELEMS_DONE = 1;
!+
! Check for array of descriptors.  They could be dynamic string descriptors,
! or numeric descriptors for a dynamically mapped array.  Fetch
! an element (a descriptor) from the array and check the dtype to
! determine if this is a string array or numeric array.
!-
			
    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
    THEN
    BEGIN

    NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];
    IF .FLAGS AND V_1D_FLAG
    THEN
    	ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1)
    ELSE
	ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1, 1);

		
    CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET
		    
	[DSC$K_DTYPE_T] :		! text
		    
	    ;

	[DSC$K_DTYPE_B] :		! byte	

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_B;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/4;
	    END;

	[DSC$K_DTYPE_W] :		! word
	
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_W;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/2;
	    END;

	[DSC$K_DTYPE_L] :		! long

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_L;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_F] :		! float

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_F;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_D] :		! double

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_D;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_G] :		! g float
			
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_G;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_H] :		! h float
		
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_H;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*4;
	    END;

	[DSC$K_DTYPE_P] :		! packed decimal

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
	    NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
	    END;
		
	[INRANGE,OUTRANGE] :
	    BAS$$STOP (BAS$K_DATTYPERR);

	TES;

    END;
!+
! Loop thru the array descriptor until all of the elements in the array or as
! specified by the optional arguments have been printed.  Start each row on a
! new line.
!-

    WHILE .NUM_ELEMS_DONE LEQ .TOTAL_NUM_ITEMS DO
	BEGIN
!+
! Based on the data type, JSB or CALL the proper fetch routine to get the element
! out of the array.  The FETCH and STORE routines are called because the array
! may be virtual.
!-

	CASE .ARRAY [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET

	    [DSC$K_DTYPE_B] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_B_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_B_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_W] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_W_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_W_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_L] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_L_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_L_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_F] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_F_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_F_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_D] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_D_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_D_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_T] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .COLUMN)
		ELSE
		    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .ROW, .COLUMN);

	    [DSC$K_DTYPE_DSC] :
		
		BEGIN
		CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	            SET

	    	    [DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
	     	     DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P] :
		 	BEGIN

	    		TEMP_STORE [0] = %X'00000000';
		    	IF .FLAGS AND V_1D_FLAG
		    	THEN
		    	    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .COLUMN)
		    	ELSE
		            BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .ROW, .COLUMN);

			END;

	            [DSC$K_DTYPE_T] :
		   	
		 	IF .FLAGS AND V_1D_FLAG
			THEN
			    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .COLUMN)
			ELSE
			    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .ROW, .COLUMN);

	            [INRANGE,OUTRANGE] :
		        BAS$$STOP (BAS$K_DATTYPERR);

	    	    TES;

		END;				! end of dtype dsc

	    [DSC$K_DTYPE_P] :
	    !+
	    ! Must pass a descriptor to BAS$$UDF_WL1.  Construct a class SD
	    ! descriptor here, and set the pointer field to TEMP_STORE.
	    !-
		BEGIN
		NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
		NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
		NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
		NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
		NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .COLUMN)
		ELSE
		    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .ROW, .COLUMN);
		END;	
				    
	    [DSC$K_DTYPE_G] :
		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_G_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_G_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_H] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_H_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_H_R8 (.ARRAY, .ROW, .COLUMN);

	    [INRANGE, OUTRANGE] :
		BAS$$STOP (BAS$K_DATTYPERR);
	    TES;

	BAS$$UDF_WL1 (
	    BEGIN

	    IF (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC) THEN .ELEM_DESCRIP [DSC$B_DTYPE] ELSE .ARRAY [DSC$B_DTYPE]

	    END
	, 					!
	    BEGIN
	    MAP
		TEMP_STORE : BLOCK [8,BYTE];

	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T 
	     THEN
		.TEMP_STORE [DSC$W_LENGTH]
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
		 THEN
		    IF .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T
		    THEN
			.TEMP_STORE [DSC$W_LENGTH]
		    ELSE
			.NUM_DESCRIP [DSC$W_LENGTH]
		 ELSE
		    .ARRAY [DSC$W_LENGTH])) 
	    END
	, 					!
	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_P 
	     THEN
		NUM_DESCRIP			! pass dsc for packed
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
		    .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
		 THEN
		    NUM_DESCRIP
		 ELSE
		    TEMP_STORE)),
	! If this is the last element of this row, then pass the "no format"
	! argument so that the first element of the next row starts on a
	! new line
	    BEGIN

	    IF (.COLUMN EQL .UPPER_BOUND1) THEN BAS$K_NO_FORM ELSE BAS$K_SEMI_FORM

	    END
	);
	NUM_ELEMS_DONE = .NUM_ELEMS_DONE + 1;
	COLUMN = .COLUMN + 1;

	IF .COLUMN GTR .UPPER_BOUND1
	THEN
	    BEGIN
!+
! It is time to start a new row.
!-
	    ROW = .ROW + 1;
	    COLUMN = 1;
	    END;

	END;					! end of the WHILE loop

!+
! Return any temporary storage used and then return
!-

    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T OR 
      (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
       .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T)
    THEN
	STR$FREE1_DX (TEMP_STORE);

    RETURN;
    END;					!End of BAS$OUT_MAT_S


GLOBAL ROUTINE BAS$OUT_MAT_C (			! Matrix print, comma format
	ARRAY, 					! array to print
	SUBSCRIPT1, 				! first optional subscript
	SUBSCRIPT2				! second optional subscript
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The array is printed one element at a time with the elements in each row
!	being printed in a print zone.  Each row begins on a new line.  Row
!	and column zero are not printed.
!
! FORMAL PARAMETERS:
!
!	ARRAY.rx.a			! array to print
!	[SUBSCRIPT1.rlu.v]		! first optional subscript
!	[SUBSCRIPT2.rlu.v]		! second optional subscript
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	Data Type Error
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LITERAL
	V_1D_FLAG = 1,				! flag - one dimen. array
	K_ONE_OPT_ARG = 2,			! value of arg. count for one
						! optional argument
	K_TWO_OPT_ARGS = 3,			! value of arg. count for two
						! optional arguments
	K_1D = 1;				! one dimension

    LOCAL
	NUM_ELEMS_DONE,				! total number of array elements processed
	FLAGS,
	TEMP_STORE : VECTOR [4, LONG],		! temp storage for calling FETCH_VA
	ROW,					! current value of subscript 1
	COLUMN,					! current value of subscript 2
	UPPER_BOUND1,				! upper bound for 1 dimensional
						! array and number of rows for 2
						! dimensional array
	TOTAL_NUM_ITEMS,			! total number of items in the array
    						! excluding row and col. 0
	ELEM_DESCRIP : REF BLOCK [12,BYTE],	! desc fetched from array
	NUM_DESCRIP : BLOCK [8,BYTE];		! numeric desc for FETCH

    MAP
	ARRAY : REF BLOCK [, BYTE];

    BAS$$CB_GET ();
!+
! Check to see if this a list of arrays.  If it is, then print a blank line between
! each array.
!-

    IF .CCB [ISB$V_MAT_PRINT] THEN BAS$$BLNK_LINE ();

    CCB [ISB$V_MAT_PRINT] = 1;
    FLAGS = 0;
!+
! Default TEMP_STORE to a dynamic stirng descriptor
!-
    TEMP_STORE [0] = %X'020E0000';
    TEMP_STORE [1] = %X'00000000';
!+
! Check the number of dimensions and set a flag if only one dimension.
!-

    IF .ARRAY [DSC$B_DIMCT] EQL K_1D THEN FLAGS = .FLAGS + V_1D_FLAG;

!+
! Check for optional arguments.  If there are no optional arguments, then set
! the upper bounds based on what is in the descriptor.  If there are optional
! args, then use them as the upper bound.
!-

    IF ACTUALCOUNT () LSS K_ONE_OPT_ARG
    THEN

	IF .ARRAY [DSC$B_DIMCT] EQL K_1D
	THEN
!+
! No optional arguments and a one dimensional array
!-
	    BEGIN
	    UPPER_BOUND1 = .ARRAY [U1_1D];
	    TOTAL_NUM_ITEMS = .UPPER_BOUND1;
	    END
	ELSE
	    BEGIN
!+
! 2 dimensional array
!-
	    UPPER_BOUND1 = .ARRAY [U2_2D];
	    TOTAL_NUM_ITEMS = .ARRAY [U1_2D]*.UPPER_BOUND1;
	    END;

    IF ACTUALCOUNT () GEQ K_ONE_OPT_ARG
    THEN
	BEGIN
	UPPER_BOUND1 = .SUBSCRIPT1;
	TOTAL_NUM_ITEMS = .SUBSCRIPT1;
	END;

    IF ACTUALCOUNT () EQL K_TWO_OPT_ARGS
    THEN
!+
! 2 optional arguments
!-
	BEGIN
	UPPER_BOUND1 = .SUBSCRIPT2;
	TOTAL_NUM_ITEMS = .SUBSCRIPT1*.SUBSCRIPT2;
	END;

!+
! Initialize the two current subscripts regardless of the number of dimensions
!-
    ROW = COLUMN = NUM_ELEMS_DONE = 1;
!+
! Check for array of descriptors.  They could be dynamic string descriptors,
! or numeric descriptors for a dynamically mapped array.  Fetch
! an element (a descriptor) from the array and check the dtype to
! determine if this is a string array or numeric array.
!-
    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
    THEN
    BEGIN
			
    NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];
    IF .FLAGS AND V_1D_FLAG
    THEN
    	ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1)
    ELSE
	ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1, 1);

		
    CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET
		    
	[DSC$K_DTYPE_T] :		! text
		    
	    ;

	[DSC$K_DTYPE_B] :		! byte	

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_B;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/4;
	    END;

	[DSC$K_DTYPE_W] :		! word
	
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_W;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/2;
	    END;

	[DSC$K_DTYPE_L] :		! long

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_L;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_F] :		! float

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_F;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_D] :		! double

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_D;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_G] :		! g float
			
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_G;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_H] :		! h float
		
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_H;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*4;
	    END;

	[DSC$K_DTYPE_P] :		! packed decimal

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
	    NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
	    END;
		
	[INRANGE,OUTRANGE] :
	    BAS$$STOP (BAS$K_DATTYPERR);

	TES;

    END;
!+
! Loop thru the array descriptor until all of the elements in the array or as
! specified by the optional arguments have been printed.  Start each row on a
! new line.
!-

    WHILE .NUM_ELEMS_DONE LEQ .TOTAL_NUM_ITEMS DO
	BEGIN
!+
! Based on the data type, JSB or CALL the proper fetch routine to get the element
! out of the array.  The FETCH and STORE routines are called because the array
! may be virtual.
!-

	CASE .ARRAY [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET

	    [DSC$K_DTYPE_B] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_B_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_B_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_W] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_W_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_W_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_L] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_L_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_L_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_F] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_F_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_F_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_D] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_D_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_D_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_T] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .COLUMN)
		ELSE
		    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .ROW, .COLUMN);

	    [DSC$K_DTYPE_DSC] :

		BEGIN
		CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	            SET

	    	    [DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
	     	     DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P] :
		    	BEGIN

	    		TEMP_STORE [0] = %X'00000000';
		    	IF .FLAGS AND V_1D_FLAG
		    	THEN
		    	    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .COLUMN)
		    	ELSE
		            BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .ROW, .COLUMN);

			END;

	            [DSC$K_DTYPE_T] :
		   	
			IF .FLAGS AND V_1D_FLAG
			THEN
			    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .COLUMN)
			ELSE
			    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .ROW, .COLUMN);

	            [INRANGE,OUTRANGE] :
		        BAS$$STOP (BAS$K_DATTYPERR);

	    	    TES;

		END;				! end of dtype dsc

	    [DSC$K_DTYPE_P] :
	    !+
	    ! Must pass a descriptor to BAS$$UDF_WL1.  Construct a class SD
	    ! descriptor here, and set the pointer field to TEMP_STORE.
	    !-
		BEGIN
		NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
		NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
		NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
		NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
		NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .COLUMN)
		ELSE
		    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .ROW, .COLUMN);
		END;	
				    
	    [DSC$K_DTYPE_G] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_G_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_G_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_H] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_H_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_H_R8 (.ARRAY, .ROW, .COLUMN);

	    [INRANGE, OUTRANGE] :
		BAS$$STOP (BAS$K_DATTYPERR);
	    TES;

	BAS$$UDF_WL1 (
	    BEGIN

	    IF (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC) THEN .ELEM_DESCRIP [DSC$B_DTYPE] ELSE .ARRAY [DSC$B_DTYPE]

	    END
	, 					!
	    BEGIN
	    MAP
		TEMP_STORE : BLOCK [8,BYTE];

	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T 
	     THEN
		.TEMP_STORE [DSC$W_LENGTH]
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
		 THEN
		    IF .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T
		    THEN
			.TEMP_STORE [DSC$W_LENGTH]
		    ELSE
			.NUM_DESCRIP [DSC$W_LENGTH]
		 ELSE
		    .ARRAY [DSC$W_LENGTH])) 
	    END
	, 					!
	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_P 
	     THEN
		NUM_DESCRIP			! pass dsc for packed
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
		    .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
		 THEN
		    NUM_DESCRIP
		 ELSE
		    TEMP_STORE)),

	! If this is the last element of this row, then pass the "no format"
	! argument so that the first element of the next row starts on a
	! new line
	    (IF .COLUMN EQL .UPPER_BOUND1 THEN BAS$K_NO_FORM ELSE BAS$K_COMMA_FOR));
	NUM_ELEMS_DONE = .NUM_ELEMS_DONE + 1;
	COLUMN = .COLUMN + 1;

	IF .COLUMN GTR .UPPER_BOUND1
	THEN
	    BEGIN
!+
! It is time to start a new row.
!-
	    ROW = .ROW + 1;
	    COLUMN = 1;
	    END;

	END;					! end of the WHILE loop

!+
! Return any temporary storage used and then return
!-

    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T OR 
      (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
       .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T)
    THEN
	STR$FREE1_DX (TEMP_STORE);

    RETURN;
    END;					!End of BAS$OUT_MAT_C


GLOBAL ROUTINE BAS$OUT_MAT_B (			! Matrix print, no format
	ARRAY, 					! array to print
	SUBSCRIPT1, 				! first optional subscript
	SUBSCRIPT2				! second optional subscript
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The array is printed one element at a time with each element
!	being printed on a separate line.  Row and column zero are not printed.
!
! FORMAL PARAMETERS:
!
!	ARRAY.rx.a			! array to print
!	[SUBSCRIPT1.rlu.v]		! first optional subscript
!	[SUBSCRIPT2.rlu.v]		! second optional subscript
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	Data Type Error
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LITERAL
	V_1D_FLAG = 1,				! flag - one dimen. array
	K_ONE_OPT_ARG = 2,			! value of arg. count for one
						! optional argument
	K_TWO_OPT_ARGS = 3,			! value of arg. count for two
						! optional arguments
	K_1D = 1;				! one dimension

    LOCAL
	NUM_ELEMS_DONE,				! total number of array elements processed
	FLAGS,
	TEMP_STORE : VECTOR [4, LONG],		! temp storage for calling FETCH_VA
	ROW,					! current value of subscript 1
	COLUMN,					! current value of subscript 2
	UPPER_BOUND1,				! upper bound for 1 dimensional
						! array and number of rows for 2
						! dimensional array
	TOTAL_NUM_ITEMS,			! total number of items in the array
    						! excluding row and col. 0
	ELEM_DESCRIP : REF BLOCK [12,BYTE],	! desc fetched from array
	NUM_DESCRIP : BLOCK [8,BYTE];		! numeric desc for FETCH

    MAP
	ARRAY : REF BLOCK [, BYTE];

    BAS$$CB_GET ();
!+
! Check to see if this a list of arrays.  If it is, then print a blank line between
! each array.
!-

    IF .CCB [ISB$V_MAT_PRINT] THEN BAS$$BLNK_LINE ();

    CCB [ISB$V_MAT_PRINT] = 1;
    FLAGS = 0;
!+
! Default TEMP_STORE to a dynamic stirng descriptor
!-
    TEMP_STORE [0] = %X'020E0000';
    TEMP_STORE [1] = %X'00000000';
!+
! Check the number of dimensions and set a flag if only one dimension.
!-

    IF .ARRAY [DSC$B_DIMCT] EQL K_1D THEN FLAGS = .FLAGS + V_1D_FLAG;

!+
! Check for optional arguments.  If there are no optional arguments, then set
! the upper bounds based on what is in the descriptor.  If there are optional
! args, then use them as the upper bound.
!-

    IF ACTUALCOUNT () LSS K_ONE_OPT_ARG
    THEN

	IF .ARRAY [DSC$B_DIMCT] EQL K_1D
	THEN
!+
! No optional arguments and a one dimensional array
!-
	    BEGIN
	    UPPER_BOUND1 = .ARRAY [U1_1D];
	    TOTAL_NUM_ITEMS = .UPPER_BOUND1;
	    END
	ELSE
	    BEGIN
!+
! 2 dimensional array
!-
	    UPPER_BOUND1 = .ARRAY [U2_2D];
	    TOTAL_NUM_ITEMS = .ARRAY [U1_2D]*.UPPER_BOUND1;
	    END;

    IF ACTUALCOUNT () GEQ K_ONE_OPT_ARG
    THEN
	BEGIN
	UPPER_BOUND1 = .SUBSCRIPT1;
	TOTAL_NUM_ITEMS = .SUBSCRIPT1;
	END;

    IF ACTUALCOUNT () EQL K_TWO_OPT_ARGS
    THEN
!+
! 2 optional arguments
!-
	BEGIN
	UPPER_BOUND1 = .SUBSCRIPT2;
	TOTAL_NUM_ITEMS = .SUBSCRIPT1*.SUBSCRIPT2;
	END;

!+
! Initialize the two current subscripts regardless of the number of dimensions
!-
    ROW = COLUMN = NUM_ELEMS_DONE = 1;
!+
! Check for array of descriptors.  They could be dynamic string descriptors,
! or numeric descriptors for a dynamically mapped array.  Fetch
! an element (a descriptor) from the array and check the dtype to
! determine if this is a string array or numeric array.
!-
			
    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
    THEN
    BEGIN

    NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];
    IF .FLAGS AND V_1D_FLAG
    THEN
    	ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1)
    ELSE
	ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1, 1);

		
    CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET
		    
	[DSC$K_DTYPE_T] :		! text
		    
	    ;

	[DSC$K_DTYPE_B] :		! byte	

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_B;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/4;
	    END;

	[DSC$K_DTYPE_W] :		! word
	
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_W;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/2;
	    END;

	[DSC$K_DTYPE_L] :		! long

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_L;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_F] :		! float

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_F;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_D] :		! double

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_D;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_G] :		! g float
			
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_G;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_H] :		! h float
		
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_H;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*4;
	    END;

	[DSC$K_DTYPE_P] :		! packed decimal

	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
	    NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
	    END;
		
	[INRANGE,OUTRANGE] :
	    BAS$$STOP (BAS$K_DATTYPERR);

	TES;

    END;
!+
! Loop thru the array descriptor until all of the elements in the array or as
! specified by the optional arguments have been printed.  Start each row on a
! new line.
!-

    WHILE .NUM_ELEMS_DONE LEQ .TOTAL_NUM_ITEMS DO
	BEGIN
!+
! Based on the data type, JSB or CALL the proper fetch routine to get the element
! out of the array.  The FETCH and STORE routines are called because the array
! may be virtual.
!-

	CASE .ARRAY [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET

	    [DSC$K_DTYPE_B] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_B_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_B_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_W] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_W_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_W_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_L] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_L_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_L_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_F] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_F_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_F_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_D] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_D_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_D_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_T] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .COLUMN)
		ELSE
		    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .ROW, .COLUMN);

	    [DSC$K_DTYPE_DSC] :

		BEGIN
		CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	            SET

	    	    [DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
	     	     DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P] :
			BEGIN
	
			TEMP_STORE [0] = %X'00000000';
		    	IF .FLAGS AND V_1D_FLAG
		    	THEN
		    	    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .COLUMN)
		    	ELSE
		            BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .ROW, .COLUMN);

			END;

                    [DSC$K_DTYPE_T] :
		   	
			IF .FLAGS AND V_1D_FLAG
			THEN
			    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .COLUMN)
			ELSE
			    BAS$FETCH_BFA (.ARRAY, TEMP_STORE [0], .ROW, .COLUMN);

	            [INRANGE,OUTRANGE] :
		        BAS$$STOP (BAS$K_DATTYPERR);

	            TES;

		END;				! end of dtype dsc

	    [DSC$K_DTYPE_P] :
	    !+
	    ! Must pass a descriptor to BAS$$UDF_WL1.  Construct a class SD
	    ! descriptor here, and set the pointer field to TEMP_STORE.
	    !-
		BEGIN
		NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
		NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
		NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
		NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
		NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .COLUMN)
		ELSE
		    BAS$FETCH_BFA (.ARRAY, NUM_DESCRIP, .ROW, .COLUMN);
		END;	
				    

	    [DSC$K_DTYPE_G] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_G_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_G_R8 (.ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_H] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    TEMP_STORE [0] = BAS$FET_FA_H_R8 (.ARRAY, .COLUMN)
		ELSE
		    TEMP_STORE [0] = BAS$FET_FA_H_R8 (.ARRAY, .ROW, .COLUMN);

	    [INRANGE, OUTRANGE] :
		BAS$$STOP (BAS$K_DATTYPERR);
	    TES;

	BAS$$UDF_WL1 (
	    BEGIN

	    IF (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC) THEN .ELEM_DESCRIP [DSC$B_DTYPE] ELSE .ARRAY [DSC$B_DTYPE]

	    END
	, 					!
	    BEGIN
	    MAP
		TEMP_STORE : BLOCK [8,BYTE];

	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T 
	     THEN
		.TEMP_STORE [DSC$W_LENGTH]
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
		 THEN
		    IF .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T
		    THEN
			.TEMP_STORE [DSC$W_LENGTH]
		    ELSE
			.NUM_DESCRIP [DSC$W_LENGTH]
		 ELSE
		    .ARRAY [DSC$W_LENGTH])) 
	    END
	, 					!
	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_P 
	     THEN
		NUM_DESCRIP			! pass dsc for packed
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
		    .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
		 THEN
		    NUM_DESCRIP
		 ELSE
		    TEMP_STORE)),

	    BAS$K_NO_FORM);
	NUM_ELEMS_DONE = .NUM_ELEMS_DONE + 1;
	COLUMN = .COLUMN + 1;

	IF .COLUMN GTR .UPPER_BOUND1
	THEN
	    BEGIN
!+
! It is time to start a new row.
!-
	    ROW = .ROW + 1;
	    COLUMN = 1;
	    END;

	END;					! end of the WHILE loop

!+
! Return any temporary storage used and then return
!-

    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T OR 
      (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
       .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T)
    THEN
	STR$FREE1_DX (TEMP_STORE);

    RETURN;
    END;					!End of BAS$OUT_MAT_B


GLOBAL ROUTINE BAS$IN_MAT (			! Matrix input
	ARRAY					! array to print
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The array is input one element at a time by rows.  Input may be con-
!	tinued on the next line by an '&'.  Only those elements for which new
!	data is entered are changed.
!
! FORMAL PARAMETERS:
!
!	ARRAY.wx.a			The array to put the data into
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NUM			number of rows or elements entered
!	NUM2			the number of elements entered in the last row
!				if two dimensional
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	    Invalid data type
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LITERAL
	V_1D_FLAG = 1,				! flag - one dimen. array
	K_1D = 1;				! one dimension

    LOCAL
	NUM_ELEMS_DONE,				! total number of array elements processed
	FLAGS,
	TEMP_STORE : VECTOR [4, LONG],		! temp storage for calling FETCH_VA
	ROW,					! current value of subscript 1
	COLUMN,					! current value of subscript 2
	UPPER_BOUND1,				! upper bound for 1 dimensional
						! array and number of rows for 2
						! dimensional array
	TOTAL_NUM_ITEMS,			! total number of items in the array
    						! excluding row and col. 0
	ELEM_DESCRIP : REF BLOCK [12,BYTE],	! desc fetched from array
	NUM_DESCRIP : BLOCK [8,BYTE];		! temp numeric desc for STORE

    MAP
	ARRAY : REF BLOCK [, BYTE];

    BAS$$CB_GET ();
    FLAGS = 0;
!+
! Default TEMP_STORE to a dynamic stirng descriptor
!-
    TEMP_STORE [0] = %X'020E0000';
    TEMP_STORE [1] = %X'00000000';
!+
! Check number of dimensions and initialize the number of elements in the array.
! Set a flag if only one dimension.
!-

    IF .ARRAY [DSC$B_DIMCT] EQL K_1D
    THEN
	BEGIN
	FLAGS = .FLAGS + V_1D_FLAG;
	UPPER_BOUND1 = .ARRAY [U1_1D];
	TOTAL_NUM_ITEMS = .UPPER_BOUND1;
	END
    ELSE
	BEGIN
	UPPER_BOUND1 = .ARRAY [U2_2D];
	TOTAL_NUM_ITEMS = .ARRAY [U1_2D]*.UPPER_BOUND1;
	END;

!+
! Initialize the two current subscripts regardless of the number of dimensions
!-
    ROW = COLUMN = NUM_ELEMS_DONE = 1;

!+
! If this is an array of descriptors, they may be dynamic string descriptors or
! numeric descriptors in the case of a dynamically mapped array.  Check the
! first element descriptor to determine the dtype (all elements of the array
! should be the same).
!-

    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
    THEN
    BEGIN
	IF .FLAGS AND V_1D_FLAG
	THEN
	    ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1)
	ELSE
	    ELEM_DESCRIP = BAS$FETCH_DESC (.ARRAY, 1, 1); 

    CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET

	[DSC$K_DTYPE_B] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_B;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/4;
	    END;

	[DSC$K_DTYPE_W] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_W;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL/2;
	    END;

	[DSC$K_DTYPE_L] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_L;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_F] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_F;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL;
	    END;

	[DSC$K_DTYPE_D] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_D;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_T] :
	    ;

	[DSC$K_DTYPE_P] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    NUM_DESCRIP [DSC$W_LENGTH] = .ELEM_DESCRIP [DSC$W_LENGTH];
	    NUM_DESCRIP [DSC$B_SCALE] = .ELEM_DESCRIP [DSC$B_SCALE];
	    END;

	[DSC$K_DTYPE_G] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_G;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*2;
	    END;

	[DSC$K_DTYPE_H] :
	    BEGIN
	    NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;
	    NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_H;
	    NUM_DESCRIP [DSC$W_LENGTH] = %UPVAL*4;
	    END;

	[INRANGE,OUTRANGE] :
	    BAS$$STOP (BAS$K_DATTYPERR);

	TES;

    NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];

    END;				! dtype dsc

    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
    THEN
	BEGIN
	NUM_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_SD;	
	NUM_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	NUM_DESCRIP [DSC$W_LENGTH] = .ARRAY [DSC$W_LENGTH];
	NUM_DESCRIP [DSC$B_SCALE] = .ARRAY [DSC$B_SCALE];
	NUM_DESCRIP [DSC$A_POINTER] = TEMP_STORE [0];
	END;
	
!+
! Loop thru the array descriptor until all of the elements in the array or as
! many as are supplied are input.
!-

    WHILE (.NUM_ELEMS_DONE LEQ .TOTAL_NUM_ITEMS) AND 
	(BAS$$UDF_RL1 (
	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC THEN .ELEM_DESCRIP [DSC$B_DTYPE]
	     ELSE .ARRAY [DSC$B_DTYPE]), 	!
	    (IF (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T)
	     THEN
		.TEMP_STORE [0]
	     ELSE
		(IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
		THEN
		    IF .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T
		    THEN
			.TEMP_STORE [0]
		    ELSE
			.NUM_DESCRIP [DSC$W_LENGTH]
		ELSE
		    .ARRAY [DSC$W_LENGTH])),	!
	    (IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_P OR
	       (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
		.ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P)
	     THEN
		NUM_DESCRIP			! pass desc for packed
	     ELSE
		TEMP_STORE), 			!
	    BAS$K_NULL)) DO
	BEGIN
!+
! Based on the data type, JSB or CALL the proper store routine to put the element
! into the array.  The FETCH and STORE routines are called because the array
! may be virtual.
!-

	IF .COLUMN GTR .UPPER_BOUND1
	THEN
	    BEGIN
!+
! It is time to start a new row.
!-
	    ROW = .ROW + 1;
	    COLUMN = 1;
	    END;

	CASE .ARRAY [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET

	    [DSC$K_DTYPE_B] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_B_R8 (.TEMP_STORE [0], .ARRAY, .COLUMN)
		ELSE
		    BAS$STO_FA_B_R8 (.TEMP_STORE [0], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_W] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_W_R8 (.TEMP_STORE [0], .ARRAY, .COLUMN)
		ELSE
		    BAS$STO_FA_W_R8 (.TEMP_STORE [0], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_L] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_L_R8 (.TEMP_STORE [0], .ARRAY, .COLUMN)
		ELSE
		    BAS$STO_FA_L_R8 (.TEMP_STORE [0], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_F] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_F_R8 (.TEMP_STORE [0], .ARRAY, .COLUMN)
		ELSE
		    BAS$STO_FA_F_R8 (.TEMP_STORE [0], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_D] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_D_R8 (.TEMP_STORE [0], .TEMP_STORE [1], .ARRAY,
			.COLUMN)
		ELSE
		    BAS$STO_FA_D_R8 (.TEMP_STORE [0], .TEMP_STORE [1], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_T] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STORE_BFA (TEMP_STORE [0], .ARRAY, .COLUMN)
		ELSE
		    BAS$STORE_BFA (TEMP_STORE [0], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_DSC] :

		BEGIN
		CASE .ELEM_DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
		    SET

		    [DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
		     DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P] :
		
		 	IF .FLAGS AND V_1D_FLAG
			THEN
			    BAS$STORE_BFA (NUM_DESCRIP, .ARRAY, .COLUMN)
			ELSE
			    BAS$STORE_BFA (NUM_DESCRIP, .ARRAY, .ROW, .COLUMN);

		    [DSC$K_DTYPE_T] :

			IF .FLAGS AND V_1D_FLAG
			THEN
		            BAS$STORE_BFA (TEMP_STORE [0], .ARRAY, .COLUMN)
			ELSE
		    	    BAS$STORE_BFA (TEMP_STORE [0], .ARRAY, .ROW, .COLUMN);

		    [INRANGE,OUTRANGE] :


			BAS$$STOP (BAS$K_DATTYPERR);

		    TES;

		END;				! data type dsc

	    [DSC$K_DTYPE_P] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STORE_BFA (NUM_DESCRIP, .ARRAY, .COLUMN)
		ELSE
		    BAS$STORE_BFA (NUM_DESCRIP, .ARRAY, .ROW, .COLUMN);
		
	    [DSC$K_DTYPE_G] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_G_R8 (.TEMP_STORE [0], .TEMP_STORE [1], .ARRAY, .COLUMN)
		ELSE
		    BAS$STO_FA_G_R8 (.TEMP_STORE [0], .TEMP_STORE [1], .ARRAY, .ROW, .COLUMN);

	    [DSC$K_DTYPE_H] :

		IF .FLAGS AND V_1D_FLAG
		THEN
		    BAS$STO_FA_H_R8 (.TEMP_STORE [0], .TEMP_STORE [1],
				     .TEMP_STORE [2], .TEMP_STORE [3], .ARRAY, .COLUMN)
		ELSE
		    BAS$STO_FA_H_R8 (.TEMP_STORE [0], .TEMP_STORE [1],
				     .TEMP_STORE [2], .TEMP_STORE [3], .ARRAY, .ROW, .COLUMN);

	    [INRANGE, OUTRANGE] :
		BAS$$STOP (BAS$K_DATTYPERR);
	    TES;

	NUM_ELEMS_DONE = .NUM_ELEMS_DONE + 1;
	COLUMN = .COLUMN + 1;
	END;					! end of the WHILE loop

    NUM = (IF .FLAGS AND V_1D_FLAG THEN .COLUMN - 1 ELSE .ROW);
    NUM2 = (IF .FLAGS AND V_1D_FLAG THEN 0 ELSE .COLUMN - 1);
!+
! Return any temporary storage used and then return
!-

    IF .ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_T OR 
      (.ARRAY [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC AND
       .ELEM_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T)
    THEN
	STR$FREE1_DX (TEMP_STORE);

    RETURN;
    END;					!End of BAS$IN_MAT

END						!End of module - BAS$MAT_IO

ELUDOM
