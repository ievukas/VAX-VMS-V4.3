	.title	pli$div_pkshort
	.ident	/1-002/					; Edit WHM1002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
;
; routine:
;
;	PLI$DIV_PKSHORT
;
;
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	Runtime routine performs fixed decimal (packed decimal) division.
;	The routine is called  when precision and scale  requirements for
;	the quotient imply multiple  precision  division.  The routine is
;	only called when such multiple precision division is required and
;	when the divisor has a precision of less than  30 decimal digits.
;	(Call  pli$div_pk_long  if  multiple precision division is
;	required and the divisor has precision  30 or 31 decimal digits).
;
; author: Peter Baum  20-jun-1980
;
; modifications:
;
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;
;
;
; documentation file: [pl1.doc.codegen]THEORY.MEM
;
; functional description:
;
;	This routine calculates:
;
;	z = x / y
;
;	let a = scale(z) + scale(y) - scale(x)  - 31 + prec(x)
;	    b = scale(z) + scale(y) - scale(x) + prec(x)
;	    c = 31 - prec(x)
;	    d = 31 - prec(y)
;
;	this routine is called if b > 31 and d > 1
;
;	Prior to the call:
;		if c not 0 then shift x left by c.
;		Thus x is a 31 digit packed decimal.
;
;
;
;
;	input:
;		0(ap)	# of arguments
;		4(ap)	address of dividend (shifted left by c)
;		8(ap)	address of divisor
;		12(ap)	precision of divisor (high order bytes zeroed)
;		16(ap)	address of quotient
;		20(ap)	precision of quotient (high order bytes zeroed)
;		24(ap)	a as defined above(high order bytes zeroed)
;		28(ap)	d as defined above(high order bytes zeroed)
;
;
;	output:
;		quotient returned at address specified by 16(ap)
;
;
; variable usage:
;
;	                size
;       	          in
; 	    variable   digits            use
;	    ---------  ------   ---------------------------
;		x(ap)	  31	 Dividend
;		y(ap)	 py(ap)	 Divisor
;		py(ap)   ------  Binary number that gives precision of y
;		z(ap)	 pz(ap)	 Quotient
;		pz(ap)   ------	 Binary number that gives precision of z
;		(sp)	  31	 Initially abs(x); successive remainders as
;				 algorithm progresses.
;		stkz2(sp) d	 Temporarily holds the next d
;				 digits of quotient.
;		stkt1(sp) 31	 Temporary because packed instructions
;				 don't allow overlapped operands
;		stky(sp)  31	 Holds abs(y)
;		stksign(sp)	 2 bits used to indicate the sign of the
;				 quotient. 00=+, 10=+, 01=-; via incb
;
;
;
; register usage:
;
;    register   use
;    --------   ------------------------------------------------------------
;	r6	a = additional digits of precision required beyond prec(x)
;	r7	stky(sp) = address of divisor
;	r8	py(ap) = precision of divisor
;	r9	r = number of additional digits of the quotient
;		that are to be found for next step
;       r10	z(ap)
;	r11	d = 31 - prec(y) = max. no of digits obtained each iteration
;
;
;
;
; optimization notes:
;
;	1) Optimized for speed, not space.
;	2) Optimized for y > 0.
;	3) Assumes speed for register to register operations are the same
;	   for byte operations and longword operations.
;	4) Many packed instruction sequences were timed. Do not change
;	   unless actual tests are made to determine relative speed.
;	   Tests were made on 11/780 and Comet.
;
;--
;
; stack offsets for work area
;
	$offset	0,,<-			;
	<,16>,-				;abs(x), 31 digits
	<stkz2,16>,-			;z2 31 digits
	<stkt1,16>,-			;t1 31 digits
	<stky,16>,-			;abs(y)
	<stksign,1>,-			;sign of quotient, 2 bits
	<stklen,0>,-			;length of work area
	>				;
;
; parameter offsets
;
	$offset 4,,<-			;
	<x>,-				;x = dividend by reference
	<y>,-				;y = divisor by reference
	<py>,-				;prec(y) by value
	<z>,-				;z = quotient by reference
	<pz>,-				;prec(z) by value
	<consta>,-			;a by value
	<constd>,-			;d by value
	>				;
;
;
;
	rtshare
;
;	constant data area
;
zero:	.packed	+0			;local packed decimal constant zero
;
; local symbol definitions
;
bytes_to_sign=15			;bytes to sign for fixed decimal 31
;
;
;

	.entry	pli$div_pkshort,^M<iv,dv,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
;
;initialize registers and temporaries
;
	movab	-stklen(sp),sp		;make room for temporaries
	movl	z(ap),r10		;save address of quotient
	movab	stky(sp),r7		;address of divisor
	movl	py(ap),r8		;precision of divisor
	movl	constd(ap),r11		;d = 31 - prec(y)
	movl	consta(ap),r6		;a = scale(z) + scale(y) - scale(x)
					; - 31 + prec(x)
	clrb	stksign(sp)		;clear sign flag
	movp	#31,@x(ap),(sp)		;move x, set cond. code
	bgtr	50$			;branch if x>0
	blss	40$			;branch if x<0
;
;x = 0
;
	cmpp4	#0,zero,r8,@y(ap)	;set condition code
	beql	30$			;branch if divide by 0
	ashp	#0,#0,zero,#0,pz(ap),(r10) ;z = 0
	ret
30$:	divp	#0,zero,#0,zero,pz(ap),(r10) ;cause divide by 0
	ret				;
;
;x not 0, determine sign of x
;
40$:
	incb	stksign(sp)		;set low order bit
	decb	bytes_to_sign(sp)			;x < 0 so make it positive
;
;determine sign of y
;y may be 0 at this point
;code optimized for y>0
;
50$:
	movp	r8,@y(ap),(r7)		;move y into temporary
	bgeq	60$			;branch if y > = 0
	incb	stksign(sp)		;set neg indicator
	subp6	r8,@y(ap),#0,zero,r8,(r7) ;convert to positive
60$:
;
;start of divide proper; setup
;
	cmpp4	#31,(sp),r8,(r7)	;x<y?
	blss	95$			;branch if x<y, i.e. shift of d is o.k.
;
;y < x
;
	divp	r8,(r7),#31,(sp),pz(ap),(r10) ;z=x/y
	mulp	r8,(r7),pz(ap),(r10),#31,stkt1(sp) ;t1=(x/y)*y
	brb	110$			;
;
;x < y
;
95$:	ashp	#0,#0,zero,#0,pz(ap),(r10) ;clear quotient
	brb	115$			;
;
;start of multiple precision divide
;
100$:	mulp	r8,(r7),R11,stkz2(sp),#31,stkt1(sp) ;t1=y*z2
110$:	subp4	#31,stkt1(sp),#31,(sp)	;x=x-t1
	beql	150$			;branch if remainder = 0
;
;determine r, the number of the next low order digits to obtain
;
115$:	movl	r11,r9			;r=d
	cmpl	r6,r11			;a>d?
	bgtr	130$			;branch if larger
	movl	r6,r9			;r=a
130$:	ashp	r9,#31,(sp),#0,#31,stkt1(sp) ;shift x left by r
	movp	#31,stkt1(sp),(sp)	;copy back into x
	ashp	r9,pz(ap),(r10),#0,pz(ap),stkt1(sp) ;shift z left by r
	movp	pz(ap),stkt1(sp),(r10)	;copy back into z
	divp	r8,(r7),#31,(sp),r11,stkz2(sp) ;z2(d)=x/y
	addp4	r11,stkz2(sp),pz(ap),(r10) ;z=z+z2
	subl2	r9,r6			;a=a-r
	bneq	100$			;branch if more
	blbs	stksign(sp),155$	;branch if quotient <0
	ret				;
;
;remainder = 0
;
150$:					;remainder = 0
	ashp	r6,pz(ap),(r10),#0,pz(ap),stkt1(sp) ;account for scale
	blbs	stksign(sp),160$	;branch if quotient < 0
	movp	pz(ap),stkt1(sp),(r10)	;copy back into quotient
	ret				;
;
;quotient < 0
;
155$:	movp	pz(ap),(r10),stkt1(sp)	;copy quotient into temp
160$:					;enter if t1 holds quotient
	subp6	pz(ap),stkt1(sp),#0,zero,pz(ap),(r10) ;make z negative
	ret				;

	.end
