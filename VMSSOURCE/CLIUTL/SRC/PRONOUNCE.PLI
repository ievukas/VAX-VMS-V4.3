/*
!	IDENT = V04-000
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!
!	SET PASSWORD
!
! ABSTRACT:
!
!	This module contains support routines for SET PASSWORD/GENERATE.
!
! ENVIRONMENT:
!
!	Vax native
!
!--
!
! AUTHOR: Brian Bailey	, CREATION DATE: Summer 83
!
! MODIFIED BY:
!
!	V03-001	SHZ0001		Stephen H. Zalewski 	01-feb-1984
!		Extensive rewriting to implement /GENERATE and incorporate
!		into SET PASSWORD.
!
**/


/* ROUTINE pronounceable_
!
! FUNCTIONAL DESCRIPTION:
!
! This procedure tests a word supplied by the caller for pronounceability.
!
! The word is tested by using random_word_ and whatever existing digram
! table is in use by random_word_ to determine the syllabification and
! pronounceability of the word supplied.
!
! INPUT PARAMETERS:
! 	word -	A word consisting of ASCII letters to be tested.
!		All characters must be lowercase.
!
! 	returned_hyphens -
!		A '1' bit in this array means that the corresponding
!		character in word is to have a hyphen after it.
!
! 	n_units - number of units in unit table.
!
! 	d_ptr - pointer to digram table
! 	r_ptr -	pointer to rules table
! 	l_ptr - pointer to letters table
!
! OUTPUT PARAMETERS:
!	NONE
!
! ROUTINE VALUE:
! 	pronounceability - set if the word is legal according to
! 			   the random_word_ algorithm and the
!			   digram table.
!
! SIDE EFFECTS:
!	NONE
!
*/

pronounceable_: procedure (word, returned_hyphens, d_ptr, l_ptr, r_ptr, n_units)  returns (bit(1));
				
dcl  word char(*);				/* PARAMETER: word being tested */
dcl  returned_hyphens(*) bit(1) aligned;	/* PARAMETER: hyphens for word */
dcl  pronounceability bit(1) aligned;		/* RETURNS VALUE: set if word is legal */


dcl  word_length_in_chars fixed bin static;	/* length of word in characters */
dcl  word_array(20) fixed bin static;		/* word spread out into units */
dcl  word_length fixed bin static;		/* length of word_array in units */
dcl  word_index fixed bin static;		/* index into word_array */


dcl  random_word_ entry ((*) fixed bin, (*) bit(1) aligned, fixed bin,	/* algorithm used to test the */
	fixed bin, entry, entry, ptr, ptr, ptr, fixed bin);		/* pronounceablilty of word.  */
dcl  returned_word(0:20) fixed bin;		/* word returned by random_word_ */
dcl  hyphenated_word(0:20) bit(1) aligned;	/* hyphens for word returned from random_word_ */
dcl  returned_length fixed bin;			/* dummy argument for random_word_, since */
						/* length of word is already known.       */


dcl  new_unit fixed bin;			/* unit currently being tested in random_unit */
dcl  last_good_unit fixed bin static;		/* word_index of last good unit */
dcl  split_point fixed bin;			/* index of 2-letter unit to be split into */
						/* single letter units	                   */
dcl  vowel_flag bit(1) aligned;			/* set when random_vowel is called */


/* this array contains information about all possible pairs of units */

dcl 1 digrams(n_units, n_units) based (d_ptr),
      2 begin bit(1),		/* on if this pair must begin syllable */
      2 not_begin bit(1),	/* on if this pair must not begin */
      2 end bit(1),		/* on if this pair must end syllable */
      2 not_end bit(1),		/* on if this pair must not end */
      2 break bit(1),		/* on if this pair is a break pair */
      2 prefix bit(1),		/* on if vowel must precede this pair in same syllable */
      2 suffix bit(1),		/* on if vowel must follow this pair in same syllable */
      2 illegal_pair bit(1);	/* on if this pair may not appear */

/* this array contains left justified 1 or 2-letter pairs representing each unit */

dcl letters(0:n_units) char(2) based (l_ptr);

/* this is the same as letters, but allows reference to individual characters */

dcl 1 letters_split(0:n_units) based (l_ptr),
      2 first char(1),
      2 second char(1);

/* this array has rules for each unit */

dcl 1 rules(n_units) based (r_ptr),
      2 no_final_split bit(1),		/* can't be the only vowel in last syllable */
      2 not_begin_syllable bit(1),	/* can't begin a syllable */
      2 vowel bit(1),			/* this is a vowel */
      2 alternate_vowel bit(1);   	/* this is an alternate vowel, (i.e., "y") */

dcl n_units fixed bin;			/* PARAMETER: number of units in unit table */
dcl d_ptr ptr;				/* PARAMETER: pointer to digram table */
dcl l_ptr ptr;				/* PARAMETER: pointer to unit letters */
dcl r_ptr ptr;				/* PARAMETER: pointer to unit rules */


dcl  chars char(2);
dcl  char char(1);
dcl  i fixed bin;
dcl  j fixed bin;


	split_point = 0;
	goto continue;

pronounceable_$split: entry (word, returned_hyphens, splitpoint, d_ptr, l_ptr,
					r_ptr, n_units)  returns (bit(1));

dcl  splitpoint fixed bin;		/* index of 2-letter unit to be split */
	split_point = splitpoint;

continue:

/* Now that we have the word we want to hyphenate, we try to divide it up into units as defined             */
/* in the digram table.  We start with the first two letters in the word, and see if they are equal to any  */
/* of the 2-letter units.  If they are, we store the index of that unit in the word_array, and increment    */
/* our word_index by 2.  If they are not, we see if the first letter is equal to any of the 1-letter units. */
/* If it is, we store that unit and increment the word_index by 1.  If still not found, the character is    */
/* not defined as a unit in the digram table and the word is illegal.  Of course, the word may still not be */
/* "legal" according to random_word_ rules of pronunciation and the digram table, but we'll find that out   */
/* later.								                                    */

	word_length_in_chars = length (word);
	word_index = 1;
	do i = 1 to word_length_in_chars;
	    chars = substr (word, i, min (2, word_length_in_chars - i + 1));
	    j = 1;
	    do j = 1 to n_units while (chars ^= letters (j));	/* look for 2-letter unit match */
		end;
	    if j <= n_units & word_index ^= split_point
		then do;				/* match found */
		    word_array (word_index) = j;	/* store 2-letter unit index */
		    word_index = word_index + 1;
		    i = i + 1;				/* skip over next unit */
		    end;
		else do;				/* two-letter unit not found, search for 1-letter unit */
		    char = substr (chars, 1, 1);
		    j = 1;
		    do j = 1 to n_units while (char ^= letters (j));
			end;
		    if j <= n_units
			then do;				/* match found */
			    word_array (word_index) = j;	/* store 1-letter unit index */
			    word_index = word_index + 1;
			    end;
			else do;				/* not found, unit is illegal */
			    pronounceability = '0'b;
			    return (pronounceability);
			    end;
		    end;
	    end;
	word_length = word_index - 1;
	word_index = 0;

/* Now call random_word_, trying to get the word hyphenated.  Special versions of random_unit and */
/* random_vowel are supplied that return units of the word we are trying to hyphenate rather than */
/* random units.							                          */

	call random_word_ (returned_word, hyphenated_word, word_length_in_chars,
				returned_length, random_unit, random_vowel,
				d_ptr, l_ptr, r_ptr, n_units);
	goto accepted;

/* If random_unit ever finds that random_word_ did not accept a unit from the word to be hyphenated,     */
/* a nonlocal goto directly to this label (which pops random_word_ off the stack) is made, and we        */
/* abort the whole operation.  If the last unit tried (i.e. the one not accepted) was a 2-letter unit,   */
/* we might be able to make the word legal by splitting that unit up into two 1-letter units and         */
/* starting all over.  Unfortunately, this is a lot of code and complication for a relatively rare case. */

not_accepted:
	word_index = word_index - 1;			/* index of last unit accepted */

accepted:
	j = 1;
	returned_hyphens = '0'b;
	do i = 1 to word_length;
	    if i > word_index & word_index < word_length	/* we never got done with the word */
		then do;
		    pronounceability = '0'b;
		    if letters_split (word_array (i)).second ^= ' '	/* was it not accepted because of */
		    & split_point = 0					/* an illegal 2-letter unit?      */
			then if pronounceable_$split (word, returned_hyphens, i,
				d_ptr, l_ptr, r_ptr, n_units)		/* try again with split pair */

/* Note: in even rarer cases, the unit that might be split to make this word legal is not the    */
/* unit that was rejected, but a previous unit.  It's too hard to deal with this case, so we'll  */
/* refuse the word, even though it might be legal.  As an example, using the standard digram     */
/* table, "preeg-hu-o" is a legal word.  However, our first attempt was to supply p-r-e-e-gh-u-o */
/* units.  Random_word_ rejects the "u" because it may not follow a "gh" unit in this context.   */
/* Since "u" is not a 2-letter unit, we can't try to split it up, so the word is thrown out.     */
/* However, p-r-e-e-g-h-u-o would have been acceptable to random_word_.  This is the only case   */
/* where a word that could have been produced by random_word_ will be rejected by this routine.  */

			    then pronounceability = '1'b;	/* word was legal when 2-letter unit was split */
		    return (pronounceability);
		    end;

/* set returned_hyphens bits corresponding to character in word.  Note that   */
/* hyphens returned from random_word_ (hyphenated_word array) point to units, */
/* not characters. 							      */

	    if letters_split (word_array (i)).second ^= ' '
		then j = j + 2;
		else j = j + 1;
	    returned_hyphens (j-1) = hyphenated_word (i);
	    end;
	pronounceability = '1'b;
	return (pronounceability);

/* The internal procedures random_unit and random_vowel keep track of the */
/* acceptance or rejection of units they are supplying to random_word_.   */

random_unit:	proc (returned_unit);
dcl  returned_unit fixed bin;			/* a unit from the word being tested */

	vowel_flag = '0'b;
	goto generate;

random_vowel:	entry (returned_unit);

	vowel_flag = '1'b;


generate:

/* get the next unit of the word being tested */

	if returned_unit < 0 | (returned_unit = 0 & word_index ^= 0)
	    then goto not_accepted;		/* if last unit was not accepted */
	word_index = word_index + 1;
	new_unit = word_array (word_index);	/* get next unit from word */
	if vowel_flag				/* if random_word_ wanted a vowel, and this next */
	    then if ^rules.vowel (new_unit)	/* unit is not one, then we have to give up      */
		then if ^rules.alternate_vowel (new_unit)	/* can't give random_word_ a non-vowel */
		    then goto not_accepted;			/* when it expects a vowel             */
	returned_unit = new_unit;
	return;

    end;


end pronounceable_;


/* ROUTINE random_word_
!
! FUNCTIONAL DESCRIPTION:
!
! This procedure generates a pronounceable random word of caller specified length
! and returns the word and the hyphenated (divided into syllables) form of the
! word. 
!
! INPUT PARAMETERS:
!	 hyphens -	position of hyphens, bit on indicates hyphen appears
!		     	after corresponding unit in "word".
!
! 	length -      	length of word to be generated in letters.
!
!
! 	random_unit -  	routine to be called to generate a random unit.
!
! 	random_vowel - 	routine to be called to generate a random vowel.
!
! 	d_ptr -	
! 	l_ptr -	 	pointers to digram table.
! 	r_ptr -	
!
! 	n_units - 	size of digram table (n_units x n_units).
!
! OUTPUT PARAMETERS:
! 	word -         	random word, 1 unit per array element.
! 	word_length -  	actual length of word in units.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
*/

random_word_: procedure (password, hyphenated_word, length, word_length,
			 random_unit, random_vowel, d_ptr, l_ptr, r_ptr,
				n_units);

dcl  password(*) fixed bin;			/* PARAMETER: unit number coded form of word */
dcl  hyphenated_word(*) bit(1) aligned;		/* PARAMETER: position of hyphens in word */
dcl  length fixed bin;			  	/* PARAMETER: length of word in letters */
dcl  word_length fixed bin;		  	/* PARAMETER: length of word in units */

dcl  n_units fixed bin;				/* PARAMETER: number of units in unit table */
dcl  d_ptr ptr;					/* PARAMETER: pointer to digram table */
dcl  l_ptr ptr;					/* PARAMETER: pointer to unit letters table */
dcl  r_ptr ptr;					/* PARAMETER: pointer to unit rules table */


/* this array contains information about all possible pairs of units */

dcl 1 digrams(n_units, n_units) based(d_ptr),
      2 begin bit(1),		/* on if this pair must begin syllable */
      2 not_begin bit(1),	/* on if this pair must not begin */
      2 end bit(1),		/* on if this pair must end syllable */
      2 not_end bit(1),		/* on if this pair must not end */
      2 break bit(1),		/* on if this pair is a break pair */
      2 prefix bit(1),		/* on if vowel must precede this pair in same syllable */
      2 suffix bit(1),		/* on if vowel must follow this pair in same syllable */
      2 illegal_pair bit(1);	/* on if this pair may not appear */


/* this array contains left justified 1 or 2-letter pairs representing each unit */

dcl letters(0:n_units) char(2) based(l_ptr);


/* this is the same as letters, but allows reference to individual characters */

dcl 1 letters_split(0:n_units) based(l_ptr),
      2 first char(1),
      2 second char(1);


/* this array has rules for each unit */

dcl 1 rules(n_units) based(r_ptr),
      2 no_final_split bit(1),		/* can't be the only vowel in last syllable */
      2 not_begin_syllable bit(1),	/* can't begin a syllable */
      2 vowel bit(1),			/* this is a vowel */
      2 alternate_vowel bit(1);   	/* this is an alternate vowel, (i.e., "y") */


dcl  random_unit entry (fixed bin);	/* get a unit */
dcl  random_vowel entry (fixed bin);	/* get a vowel unit */
dcl  unit fixed bin;			/* a unit number from random_unit or random_vowel */

dcl  nchars fixed bin;			/* number of characters in password */
dcl  index fixed bin init(1);		/* index of current unit in password */
dcl (first, second) fixed bin init(1);	/* index into digram table for current unit pair */
dcl  syllable_length fixed bin init(1);	/* 1 when next unit is 1st in syllable, 2 if 2nd, etc. */

dcl  vowel_found bit(1) aligned; 	/* set if vowel was found somewhere in syllable before this unit */
dcl  last_vowel_found aligned bit(1);	/* set if previous unit in this syllable was a vowel */
dcl  cons_count fixed bin init(0);	/* count of consecutive consonants in syllable preceeding current unit */

dcl  debug bit(1) aligned init('0'b);	/* debugging switch */
dcl  i fixed bin;

	do i = 0 to length;
	    password (i) = 0;
	    hyphenated_word (i) = '0'b;
	    end;
	nchars = length;

/* get rest of units in password */

	unit = 0;
	do index = 1 by 1 while (index <= nchars);
	    if syllable_length = 1
	    then do;				/* on first unit of a syllable, use any unit */
keep_trying:	unit = abs (unit);		/* last unit was accepted (or first in word), make positive */
		goto first_time;
retry:		unit = -abs (unit);		/* last unit was not accepted, make negative */
first_time:
		if index = nchars		/* if last unit of word must be a syllable, it must be a vowel */
		    then call random_vowel (unit);
		    else call random_unit (unit);
		password (index) = abs (unit);		/* put actual unit in word */
		if index ^= 1
		    then if digrams (password (index-1), password (index)).illegal_pair
			then goto retry;		/* this pair is illegal */
		if rules (password (index)).not_begin_syllable
		    then goto retry;
		if letters_split.second (password (index)) ^= ' '
		    then if index = nchars
			then goto retry;
			else if index = nchars-1 & ^rules (password (index)).vowel
				& ^rules (password (index)).alternate_vowel
			    then goto retry;		/* last unit was a double-letter unit and not a vowel */
			    else if unit < 0
				then goto keep_trying;
				else nchars = nchars - 1;
		    else if unit < 0
			then goto keep_trying;
		syllable_length = 2;
		if rules (password (index)).vowel | rules (password (index)).alternate_vowel
		    then do;
			cons_count = 0;
			vowel_found = '1'b;
			end;
		    else do;
			cons_count = 1;
			vowel_found = '0'b;
			end;
		last_vowel_found = '0'b;
		end;
	    else do;
		call generate_unit;
		if second = 0 then goto all_done;	/* we have word already */
		end;
	    end;

/* enter here at end of word */

all_done:
	word_length = index - 1;
	return;


/* ROUTINE procedure generate_unit

!
! FUNCTIONAL DESCRIPTION:
!
! generate next unit to password, making sure that it follows these rules:
! 1. Each syllable must contain exactly 1 or 2 consecutive vowels,
!     where y is considered a vowel.
! 2. Syllable end is determined as follows:
!    a. Vowel is generated and previous unit is a consonant and
!       syllable already has a vowel.  In this case new syllable is
!       started and already contains a vowel.
!    b. A pair determined to be a "break" pair is encountered.
!       In this case new syllable is started with second unit of this pair.
!    c. End of password is encountered.
!    d. "begin" pair is encountered legally.  New syllable is started
!       with this pair.
!    e."end" pair is legally encountered.  New syllable has nothing yet.
! 3. Try generating another unit if:
!    a. third consecutive vowel and not y.
!    b. "break" pair generated but no vowel yet in current syllable
!       or previous 2 units are "not_end".
!    c. "begin" pair generated but no vowel in syllable preceeding
!       begin pair, or both previous 2 pairs are designated "not_end".
!    d. "end" pair generated but no vowel in current syllable or in "end" pair.
!    e. "not_begin" pair generated but new syllable must begin
!       (because previous syllable ended as defined in 2 above).
!    f. vowel is generated and 2a is satisfied, but no syllable break is
!	 possible in previous 3 pairs.
!    g. Second & third units of syllable must begin, and first unit is
!	 "alternate_vowel".
!
! The done routine checks for required prefix vowels & end of word conditions.
!
! INPUT PARAMETERS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
**/

generate_unit: procedure;

dcl 1 x,		/* rules for the digram currently being tested*/
      2 begin bit(1),		/* on if this pair must begin syllable */
      2 not_begin bit(1),	/* on if this pair must not begin */
      2 end bit(1),		/* on if this pair must end syllable */
      2 not_end bit(1),		/* on if this pair must not end */
      2 break bit(1),		/* on if this pair is a break pair */
      2 prefix bit(1),		/* on if vowel must precede this pair in same syllable */
      2 suffix bit(1),		/* on if vowel must follow this pair in same syllable */
      2 illegal_pair bit(1);	/* on if this pair may not appear */

dcl  unit_count fixed bin init (1);	/* count of tries to generate this unit */
dcl  try_for_vowel bit(1) aligned;	/* set if next unit needed is a vowel */
dcl  v bit(1) aligned;			/* set if last unit generated is a vowel, or an */
					/* alternate vowel to be treated as a vowel     */

dcl  i fixed bin;


	first = password (index-1);

/* on last unit of word and no vowel yet in syllable, or if previous pair */
/* requires a vowel and no vowel in syllable, then try only for a vowel   */

	if syllable_length = 2			/* this is the second unit of syllable */
	    then try_for_vowel = ^vowel_found & index=nchars; /* last unit of word and no vowel yet, try for vowel */
	    else				/* this is at least the third unit of syllable */
	    if ^vowel_found | digrams (password (index-2), first).not_end
		then try_for_vowel = digrams (password (index-2), first).suffix;
		else try_for_vowel = '0'b;
	goto keep_trying;			/* on first try of a unit, don't make the tests below */

/* come here to try another unit when previous one was not accepted */

try_more:
	unit = -abs (unit);			/* last unit was not accepted, set sign negative */
	if unit_count = 100
	    then do;
		if debug
		    then do;
			put edit ('100 tries failed to generate unit.', 'password so far is: ')
			      (a, skip, a);
			do i = 1 to index;
			    put edit (letters (password (i)))  (a);
			    end;
			put skip;
			end;
		call random_word_ (password, hyphenated_word, length, index,
				   random_unit, random_vowel, d_ptr, l_ptr,
				   r_ptr, n_units);
		second = 0;
		return;
		end;

/* come here to try another unit whether last one was accepted or not */

keep_trying:
	if try_for_vowel
	    then call random_vowel (unit);
	    else call random_unit (unit);
	second = abs (unit);			/* save real value of unit number */
	if unit > 0
	    then unit_count = unit_count + 1;	/* count number of tries */

/* check if this pair is legal */

	if digrams (first, second).illegal_pair
	    then goto try_more;
	    else if first = second		/* if legal, throw out 3 in a row */
		then if index > 2
		    then if password (index-2) = first
			then goto try_more;
	if letters_split (second).second ^= ' '	/* check if this is 2 letters */
	    then if index = nchars		/* then if this is the last unit of word */
		then goto try_more;		/* then a two-letter unit is illegal */
		else nchars = nchars - 1;	/* otherwise decrement number of characters */
	password (index) = second;
	if rules (second).alternate_vowel
	    then v = ^rules (first).vowel;
	    else v = rules (second).vowel;
	x = digrams (first, second);
	if syllable_length > 2					/* force break if last pair must be followed */
	    then if digrams (password (index-2), first).suffix	/* by a vowel and this unit is not a vowel   */
		then if ^v
		     then break = '1'b;		/* if last pair was not_end, new_unit gave us a vowel */

/* In the notation to the right, the series of letters and dots stands	       */
/* for the last n units in this syllable, to be interpreted as follows:	       */
/* 	v stands for a vowel (including alternate_vowel)		       */
/* 	c stands for a consonant					       */
/* 	x stands for any unit						       */
/* the dots are interpreted as follows (c is used as example)		       */
/* 	c...c  one or more consecutive consonants			       */
/* 	c..c   zero or more consecutive consonants			       */
/* 	...c   one or more consecutive consonants from beginning of syllable   */
/* 	..c    zero or more consecutive consonants from beginning of syllable  */
/* the vertical line | marks a syllable break.
/* The group of symbols indicates what units there are in current
/* syllable.  The last symbol is always the current unit.
/* The first symbol is not necessarily the first unit in the
/* syllable, unless preceeded by dots.  Thus, "vcc..cv" should be
/* interpreted as "..xvcc..cv" (i.e., add "..x" to the beginning of all
/* syllables unless dots begin the syllable.). */

	if syllable_length = 2 & not_begin	/* pair may not begin syllable */
	    then goto loop;			/* rule 3e. */
	if vowel_found
	    then if cons_count ^= 0
		then if begin			/* vc...cx */
		    then if syllable_length ^= 3 & not_end_(3) /* vc...cx begin */
			then			/* can we break at vc..c|cx */
			if not_end_ (2)		/* no, try a break at vc...c|x */
			    then goto loop;	/* rule 3c. */
			    else call done (v, 2);	/* vc...c|x begin, treat as break */
			else call done (v, 3);		/* vc..c|cx begin */
		    else if not_begin			/* vc...cx ^begin */
			then if break			/* vc...cx not_begin */
			    then if not_end_ (2)	/* vc...c|x break */
				then goto loop;		/* rule 3b, can't break */
				else call done (v, 2);	/* vc...c|x break */
			    else if v			/* vc...cx ^break not_begin */
				then			/* vc...cv ^break not_begin */
				if not_end_ (2)		/* try break at vc...c|v */
				    then goto loop;	/* rule 3f, break no good */
				    else call done ('1'b, 2);	/* vc...c|v treat as break */
				else if end			/* vc...cc ^break not_begin */
				    then call done ('0'b, 1);	/* vc...cc| end */
				    else call done ('1'b, 0);	/* vc...cc ^break ^end not_begin */
			else if v			/* vc...cx ^begin ^not_begin */
			    then 			/* vc...cv rule 2a says we must break somewhere */
			    if not_end_ (3) & syllable_length ^= 3 
				then if not_end_ (2)	/* vc..c|cv doesn't work */
				    then if cons_count > 1	/* vc...c|v doesn't work */
					then			/* vc...ccv */
					if not_end_ (4) 	/* try vc..c|ccv */
					| digrams (password (index-2), first).not_begin
					    then goto loop;	/* rule 3f */
					    else call done ('1'b, 4); /* vc...c|ccv */
					else goto loop;	/* vc...c|v and vc..c|cv are no good */
				    else call done ('1'b, 3);	/* vc...c|v treat as break */
				else call done ('1'b, 3);	/* vc..c|cv treat as break */
			    else call done ('1'b, 0);	/* vc...cc ^begin ^not_begin */
		else		/* vowel found and last unit is not consonant => last unit is vowel */
		if v & rules.vowel (password (index-2)) & index > 2 
		    then goto loop;			/* rule 3a, 3 consecutive vowels non-y */
		    else if end				/* vx */
			then call done ('0'b, 1);	/* vx end */
			else if begin			/* vx ^end */
			    then if last_vowel_found	/* vx begin */
				then if v		/* v...vvx begin */
				    then if syllable_length = 3	/* v...vvv begin */
					then if rules(password((index-2))).alternate_vowel /* |vvv begin */
					    then goto loop;	/* rule 3g, |'y'|vv is no good */
					    else call done('1'b, 3); /* |v|vv begin */
					else if not_end_ (3)	/* v...vvv begin */
					    then goto loop;	/* rule 3c, v...v|vv no good */
					    else call done('1'b, 3); /* v...v|vv begin */
				    else if syllable_length = 3	/* v...vvc begin */
					then if rules.alternate_vowel(password(index-2)) /* |vvc begin */
					    then goto loop;	/* rule 3g, |'y'|vc is no good */
					    else if rules.vowel(password(index-2)) /* |x|vc begin */
						then call done('1'b, 3); /* |v|vc begin */
						else goto loop;	/* |c|vc begin is illegal */
					else if not_end_ (3)	/* v...vvc begin */
					    then		/* v...vvc begin try to split pair */
					    if not_end_ (2)	/* v...vvc begin */
						then goto loop;	/* v...vv|c no good */
						else call done('0'b, 2); /* v...vv|c */
					    else call done('1'b, 3); /* v...v|vc begin */
				else				/* try splitting begin pair */
				if syllable_length > 2		/* ..cvx begin */
				    then if not_end_ (2)	/* ...cvx begin */
					then goto loop;		/* rule 3c, ...cv|x no good */
					else call done (v, 2);	/* ...cv|x begin */
				    else call done ('1'b, 0);	/* |vx begin */
			    else if break			/* ..xvx ^begin ^end */
				then if not_end_(2) & syllable_length > 2 /* ..xvx break */
				    then goto loop;		/* rule 3b, ..xv|x is no good */
				    else call done (v, 2);	/* ..v|x break */
				else call done ('1'b, 0);	/* ..vx ^end ^begin ^break */
	    else if break			/* ...cx */
		then goto loop;			/* rule 3b, ...c|x break no good */
		else if end			/* ...cx ^break */
		    then if v				/* ...cx end */
			then call done ('0'b, 1);	/* ...cv| end (new syllable) */
			else goto loop;			/* rule 3b, ...cc| end no good */
		    else if v				/* ...cx ^end ^break */
			then if begin & syllable_length > 2	/* ...cv ^end ^break */
			    then goto loop;			/* c...c|cv ^end ^break begin, rule 3c */
			    else call done ('1'b, 0);		/* ...cv ^end ^break ^begin */
			else if begin				/* ...cc ^break ^end */
			    then if syllable_length > 2		/* ..ccc begin */
				then goto loop;			/* rule 3c, ...ccc begin */
				else call done ('0'b, 3);	/* |cc begin */
			    else call done ('0'b, 0);		/* ..xcc ^end ^break ^begin */

/* ******** return here when unit generated has been accepted ****** */

	     return;

/* ******** enter here when unit generated was good, but we don't want to use it because ********* */
/* ******** it was supplied as a negative number by random_unit or random_vowel 	 ********* */

accepted_but_keep_trying:
	if letters_split (second).second ^= ' '
	    then nchars = nchars + 1;	/* pretend unit was no good */
	unit = -unit;			/* make positive to say that it would have been accepted */
	goto keep_trying;

/* ******** enter here when unit generated is no good ******* */

loop:	if letters_split (second).second ^= ' '
	    then nchars = nchars + 1;
	goto try_more;

		/***   procedure done   ***/

/* this routine is internal to generate_unit because it can return to loop. */
/* call done when new unit is generated and determined to be		    */
/* legal. Arguments are new values of:					    */
/* 	vf  vowel_found							    */
/* 	sl  syllable_length (number of units in syllable.		    */
/*			     0 means increment for this unit)		    */

done:	procedure (vf, sl);
dcl  vf bit (1) aligned;	/* set if vowel found in this syllable before this unit */
dcl  sl fixed bin;		/* number of units in syllable (0 if this unit is to be */
				/* added to the current syllable).			*/

/* if we are not within first 2 units of syllable, check if */
/* vowel must precede this pair 			    */

	if sl ^= 2
	    then if syllable_length ^= 2
		then if prefix 
		    then if ^rules.vowel (password (index-2))
			then			/* vowel must precede pair but no vowel precedes pair */
			if vowel_found		/* if there is a vowel in this syllable, */
			    then		/* we may be able to break this pair     */
			    if not_end_ (2)		/* check if this pair may be treated as break */
				then goto loop;		/* no, previous 2 units can't end */
				else do;		/* yes, break can be forced */
				    call done ('0'b, 2); /* ...cxx or ...cvx */
				    return;
				    end;
			    else goto loop;		/* no vowel in syllable */

/* Check end of word conditions.  If end of word is reached: */
/* 	1. We must have a vowel in current syllable, 	     */
/* 	2. This pair must be allowed to end syllable	     */

	if sl ^= 1
	    then if index = nchars
		then if not_end
		    then goto loop;
		    else if vf = '0'b
			then goto loop;

/* A final "e" may not be the only vowel in the last syllable. */

	if index = nchars
	    then if rules (second).no_final_split	/* this bit is on for "e" */
		then if sl ^= 1
		    then if rules.vowel (first)		/* e preceded by vowel is ok, however */
			then;
			else if ^vowel_found|syllable_length<3	/* otherwise previous 2 letters must */
			    then goto loop;			/* be able to end the syllable       */
			    else if unit < 0
				then goto accepted_but_keep_trying;
				else sl = 0;
	if unit < 0
	    then goto accepted_but_keep_trying;
	if v | sl = 1
	    then cons_count = 0;		/* this unit is a vowel or new syllable is to begin */
	    else if sl = 0
		then cons_count = cons_count + 1;	/* this was a consonant, increment count */
		else cons_count = min(sl-1, cons_count+1);	/* a new syllable was started some letters back, */ 
								/* cons_count gets incremented, but no more than */
								/* number of units in syllable                   */
	if sl = 0
	    then syllable_length = syllable_length + 1;
	    else syllable_length = sl;
	if syllable_length > 3
	    then last_vowel_found = vowel_found;
	    else last_vowel_found = '0'b;
	vowel_found = vf;
	if index - syllable_length + 1 ^= nchars
	    then hyphenated_word (index - syllable_length + 1) = '1'b;

	end done;

    end generate_unit;

		/***   procedure not_end_   ***/

/* not_end_(i) returns '1'b when ( password(index-i), password(index-i+1) ) may */
/* not end a syllable, or when password(index-i+2) may not begin a syllable     */

not_end_:    procedure (i) returns (bit (1));
dcl  i fixed bin;

	if i = index
	    then return (^rules.vowel (password (1)));
	if i ^= 1
	    then if rules.not_begin_syllable (password (index-i+2))
		then return ('1'b);
	return (digrams (password (index-i), password (index-i+1)).not_end);

    end not_end_;


end random_word_;
